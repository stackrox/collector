version: 2.1

setupGCP: &setupGCP
  run:
    name: Setup GCP env
    command: |
      which gcloud
      which gsutil
      gsutil ver
      gsutil ver -l | grep crcmod
      gcloud version
      cat ~/.boto || true
      echo '[Credentials]' >~/.boto
      echo 'gs_service_key_file = /tmp/gcp.json' >>~/.boto
      echo $GOOGLE_CREDENTIALS_CIRCLECI_COLLECTOR > /tmp/gcp.json
      gcloud auth activate-service-account --key-file /tmp/gcp.json
      gcloud config set project stackrox-ci
      gcloud config set compute/region us-central1
      gcloud config unset compute/zone
      gcloud config set core/disable_prompts True
      gcloud auth list
      gsutil ls gs://collector-build-cache/ || echo "ERROR: Could not ls bucket"

commands:
  initcommand:
    steps:
    - attach_workspace:
        at: ~/workspace
    - run:
        name: Set up environment
        command: |
          cat >>"$BASH_ENV" \<<-EOF
            export WORKSPACE_ROOT="${HOME}/workspace"
          EOF
          [[ -f ~/workspace/shared-env ]] && cat ~/workspace/shared-env >>"$BASH_ENV"

  gcloud-init:
    steps:
    - run:
        name: Install and configure gcloud
        working_directory: ~/.config/gcloud
        command: |
          if [[ -z "$ROX_CI_IMAGE" ]]; then
            pip install -U crcmod google_compute_engine
          fi
    - *setupGCP

  docker-login:
    steps:
    - run:
        name: Login to Docker Hub
        command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

jobs:
  initjob:
    docker:
    - image: circleci/golang:1.11.2-stretch
    working_directory: ~/workspace

    steps:
    - checkout:
        path: ~/workspace/go/src/github.com/stackrox/collector

    - add_ssh_keys:
        fingerprints:
        - "32:e2:6d:de:c3:bb:b8:a4:62:89:a1:df:7a:30:37:f2"

    - run:
        name: "Pull git submodule"
        command: |
          git -C ~/workspace/go/src/github.com/stackrox/collector submodule update --init

    - run:
        name: Set up shared environment
        command: |
          cat >~/workspace/shared-env \<<-"EOF"
            export GOPATH="${WORKSPACE_ROOT}/go"
            export SOURCE_ROOT="${GOPATH}/src/github.com/stackrox/collector"
            export COLLECTOR_SOURCE_ROOT="${SOURCE_ROOT}/collector"
            export PATH="${PATH}:${GOPATH}/bin:${WORKSPACE_ROOT}/bin"
          EOF

    - run:
        name: Set COLLECTOR_VERSION and IMAGE_COLLECTOR
        command: |
          COLLECTOR_VERSION="$(make -s -C ~/workspace/go/src/github.com/stackrox/collector/collector tag)"

          if [[ $CIRCLE_BRANCH = master || -n $CIRCLE_TAG ]]; then
            COLLECTOR_TAG="${COLLECTOR_VERSION}"
          else
            COLLECTOR_TAG="snapshot-${COLLECTOR_VERSION}"
          fi

          GCLOUD_SSH_FINGERPRINT="$(echo ${GCLOUD_SSH_KEY_PUB} | awk '{print $2}' | base64 -d | md5sum | awk '{print $1}')"
          GCP_SSH_KEY_FILE="${HOME}/.ssh/id_rsa_${GCLOUD_SSH_FINGERPRINT}" 

          cat >>~/workspace/shared-env \<<-EOF
            export COLLECTOR_VERSION="${COLLECTOR_VERSION}"
            export COLLECTOR_TAG="${COLLECTOR_TAG}"
            export IMAGE_COLLECTOR="stackrox/collector:${COLLECTOR_TAG}"
            export GCP_SSH_KEY_FILE="${GCP_SSH_KEY_FILE}"
          EOF
          cat ~/workspace/shared-env

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector
        - shared-env

  builder:
    machine: true
    steps:
    - initcommand
    - docker-login

    - run:
        name: Restore collector-builder cache image
        command: docker pull stackrox/collector-builder:cache || true

    - run:
        name: Build collector builder Docker image
        command: |
          docker build \
            --cache-from stackrox/collector-builder:cache \
            -t stackrox/collector-builder:cache "${SOURCE_ROOT}/builder"

    - run:
        name: Save collector-builder cache image
        command: |
          docker push stackrox/collector-builder:cache
          docker tag stackrox/collector-builder:cache "stackrox/collector-builder:circle-build-${CIRCLE_WORKFLOW_ID}"
          docker push "stackrox/collector-builder:circle-build-${CIRCLE_WORKFLOW_ID}"

  prepare-kernels:
    docker:
    - image: docker.io/stackrox/apollo-ci:collector-0.1.11-34-gd4c412a947
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASS
    environment:
      ROX_CI_IMAGE: "true"

    working_directory: ~/workspace

    steps:
    - initcommand

    - run:
        name: Install patch utility
        command: |
          sudo apt-get install patch

    - run:
        name: Prepare source
        command: |
          mkdir -p ~/kobuild-tmp/versions-src
          SYSDIG_DIR="${SOURCE_ROOT}/sysdig/src" \
              SCRATCH_DIR="${HOME}/scratch" \
              OUTPUT_DIR="${HOME}/kobuild-tmp/versions-src" \
            "${SOURCE_ROOT}/kernel-modules/build/prepare-src"

          versions=(~/kobuild-tmp/versions-src/*)
          [[ "${#versions[@]}" == 1 ]] || {
            echo >&2 "Expected a unique kernel module source version, got:"
            printf >&2 '- %s\n' "${versions[@]}"
            exit 1
          }

          version="$(basename "${versions[0]}")"
          MODULE_VERSION="${version%.tgz}"

          if [[ $CIRCLE_BRANCH = master || -n $CIRCLE_TAG ]]; then
            IMAGE_KERNEL_MODULES="stackrox/kernel-modules:${MODULE_VERSION}"
          else
            IMAGE_KERNEL_MODULES="stackrox/kernel-modules:snapshot-${COLLECTOR_VERSION}"
          fi

          cat >>"${WORKSPACE_ROOT}/shared-env" \<<-EOF
            export MODULE_VERSION="${MODULE_VERSION}"
            export IMAGE_KERNEL_MODULES="${IMAGE_KERNEL_MODULES}"
          EOF
          cat >>"$BASH_ENV" \<<-EOF
            export MODULE_VERSION="${MODULE_VERSION}"
            export IMAGE_KERNEL_MODULES="${IMAGE_KERNEL_MODULES}"
          EOF
          echo "Building modules for module version $version"

    - run:
        name: Prepare legacy sources
        command: |
          cd "$SOURCE_ROOT"
          if [[ ! -f RELEASED_VERSIONS ]]; then
            echo "RELEASED_VERSIONS file does not exist!"
            exit 1
          fi
            
          # get fingerprint from github
          GH_KEY="$(ssh-keyscan github.com 2> /dev/null)"
          GH_FINGERPRINT="$(echo ${GH_KEY} | ssh-keygen -lf - | cut -d" " -f2)"
          # Verify from: https://help.github.com/en/articles/githubs-ssh-key-fingerprints
          GH_FINGERPRINT_VERIFY="SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8"
          [[ "${GH_FINGERPRINT}" == "${GH_FINGERPRINT_VERIFY}" ]] || {
            echo >&2 "Unexpected SSH key fingerprint for github.com : ${GH_FINGERPRINT} != ${GH_FINGERPRINT_VERIFY}"
            exit 1
          }
          mkdir -p ~/.ssh
          echo "${GH_KEY}" > ~/.ssh/known_hosts

          LEGACY_DIR="/tmp/old-sysdig"
          SYSDIG_REL_DIR="sysdig/src"
          git clone git@github.com:stackrox/collector "${LEGACY_DIR}"

          while IFS='' read -r line || [[ -n "$line" ]]; do
            [[ -n "$line" ]] || continue

            collector_ref="$line"
            echo "Preparing module source archive for collector version ${collector_ref}"

            git -C "${LEGACY_DIR}" submodule deinit "${SYSDIG_REL_DIR}"
            git -C "${LEGACY_DIR}" clean -xdf
            git -C "${LEGACY_DIR}" checkout "${collector_ref}"
            git -C "${LEGACY_DIR}" submodule update --init

            SYSDIG_DIR="${LEGACY_DIR}/${SYSDIG_REL_DIR}" \
                SCRATCH_DIR="${HOME}/scratch" \
                OUTPUT_DIR="${HOME}/kobuild-tmp/versions-src" \
              ./kernel-modules/build/prepare-src

          done < <(grep -v '^#' <RELEASED_VERSIONS | awk '{print $1}' | sort | uniq)

          rm -rf "${LEGACY_DIR}"

          for i in "${HOME}/kobuild-tmp/versions-src"/*.tgz; do
            filename="$(basename "$i")"
            version="${filename%.tgz}"
            [[ "$version" != "$MODULE_VERSION" ]] || continue
            echo "Building modules for legacy module version $version"
          done

    - run:
        name: Prepare Kernel module build cache lookup
        command: |
          mkdir -p /tmp/cache
          echo "$MODULE_VERSION" >/tmp/cache/kernel-modules-version.txt

    - restore_cache:
        name: Restore Kernel module build cache
        keys:
          - kernel-module-cache-v8-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-{{ .Revision }}
          - kernel-module-cache-v8-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-
          - kernel-module-cache-v8-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-master-
          - kernel-module-cache-v8-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-

    - run:
        name: Unpack module sources
        command: |
          mkdir -p "${WORKSPACE_ROOT}/ko-build"
          cd "${WORKSPACE_ROOT}/ko-build"

          echo >build-tasks
          mkdir build-output

          for i in ~/kobuild-tmp/versions-src/*.tgz; do
            filename="$(basename "$i")"
            version="${filename%.tgz}"
            mkdir -p "module-versions/${version}"
            tar -C "module-versions/${version}" -xvzf "$i"
            mkdir -p "build-output/${MODULE_VERSION}"
          done

    - run:
        name: Copy cached modules to build output
        command: |
          [[ -d "/tmp/cache/kernel-modules/${MODULE_VERSION}/" ]] || exit 0
          mkdir -p "${WORKSPACE_ROOT}/ko-build/build-output/${MODULE_VERSION}"
          mv -v \
              "/tmp/cache/kernel-modules/${MODULE_VERSION}"/* \
              "${WORKSPACE_ROOT}/ko-build/build-output/${MODULE_VERSION}/" \
            || true

    - gcloud-init

    - run:
        name: Download missing modules for current version from gcloud bucket
        command: |
          gsutil -m rsync -r \
            "${COLLECTOR_MODULES_BUCKET}/${MODULE_VERSION}/" \
            "${WORKSPACE_ROOT}/ko-build/build-output/${MODULE_VERSION}/" \
            || true

    - run:
        name: Patch module sources
        command: |
          cd "${WORKSPACE_ROOT}/ko-build/module-versions"
          for version in *; do
            [[ -f "${SOURCE_ROOT}/kernel-modules/patches/${version}.patch" ]] || continue
            echo "Applying patch for module version ${version} ..."
            patch -p1 -d "$version" <"${SOURCE_ROOT}/kernel-modules/patches/${version}.patch"
          done

    - run:
        name: Compile list of cached modules for CURRENT module version
        command: |
          ( ls "${WORKSPACE_ROOT}/ko-build/build-output/${MODULE_VERSION}"/*.ko{,.gz} || true ) \
            | "${SOURCE_ROOT}/kernel-modules/build/extract-kernel-versions-from-module-files" \
            >~/kobuild-tmp/existing-modules-"${MODULE_VERSION}"

    - run:
        name: Compile list of existing modules for LEGACY module versions
        command: |
          for i in "${WORKSPACE_ROOT}/ko-build/module-versions"/*/; do
            version="$(basename "$i")"
            [[ "$version" != "$MODULE_VERSION" ]] || continue
            ( gsutil ls "${COLLECTOR_MODULES_BUCKET}/${version}/" || true)  \
              | "${SOURCE_ROOT}/kernel-modules/build/extract-kernel-versions-from-module-files" \
                >~/kobuild-tmp/existing-modules-"${version}"

            echo "Existing modules for version ${version}:"
            cat ~/kobuild-tmp/existing-modules-"${version}"
            echo
          done

    - run:
        name: Generate list of all (source, kernel version) build combinations
        command: |
          # all-build-tasks will contain all potentially possible build tasks, i.e., the cross
          # product between the set of kernel versions and the set of module versions
          echo >~/kobuild-tmp/all-build-tasks

          # redundant-build-tasks will contain all build tasks for which we already have the resulting
          # module.
          echo >~/kobuild-tmp/redundant-build-tasks

          cd "${WORKSPACE_ROOT}/ko-build"
          echo >~/kobuild-tmp/all-module-versions

          for i in module-versions/*/; do
            version="$(basename "$i")"
            echo "$version" >>~/kobuild-tmp/all-module-versions

            awk -v modver="$version" '{print $1 " " modver}' <"${SOURCE_ROOT}/kernel-modules/KERNEL_VERSIONS" >>~/kobuild-tmp/all-build-tasks
            awk -v modver="$version" '{print $1 " " modver}' <~/kobuild-tmp/existing-modules-"${version}" >>~/kobuild-tmp/redundant-build-tasks
          done

          # blacklisted-build-tasks is populated from the BLACKLIST file to exclude build tasks which would fail.
          echo >~/kobuild-tmp/blacklisted-build-tasks

          while read -a line || [[ "${#line[@]}" -gt 0 ]]; do
            [[ "${#line[@]}" -gt 0 ]] || continue
            kernel_version="${line[0]}"
            if [[ "${#line[@]}" -eq 1 ]]; then
              awk -v kernelver="${kernel_version}" '{print kernelver " " $1}' <~/kobuild-tmp/all-module-versions >>~/kobuild-tmp/blacklisted-build-tasks
            else
              module_version="${line[1]}"
              echo "${kernel_version} ${module_version}" >>~/kobuild-tmp/blacklisted-build-tasks
            fi
          done < <(sed -e 's@[[:space:]]*#.*$@@g' <"${SOURCE_ROOT}/kernel-modules/BLACKLIST")

          # Create the set of build tasks as the contents of `all-build-tasks` minus the redundant and blacklisted
          # build tasks.
          cat ~/kobuild-tmp/all-build-tasks \
              ~/kobuild-tmp/redundant-build-tasks ~/kobuild-tmp/redundant-build-tasks \
              ~/kobuild-tmp/blacklisted-build-tasks ~/kobuild-tmp/blacklisted-build-tasks \
            | sort | uniq -u >build-tasks

    - run:
        name: Print list of all (source, kernel version) build combinations
        command: |
          cd "${WORKSPACE_ROOT}/ko-build"

          num_build_tasks="$(wc -l build-tasks | awk '{print $1}')"
          echo "Building kernel modules for the following kernel/module version combinations:"
          sed -e 's@^@  @' <build-tasks
          echo "Total: ${num_build_tasks} kernel/module version combinations."

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build
          - bin
          - shared-env

  kernels:
    machine: true
    parallelism: 8
    environment:
    - BUILD_CONTAINER_TAG: stackrox/collector-builder:kobuilder-cache
    - BUILD_CONTAINER_CACHE_IMAGES: stackrox/collector-builder:kobuilder-cache

    steps:
    - initcommand

    - run:
        name: Determine tasks for current shard
        command: |
          echo "Nodes total: $CIRCLE_NODE_TOTAL"
          echo "Node index:  $CIRCLE_NODE_INDEX"

          cd "${WORKSPACE_ROOT}/ko-build"
          num_tasks=$(wc -l <build-tasks)
          shard_size=$(((num_tasks - 1) / CIRCLE_NODE_TOTAL + 1))

          echo "Total number of tasks: ${num_tasks}"
          echo "Tasks per shard: ${shard_size}"

          mkdir -p ~/kobuild-tmp
          cd ~/kobuild-tmp
          split -d -l "$shard_size" "${WORKSPACE_ROOT}/ko-build/build-tasks" task-shard-

          this_shard_file=~/kobuild-tmp/task-shard-"$(printf '%02d' "$CIRCLE_NODE_INDEX")"

          if [[ ! -s "$this_shard_file" ]]; then
            echo "Nothing to be done for this shard."
            circleci step halt
            exit 0
          fi

          mv "$this_shard_file" ~/kobuild-tmp/local-build-tasks

          num_build_tasks="$(wc -l ~/kobuild-tmp/local-build-tasks | awk '{print $1}')"
          echo "Building kernel modules for the following kernel/module version combinations:"
          sed -e 's@^@  @' <~/kobuild-tmp/local-build-tasks
          echo "Total: ${num_build_tasks} kernel/module version combinations."

          awk '{print $1}' <~/kobuild-tmp/local-build-tasks | sort | uniq >~/kobuild-tmp/all-kernel-versions
          awk '{print $2}' <~/kobuild-tmp/local-build-tasks | sort | uniq >~/kobuild-tmp/all-module-versions

          cd "${WORKSPACE_ROOT}/ko-build/build-output"
          xargs <~/kobuild-tmp/all-module-versions mkdir -p

    - gcloud-init
    - run:
        name: Download required packages
        command: |
          mkdir -p ~/kobuild-tmp/bundles

          awk -v bucket="$KERNEL_BUNDLES_BUCKET" '{print bucket "/bundle-" $1 ".tgz"}' <~/kobuild-tmp/all-kernel-versions \
            | gsutil -m cp -I ~/kobuild-tmp/bundles/

          ls ~/kobuild-tmp/bundles/

    - docker-login

    - run:
        name: Restore builder cache image(s)
        command: docker pull $BUILD_CONTAINER_CACHE_IMAGES || true

    - run:
        name: Build builder image
        command: |
          make -C "${SOURCE_ROOT}/kernel-modules" build-container
          docker tag "$BUILD_CONTAINER_TAG" build-kernel-modules

    - run:
        name: Upload builder cache image
        command: |
          # [[ "$CIRCLE_BRANCH" == "master" ]] || exit 0
          (( CIRCLE_NODE_INDEX == 0 )) || exit 0
          docker push "$BUILD_CONTAINER_TAG"
        background: true

    - run:
        name: Build modules
        command: |
          docker run --rm -i \
            -e FAILURE_LOG_FILE="/output/FAILURES-${CIRCLE_NODE_INDEX}" \
            -v "${HOME}/kobuild-tmp/bundles:/bundles:ro" \
            -v "${WORKSPACE_ROOT}/ko-build/module-versions:/sources:ro" \
            -v "${WORKSPACE_ROOT}/ko-build/build-output:/output" \
            --tmpfs /scratch:exec \
            build-kernel-modules \
            build-kos <~/kobuild-tmp/local-build-tasks

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build/build-output
  grpc:
    docker:
    - image: ubuntu:trusty
    working_directory: /go/src/github.com/stackrox/collector

    steps:
    - run:
        name: Install dependencies
        command: |
          apt-get update -y
          apt-get install -y build-essential ca-certificates git sudo

    - checkout
    - restore_cache:
        key: grpc-cpp-plugin-v3-{{ checksum "build/scripts/install-grpc-cpp-plugin.sh" }}

    - run:
        name: Build grpc plugin
        command: |
          if [[ ! -x /usr/local/bin/grpc_cpp_plugin ]]; then
            make -C collector install-grpc
          fi

    - save_cache:
        key: grpc-cpp-plugin-v3-{{ checksum "build/scripts/install-grpc-cpp-plugin.sh" }}
        paths:
          - /usr/local/bin/grpc_cpp_plugin

    - persist_to_workspace:
        root: /usr/local
        paths:
          - bin/grpc_cpp_plugin

  libsinsp:
    machine: true
    working_directory: ~/workspace

    steps:
    - initcommand
    - docker-login

    - run:
        name: Restore sysdig builder cache image
        command: docker pull stackrox/collector-builder:sysdig || true

    - run:
        name: Build libsinsp Wrapper
        command: make -C "${COLLECTOR_SOURCE_ROOT}" container/libs/libsinsp-wrapper.so

    - run:
        name: Sanity check
        command: |
          cd "${COLLECTOR_SOURCE_ROOT}"
          ls -lh container/libs
          file   container/libs/libsinsp-wrapper.so
          docker images | grep collector

    - run:
        name: Save sysdig builder cache image
        command: docker push stackrox/collector-builder:sysdig

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector/collector/container/libs

  collector:
    machine: true
    working_directory: ~/workspace

    steps:
    - initcommand
    - docker-login

    - run:
        name: Restore collector-builder cache image
        command: docker pull "stackrox/collector-builder:circle-build-${CIRCLE_WORKFLOW_ID}"

    - run:
        name: Sanity Check
        command: |
          cd "${SOURCE_ROOT}"
          pwd
          echo '>>> Userspace lib:'
          ls -lh collector/container/libs
          file   collector/container/libs/libsinsp-wrapper.so
          echo '>>> Docker images:'
          docker images | grep collector
          echo '>>> gRPC plugin:'
          which grpc_cpp_plugin

    - run:
        name: Generate Protobuf Definitions
        command: make -C "$COLLECTOR_SOURCE_ROOT" generated-srcs

    - run:
        name: Build collector
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          mkdir -p container/bin
          docker run \
            -v "$PWD:/src:ro" \
            -v "$PWD/sysdig/src:/usr/local/sysdig:ro" \
            -v "$PWD/container/libs/libsinsp-wrapper.so:/usr/local/lib/libsinsp-wrapper.so:ro" \
            -v "$PWD/sysdig/src/driver/ppm_events_public.h:/usr/local/include/ppm_events_public.h:ro" \
            -v "$PWD/sysdig/src/driver/ppm_fillers.h:/usr/local/include/ppm_fillers.h:ro" \
            -v "$PWD/cmake-build:/build-output" \
            --name build "stackrox/collector-builder:circle-build-${CIRCLE_WORKFLOW_ID}"

    - run:
        name: Extract collector files
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          cp cmake-build/collector container/bin/
          ls -lh container/bin/

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector/collector/container/bin

  images:
    machine: true
    environment:
    - INSTALL_DIRECTORY: /tmp

    steps:
    - initcommand
    - docker-login
    - gcloud-init

    - run:
        name: Test for build failures
        command: |
          if ls "${WORKSPACE_ROOT}/ko-build/build-output/FAILURES-"* 2>/dev/null; then
            echo >&2 "Compilation failed for some kernel/module version combinations!"
            cat >&2 2>/dev/null "${WORKSPACE_ROOT}/ko-build/build-output/FAILURES-"*
            exit 1
          fi

    - run:
        name: Copying Kernel modules build output
        command: |
          mkdir -p "${SOURCE_ROOT}/kernel-modules/container/kernel-modules"
          mv "${WORKSPACE_ROOT}/ko-build/build-output/${MODULE_VERSION}/"* \
            "${SOURCE_ROOT}/kernel-modules/container/kernel-modules" || true

    - run:
        name: Preparing Kernel modules build cache
        command: |
          mkdir -p "/tmp/cache/kernel-modules/${MODULE_VERSION}/"
          cp -rl "${SOURCE_ROOT}/kernel-modules/container/kernel-modules/." \
            "/tmp/cache/kernel-modules/${MODULE_VERSION}/"
          echo "$MODULE_VERSION" >/tmp/cache/kernel-modules-version.txt

    - save_cache:
        name: Saving Kernel module build cache
        key: kernel-module-cache-v8-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-{{ .Revision }}
        paths:
          - /tmp/cache/

    - run:
        name: Adding Kernel module version file
        command: |
          mkdir -p "${SOURCE_ROOT}/kernel-modules/container/kernel-modules"
          echo "$MODULE_VERSION" \
            >>"${SOURCE_ROOT}/kernel-modules/container/kernel-modules/MODULE_VERSION.txt"

    - run:
        name: Sanity check
        command: |
          cd "$SOURCE_ROOT"
          echo '>>> Collector Artifacts:'
          find collector/container
          echo '>>> Kernel Modules:'
          find kernel-modules/container

    - run:
        name: Build kernel-modules Docker image
        command: |
          cd "${SOURCE_ROOT}/kernel-modules/container"
          docker build \
            -t "stackrox/kernel-modules:${MODULE_VERSION}" \
            -t "stackrox/kernel-modules:snapshot-${COLLECTOR_VERSION}" \
            .

    - run:
        name: Build collector Docker images
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          cp NOTICE-collector.txt container/
          cp COPYING.txt container/
          docker build \
            -f container/Dockerfile \
            -t "stackrox/collector:snapshot-${COLLECTOR_VERSION}" \
            -t "stackrox/collector:${COLLECTOR_VERSION}" \
            --build-arg base="$MODULE_VERSION" \
            container
          docker build \
            -f container/Dockerfile_slim \
            -t "stackrox/collector:snapshot-${COLLECTOR_VERSION}-slim" \
            -t "stackrox/collector:${COLLECTOR_VERSION}-slim" \
            --build-arg base="$MODULE_VERSION" \
            container

    - run:
        name: Sanity check images
        command: |
          docker images | grep kernel | grep "${MODULE_VERSION}"
          docker images | grep kernel | grep "snapshot-${COLLECTOR_VERSION}"
          docker images | grep collector | grep "${COLLECTOR_VERSION}"

    - run:
        name: Push images
        command: |
          echo "Pushing collector image"
          docker push "${IMAGE_COLLECTOR}"
          echo "Pushing collector slim image"
          docker push "${IMAGE_COLLECTOR}-slim"
          echo "Pushing kernel module image"
          docker push "${IMAGE_KERNEL_MODULES}"

  upload-modules:
    docker:
    - image: docker.io/stackrox/apollo-ci:collector-0.1.11-34-gd4c412a947
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASS
    environment:
      ROX_CI_IMAGE: "true"

    working_directory: ~/workspace

    steps:
      - initcommand
      - gcloud-init

      - run:
          name: Uploading Kernel modules
          command: |
            gsutil -m rsync -r \
              "${WORKSPACE_ROOT}/ko-build/build-output/" \
              "${COLLECTOR_MODULES_BUCKET}/"

      - run:
          name: Sanity check
          command:
            gsutil ls "${COLLECTOR_MODULES_BUCKET}/${MODULE_VERSION}/"

  integration-test-local:
    machine: true
    working_directory: ~/workspace

    steps:
    - initcommand
    - docker-login
    - gcloud-init
    - run:
        name: "Running integration tests"
        no_output_timeout: 45m
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          go get -u github.com/jstemmer/go-junit-report
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          sudo mv /home/circleci/workspace/go/bin/dep /usr/local/bin/dep
          export REMOTE_HOST_TYPE=local
          export COLLECTION_METHOD=kernel_module
          export VM_CONFIG=circle_local
          make integration-tests
          make integration-test-report
          [[ -z "$CIRCLE_BRANCH" ]] || gsutil cp ~/workspace/go/src/github.com/stackrox/collector/collector/integration-test-report.xml "gs://stackrox-ci-results/circleci/collector/${CIRCLE_BRANCH}/$(date +%Y-%m-%d)-${CIRCLE_BUILD_NUM}/"

    - store_test_results:
        path: ~/workspace/go/src/github.com/stackrox/collector/collector/integration-test-report.xml
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/collector/integration-test-report.xml
        destination: "integration-test-report.xml"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/collector.logs
        destination: "collector.logs"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/grpc-server.logs
        destination: "grpc-server.logs"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/perf.json
        destination: kernel_module-circle_local-perf.json

  integration-test:
    parameters:
      collection_method:
        type: enum
        enum: [module, ebpf]
      vm_type:
        type: enum
        enum: [coreos, cos, rhel, ubuntu-os]
      image_family:
        type: enum
        enum: [coreos-stable, cos-stable, cos-69-lts, cos-73-lts, rhel-7, rhel-8, ubuntu-1804-lts, ubuntu-1904]

    machine: true
    working_directory: ~/workspace

    steps:
    - initcommand
    - add_ssh_keys
    - docker-login
    - gcloud-init

    - run:
        name: "Extract gcp ssh public key from environment variable"
        command: |
          echo "${GCLOUD_SSH_KEY_PUB}" > "${GCP_SSH_KEY_FILE}.pub"
          chmod 0600 "${GCP_SSH_KEY_FILE}.pub"

    - run:
        name: "Create VM"
        command: |
          source $SOURCE_ROOT/.circleci/create-vm.sh
          export GCLOUD_INSTANCE="collector-ci-<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-${CIRCLE_BUILD_NUM}"
          export VM_TYPE=<< parameters.vm_type >>
          export IMAGE_FAMILY=<< parameters.image_family >>
          main "$GCLOUD_INSTANCE" "$VM_TYPE" "$IMAGE_FAMILY" "$GCP_SSH_KEY_FILE" "$DOCKER_USER" "$DOCKER_PASS" 

    - run:
        name: "Running integration tests"
        no_output_timeout: 45m
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          go get -u github.com/jstemmer/go-junit-report
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          sudo mv /home/circleci/workspace/go/bin/dep /usr/local/bin/dep
          export REMOTE_HOST_TYPE=gcloud
          export GCLOUD_INSTANCE="collector-ci-<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-${CIRCLE_BUILD_NUM}"
          export GCLOUD_OPTIONS="--ssh-key-file=${GCP_SSH_KEY_FILE}"
          export COLLECTION_METHOD=<< parameters.collection_method >>
          export VM_CONFIG="<< parameters.vm_type >>.<< parameters.image_family >>"
          make integration-tests-baseline integration-tests integration-test-report
          cp "${WORKSPACE_ROOT}/go/src/github.com/stackrox/collector/integration-tests/perf.json" "${WORKSPACE_ROOT}/<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-perf.json"
          [[ -z "$CIRCLE_BRANCH" ]] || gsutil cp ~/workspace/go/src/github.com/stackrox/collector/collector/integration-test-report.xml "gs://stackrox-ci-results/circleci/collector/${CIRCLE_BRANCH}/$(date +%Y-%m-%d)-${CIRCLE_BUILD_NUM}/"

    - run:
        name: "Get serial port output"
        command: |
          export GCLOUD_INSTANCE="collector-ci-<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-${CIRCLE_BUILD_NUM}"
          mkdir -p ~/workspace/serial-output
          gcloud compute instances get-serial-port-output "$GCLOUD_INSTANCE" > ~/workspace/serial-output/"$GCLOUD_INSTANCE"-serial-output.logs
        when: always

    - store_test_results:
        path: ~/workspace/go/src/github.com/stackrox/collector/collector/integration-test-report.xml
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/collector/integration-test-report.xml
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-integration-test-report.xml"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/collector.logs
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-collector.logs"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/grpc-server.logs
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-grpc-server.logs"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/perf.json
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-perf.json"
    - store_artifacts:
        path: ~/workspace/serial-output

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-perf.json"

    - run:
        name: "Destroy VM"
        command: |
          export GCLOUD_INSTANCE="collector-ci-<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-${CIRCLE_BUILD_NUM}"
          gcloud compute instances delete $GCLOUD_INSTANCE
        when: always

  integration-test-data:
    machine: true
    working_directory: ~/workspace

    steps:
    - initcommand

    - run:
        name: "Gather Data"
        command: |
          echo "ls 1"
          for i in "${WORKSPACE_ROOT}"/*perf.json; do
            echo "Performance data file: $i"
            cat $i >> ~/workspace/all-perf.json
          done
          ## TODO put into script
          cat all-perf.json | jq '. | select(.Metrics.hackbench_avg_time != null) | {kernel: .VmConfig, collection_method: .CollectionMethod, (.TestName): .Metrics.hackbench_avg_time } ' | jq -rs  ' group_by(.kernel) | .[] | group_by(.collection_method) | .[] | add | [.kernel, .collection_method, .baseline_benchmark, .collector_benchmark ] | @csv' > ~/workspace/benchmark.csv
          cat ~/workspace/benchmark.csv | sort | awk -v FS="," 'BEGIN{print "|Kernel|Method|Without Collector Time (secs)|With Collector Time (secs)|";print "|---|---|---|---|"}{printf "|%s|%s|%s|%s|%s",$1,$2,$3,$4,ORS}' > ~/workspace/benchmark.md

    - run:
        name: Comment on PR
        command: |
          wget --quiet https://github.com/joshdk/hub-comment/releases/download/0.1.0-rc6/hub-comment_linux_amd64
          sudo install hub-comment_linux_amd64 /usr/bin/hub-comment

          export PERF_TABLE=$(cat ~/workspace/benchmark.md)
          hub-comment -template-file "${SOURCE_ROOT}/.circleci/performance-comment-template.tpl"

    - store_artifacts:
        path: ~/workspace/all-perf.json
    - store_artifacts:
        path: ~/workspace/benchmark.md
    - store_artifacts:
        path: ~/workspace/benchmark.csv

workflows:
  version: 2
  build:
    jobs:
    - initjob:
        filters:
          tags:
            only: /.*/
    - builder:
        requires:
        - initjob
        filters:
          tags:
            only: /.*/
    - grpc:
        requires:
        - initjob
        filters:
          tags:
            only: /.*/
    - libsinsp:
        requires:
        - initjob
        filters:
          tags:
            only: /.*/
    - collector:
        requires:
        - builder
        - grpc
        - libsinsp
        filters:
          tags:
            only: /.*/
    - prepare-kernels:
        requires:
        - initjob
        filters:
          tags:
            only: /.*/
    - kernels:
        requires:
        - prepare-kernels
        filters:
          tags:
            only: /.*/
    - upload-modules:
        requires:
          - kernels
        filters:
          tags:
            only: /.*/
    - images:
        requires:
        - collector
        - kernels
        filters:
          tags:
            only: /.*/
    - integration-test-local:
        requires:
        - images
        - upload-modules
        filters:
          tags:
            only: /.*/

    - integration-test:
        name: test-ebpf-coreos-stable
        collection_method: ebpf
        vm_type: coreos
        image_family: coreos-stable
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-module-coreos-stable
        collection_method: module
        vm_type: coreos
        image_family: coreos-stable
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    ## TODO(rc) Enable after fixing `Kernel panic - not syncing: softlockup: hung tasks`
    #- integration-test:
    #    name: test-ebpf-cos-stable
    #    collection_method: ebpf
    #    vm_type: cos
    #    image_family: cos-stable
    #    requires:
    #    - images
    #    - integration-test-local
    #    filters:
    #      tags:
    #        only: /.*/
    - integration-test:
        name: test-ebpf-cos-69-lts
        collection_method: ebpf
        vm_type: cos
        image_family: cos-69-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-cos-73-lts
        collection_method: ebpf
        vm_type: cos
        image_family: cos-73-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    ## TODO(rc) enable ebpf rhel7 after fixing error on bpf map create
    #- integration-test:
    #    name: test-ebpf-rhel-7
    #    collection_method: ebpf 
    #    vm_type: rhel
    #    image_family: rhel-7
    #    requires:
    #    - images
    #    - integration-test-local
    #    filters:
    #      tags:
    #        only: /.*/
    - integration-test:
        name: test-module-rhel-7
        collection_method: module
        vm_type: rhel
        image_family: rhel-7
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    ## TODO(rc) enable rhel8 after kernels are supported in kernel-crawler
    #- integration-test:
    #    name: test-ebpf-rhel-8
    #    collection_method: ebpf 
    #    vm_type: rhel
    #    image_family: rhel-8
    #    requires:
    #    - images
    #    - integration-test-local
    #    filters:
    #      tags:
    #        only: /.*/
    #- integration-test:
    #    name: test-module-rhel-8
    #    collection_method: module
    #    vm_type: rhel
    #    image_family: rhel-8
    #    requires:
    #    - images
    #    - integration-test-local
    #    filters:
    #      tags:
    #        only: /.*/
    - integration-test:
        name: test-ebpf-ubuntu-1804-lts
        collection_method: ebpf
        vm_type: ubuntu-os
        image_family: ubuntu-1804-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-module-ubuntu-1804-lts
        collection_method: module
        vm_type: ubuntu-os
        image_family: ubuntu-1804-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    ## TODO(rc) Enable after fixing `Kernel panic - not syncing: softlockup: hung tasks`
    #- integration-test:
    #    name: test-ebpf-ubuntu-1904
    #    collection_method: ebpf
    #    vm_type: ubuntu-os
    #    image_family: ubuntu-1904
    #    requires:
    #    - images
    #    - integration-test-local
    #    filters:
    #      tags:
    #        only: /.*/
    - integration-test:
        name: test-module-ubuntu-1904
        collection_method: module
        vm_type: ubuntu-os
        image_family: ubuntu-1904
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/

    - integration-test-data:
       requires:
       - test-module-coreos-stable
       - test-ebpf-coreos-stable
       #- test-ebpf-cos-stable
       - test-ebpf-cos-69-lts
       - test-ebpf-cos-73-lts
       - test-module-rhel-7
       #- test-ebpf-rhel-7
       #- test-module-rhel-8
       #- test-ebpf-rhel-8
       - test-module-ubuntu-1804-lts
       - test-ebpf-ubuntu-1804-lts
       - test-module-ubuntu-1904
       #- test-ebpf-ubuntu-1904
       filters:
         tags:
           only: /.*/ 
