version: 2.1

commands:
  init:
    steps:
    - attach_workspace:
        at: ~/workspace
    - run:
        name: Set up environment
        command: |
          cat >>"$BASH_ENV" \<<-EOF
          	export WORKSPACE_ROOT="${HOME}/workspace"
          EOF
          [[ -f ~/workspace/shared-env ]] && cat ~/workspace/shared-env >>"$BASH_ENV"

  gcloud-init:
    steps:
    - run:
        name: Install and configure gcloud
        working_directory: ~/.config/gcloud
        command: |
          if [[ -z "$ROX_CI_IMAGE" ]]; then
            pip install -U crcmod google_compute_engine
          fi
          gcloud auth activate-service-account --key-file <(echo "$GOOGLE_CREDENTIALS_KERNEL_CACHE")
          gcloud auth list

  docker-login:
    steps:
    - run:
        name: Login to Docker Hub
        command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

jobs:
  init:
    docker:
    - image: circleci/golang:1.11.2-stretch
    working_directory: ~/workspace

    steps:
    - checkout:
        path: ~/workspace/go/src/github.com/stackrox/collector

    - run:
        name: Set up shared environment
        command: |
          cat >~/workspace/shared-env \<<-"EOF"
          	export GOPATH="${WORKSPACE_ROOT}/go"
          	export SOURCE_ROOT="${GOPATH}/src/github.com/stackrox/collector"
            export COLLECTOR_SOURCE_ROOT="${SOURCE_ROOT}/collector"
          	export PATH="${PATH}:${GOPATH}/bin:${WORKSPACE_ROOT}/bin"
          EOF

          COLLECTOR_VERSION="$(make -s -C ~/workspace/go/src/github.com/stackrox/collector/collector tag)"
          cat >>~/workspace/shared-env \<<-EOF
          	export COLLECTOR_VERSION="$COLLECTOR_VERSION"
          EOF

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector
        - shared-env

  builder:
    machine: true
    steps:
    - init
    - docker-login

    - run:
        name: Restore collector-builder cache image
        command: docker pull stackrox/collector-builder:cache || true

    - run:
        name: Build collector builder Docker image
        command: |
          docker build \
            --cache-from stackrox/collector-builder:cache \
            -t stackrox/collector-builder:cache "${SOURCE_ROOT}/builder"

    - run:
        name: Save collector-builder cache image
        command: |
          docker push stackrox/collector-builder:cache
          docker tag stackrox/collector-builder:cache "stackrox/collector-builder:circle-build-${CIRCLE_WORKFLOW_ID}"
          docker push "stackrox/collector-builder:circle-build-${CIRCLE_WORKFLOW_ID}"

  prepare-kernels:
    docker:
    - image: docker.io/stackrox/apollo-ci:collector-0.1.11-18-g3ecb0861c9
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASS
    environment:
      ROX_CI_IMAGE: "true"

    working_directory: ~/workspace

    steps:
    - init

    - run:
        name: Compile kobuild
        command: |
          mkdir bin
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
            go build -a -o "${WORKSPACE_ROOT}/bin/kobuild" \
            github.com/stackrox/collector/kernel-modules/build/kobuild

    - run:
        name: Prepare source
        command: |
          mkdir -p ~/kobuild-tmp/versions-src
          SYSDIG_DIR="${SOURCE_ROOT}/sysdig/src" \
              SCRATCH_DIR="${HOME}/scratch" \
              OUTPUT_DIR="${HOME}/kobuild-tmp/versions-src" \
            "${SOURCE_ROOT}/kernel-modules/build/prepare-src"

          versions=(~/kobuild-tmp/versions-src/*)
          [[ "${#versions[@]}" == 1 ]] || {
            echo >&2 "Expected a unique kernel module source version, got:"
            printf >&2 '- %s\n' "${versions[@]}"
            exit 1
          }

          version="$(basename "${versions[0]}")"
          MODULE_VERSION="${version%.tgz}"
          cat >>"${WORKSPACE_ROOT}/shared-env" \<<-EOF
          	export MODULE_VERSION="${MODULE_VERSION}"
          EOF
          cat >>"$BASH_ENV" \<<-EOF
          	export MODULE_VERSION="${MODULE_VERSION}"
          EOF

    - run:
        name: Prepare Kernel module build cache lookup
        command: |
          mkdir -p /tmp/cache
          echo "$MODULE_VERSION" >/tmp/cache/kernel-modules-version.txt

    - restore_cache:
        name: Restore Kernel module build cache
        keys:
          - kernel-module-cache-v1-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-{{ .Revision }}
          - kernel-module-cache-v1-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-
          - kernel-module-cache-v1-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-master-
          - kernel-module-cache-v1-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-

    - run:
        name: Copy cached modules to build output
        command: |
          [[ -d "/tmp/cache/kernel-modules/${MODULE_VERSION}/" ]] || exit 0
          mkdir -p "${WORKSPACE_ROOT}/ko-build/build-output/${MODULE_VERSION}"
          mv -v \
              "/tmp/cache/kernel-modules/${MODULE_VERSION}"/* \
              "${WORKSPACE_ROOT}/ko-build/build-output/${MODULE_VERSION}/" \
            || true

    - run:
        name: Compile list of cached modules
        command: |
          mkdir -p "${WORKSPACE_ROOT}/ko-build"
          cd "${WORKSPACE_ROOT}/ko-build"

          echo >build-tasks
          for i in ~/kobuild-tmp/versions-src/*.tgz; do
            filename="$(basename "$i")"
            version="${filename%.tgz}"
            mkdir -p "module-versions/${version}"
            tar -C "module-versions/${version}" -xvzf "$i"
            ( ls "${WORKSPACE_ROOT}/ko-build/build-output/${version}"/*.ko{,.gz} || true ) \
              | sed -ne 's@^.*/collector-\([^/]\{1,\}\)\.ko\(\.gz\)\{0,1\}$@\1@p' \
              >~/kobuild-tmp/existing-modules-"${version}"
          done

    - run:
        name: Generate list of all (source, kernel version) build combinations
        command: |
          cd "${WORKSPACE_ROOT}/ko-build"
          for i in module-versions/*/; do
            version="$(basename "$i")"
            "${WORKSPACE_ROOT}/bin/kobuild" \
              --config "${SOURCE_ROOT}/kernel-modules/supported-kernels/kernel-manifest.yml" \
              --kernel-versions-file ~/kobuild-tmp/existing-modules-"${version}" \
              --exclude \
              --output "{{.KernelVersion}} ${version}"
          done | sort | uniq >build-tasks

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build
          - bin
          - shared-env

  kernels:
    machine: true
    parallelism: 8
    environment:
    - BUILD_CONTAINER_TAG: stackrox/collector-builder:kobuilder-cache
    - BUILD_CONTAINER_CACHE_IMAGES: stackrox/collector-builder:kobuilder-cache

    steps:
    - init

    - run:
        name: Determine tasks for current shard
        command: |
          echo "Nodes total: $CIRCLE_NODE_TOTAL"
          echo "Node index:  $CIRCLE_NODE_INDEX"

          cd "${WORKSPACE_ROOT}/ko-build"
          num_tasks=$(wc -l <build-tasks)
          shard_size=$(((num_tasks - 1) / CIRCLE_NODE_TOTAL + 1))

          echo "Total number of tasks: ${num_tasks}"
          echo "Tasks per shard: ${shard_size}"

          mkdir -p ~/kobuild-tmp
          cd ~/kobuild-tmp
          split -d -l "$shard_size" "${WORKSPACE_ROOT}/ko-build/build-tasks" task-shard-

          this_shard_file=~/kobuild-tmp/task-shard-"$(printf '%02d' "$CIRCLE_NODE_INDEX")"
          if [[ ! -s "$this_shard_file" ]]; then
            echo "Nothing to be done for this shard."
            circleci step halt
            exit 0
          fi

          while read -a line || [[ "${#line[@]}" > 0 ]]; do
            module_version="${line[1]}"
            mkdir -p "${WORKSPACE_ROOT}/ko-build/build-output/${module_version}"
            mkdir -p ~/kobuild-tmp/build-versions/"${module_version}"
            kernel_version="${line[0]}"
            echo "$kernel_version" >>~/kobuild-tmp/kernel-versions-"${module_version}"
          done <"$this_shard_file"

          echo >~/kobuild-tmp/all-build-commands
          for i in "${WORKSPACE_ROOT}/ko-build/build-output"/*/; do
            module_version="$(basename "$i")"
            "${WORKSPACE_ROOT}/bin/kobuild" \
                --config "${SOURCE_ROOT}/kernel-modules/supported-kernels/kernel-manifest.yml" \
                --kernel-versions-file ~/kobuild-tmp/kernel-versions-"${module_version}" \
                --output 'SOURCE_VERSION="'"${module_version}"'" {{.BuildCommand "build-kos"}}' \
                \>> ~/kobuild-tmp/all-build-commands
          done

    - gcloud-init
    - run:
        name: Download required packages
        command: |
          cat ~/kobuild-tmp/kernel-versions-* | sort | uniq >~/kobuild-tmp/all-kernel-versions
          "${WORKSPACE_ROOT}/bin/kobuild" \
              --config "${SOURCE_ROOT}/kernel-modules/supported-kernels/kernel-manifest.yml" \
              --kernel-versions-file ~/kobuild-tmp/all-kernel-versions \
              --output '{{.PackageListURLEncoded}}' \
            | sort | uniq \
            | sed -e 's@^@gs://stackrox-kernel-headers-mirror/packages/@' \
              >~/kobuild-tmp/all-package-objects
          cat ~/kobuild-tmp/all-package-objects

          cat ~/kobuild-tmp/all-package-objects

          mkdir -p ~/kobuild-tmp/packages
          gsutil -m cp -I ~/kobuild-tmp/packages/ <~/kobuild-tmp/all-package-objects

    - docker-login

    - run:
        name: Restore builder cache image(s)
        command: docker pull $BUILD_CONTAINER_CACHE_IMAGES || true

    - run:
        name: Build builder image
        command: |
          make -C "${SOURCE_ROOT}/kernel-modules" build-container
          docker tag "$BUILD_CONTAINER_TAG" build-kernel-modules

    - run:
        name: Upload builder cache image
        command: |
          # [[ "$CIRCLE_BRANCH" == "master" ]] || exit 0
          (( CIRCLE_NODE_INDEX == 0 )) || exit 0
          docker push "$BUILD_CONTAINER_TAG"
        background: true

    - run:
        name: Build modules
        command: |
          docker run --rm -i \
            -v "${HOME}/kobuild-tmp/packages:/packages:ro" \
            -v "${WORKSPACE_ROOT}/ko-build/module-versions:/sources:ro" \
            -v "${WORKSPACE_ROOT}/ko-build/build-output:/output" \
            --tmpfs /scratch:exec \
            build-kernel-modules \
            sh - <~/kobuild-tmp/all-build-commands

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build/build-output
  grpc:
    docker:
    - image: ubuntu:trusty
    working_directory: /go/src/github.com/stackrox/collector

    steps:
    - checkout

    - run:
        name: Install dependencies
        command: |
          apt-get update -y
          apt-get install -y build-essential ca-certificates

    - restore_cache:
        key: grpc-cpp-plugin-v1-{{ checksum "build/scripts/install-grpc-cpp-plugin.sh" }}

    - run:
        name: Build grpc plugin
        command: |
          if [[ ! -x /usr/local/bin/grpc_cpp_plugin ]]; then
            make -C collector install-grpc
          fi

    - save_cache:
        key: grpc-cpp-plugin-v1-{{ checksum "build/scripts/install-grpc-cpp-plugin.sh" }}
        paths:
          - /usr/local/bin/grpc_cpp_plugin

    - persist_to_workspace:
        root: /usr/local
        paths:
          - bin/grpc_cpp_plugin

  libsinsp:
    machine: true
    working_directory: ~/workspace

    steps:
    - init
    - docker-login

    - run:
        name: Restore sysdig builder cache image
        command: docker pull stackrox/collector-builder:sysdig || true

    - run:
        name: Build libsinsp Wrapper
        command: make -C "${COLLECTOR_SOURCE_ROOT}" container/libs/libsinsp-wrapper.so

    - run:
        name: Sanity check
        command: |
          cd "${COLLECTOR_SOURCE_ROOT}"
          ls -lh container/libs
          file   container/libs/libsinsp-wrapper.so
          docker images | grep collector

    - run:
        name: Save sysdig builder cache image
        command: docker push stackrox/collector-builder:sysdig

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector/collector/container/libs

  collector:
    machine: true
    working_directory: ~/workspace

    steps:
    - init
    - docker-login

    - run:
        name: Restore collector-builder cache image
        command: docker pull "stackrox/collector-builder:circle-build-${CIRCLE_WORKFLOW_ID}"

    - run:
        name: Sanity Check
        command: |
          cd "${SOURCE_ROOT}"
          pwd
          echo '>>> Userspace lib:'
          ls -lh collector/container/libs
          file   collector/container/libs/libsinsp-wrapper.so
          echo '>>> Docker images:'
          docker images | grep collector
          echo '>>> gRPC plugin:'
          which grpc_cpp_plugin

    - run:
        name: Generate Protobuf Definitions
        command: make -C "$COLLECTOR_SOURCE_ROOT" generated-srcs

    - run:
        name: Build collector
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          mkdir -p container/bin
          docker run \
            -v "$PWD:/src:ro" \
            -v "$PWD/sysdig/src:/usr/local/sysdig:ro" \
            -v "$PWD/container/libs/libsinsp-wrapper.so:/usr/local/lib/libsinsp-wrapper.so:ro" \
            -v "$PWD/sysdig/src/driver/ppm_events_public.h:/usr/local/include/ppm_events_public.h:ro" \
            -v "$PWD/cmake-build:/build-output" \
            --name build "stackrox/collector-builder:circle-build-${CIRCLE_WORKFLOW_ID}"

    - run:
        name: Extract collector files
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          cp cmake-build/collector container/bin/
          ls -lh container/bin/

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector/collector/container/bin

  images:
    machine: true
    environment:
    - INSTALL_DIRECTORY: /tmp

    steps:
    - init
    - docker-login
    - gcloud-init

    - run:
        name: Copying Kernel modules build output
        command: |
          mkdir -p "${SOURCE_ROOT}/kernel-modules/container/kernel-modules"
          mv "${WORKSPACE_ROOT}/ko-build/build-output/${MODULE_VERSION}/"* \
            "${SOURCE_ROOT}/kernel-modules/container/kernel-modules" || true

    - run:
        name: Preparing Kernel modules build cache
        command: |
          mkdir -p "/tmp/cache/kernel-modules/${MODULE_VERSION}/"
          cp -rl "${SOURCE_ROOT}/kernel-modules/container/kernel-modules/." \
            "/tmp/cache/kernel-modules/${MODULE_VERSION}/"
          echo "$MODULE_VERSION" >/tmp/cache/kernel-modules-version.txt

    - save_cache:
        name: Saving Kernel module build cache
        key: kernel-module-cache-v1-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-{{ .Revision }}
        paths:
          - /tmp/cache/

    - run:
        name: Adding Kernel module version file
        command: |
          mkdir -p "${SOURCE_ROOT}/kernel-modules/container/kernel-modules"
          echo "$MODULE_VERSION" \
            >>"${SOURCE_ROOT}/kernel-modules/container/kernel-modules/MODULE_VERSION.txt"

    - run:
        name: Sanity check
        command: |
          cd "$SOURCE_ROOT"
          echo '>>> Collector Artifacts:'
          find collector/container
          echo '>>> Kernel Modules:'
          find kernel-modules/container

    - run:
        name: Build kernel-modules Docker image
        command: |
          cd "${SOURCE_ROOT}/kernel-modules/container"
          docker build \
            -t "stackrox/kernel-modules:${MODULE_VERSION}" \
            -t "stackrox/kernel-modules:snapshot-${COLLECTOR_VERSION}" \
            .

    - run:
        name: Build collector Docker image
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          cp NOTICE-collector.txt container/
          cp COPYING.txt container/
          docker build \
            -t "stackrox/collector:snapshot-${COLLECTOR_VERSION}" \
            -t "stackrox/collector:${COLLECTOR_VERSION}" \
            --build-arg base="$MODULE_VERSION" \
            container

    - run:
        name: Sanity check images
        command: |
          docker images | grep kernel | grep "$MODULE_VERSION"
          docker images | grep collector | grep "$COLLECTOR_VERSION"

    - run:
        name: Push images
        command: |
          if [[ $CIRCLE_BRANCH = master || -n $CIRCLE_TAG ]]; then
            echo Pushing release images
            docker push "stackrox/collector:${COLLECTOR_VERSION}"
            echo "Pushing kernel modules"
            docker push "stackrox/kernel-modules:${MODULE_VERSION}"
          else
            echo Pushing snapshot images
            docker push "stackrox/collector:snapshot-${COLLECTOR_VERSION}"
            echo "Pushing kernel modules"
            docker push "stackrox/kernel-modules:snapshot-${COLLECTOR_VERSION}"
          fi

    - run:
        name: Integration tests
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          go get -u github.com/jstemmer/go-junit-report
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          sudo mv /tmp/dep /usr/local/bin/dep
          export COLLECTOR_TAG="$COLLECTOR_VERSION"
          sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          make integration-tests integration-test-report

  upload-modules:
    docker:
    - image: docker.io/stackrox/apollo-ci:collector-0.1.11-18-g3ecb0861c9
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASS
    environment:
      ROX_CI_IMAGE: "true"

    working_directory: ~/workspace

    steps:
      - init
      - gcloud-init

      - run:
          name: Uploading Kernel modules
          command: |
            gsutil -m rsync -r \
              "${WORKSPACE_ROOT}/ko-build/build-output/${MODULE_VERSION}/" \
              "${COLLECTOR_MODULES_BUCKET}/${MODULE_VERSION}/"

      - run:
          name: Sanity check
          command:
            gsutil ls "${COLLECTOR_MODULES_BUCKET}/${MODULE_VERSION}/"

workflows:
  version: 2
  build:
    jobs:
    - init:
        filters:
          tags:
            only: /.*/
    - builder:
        requires:
        - init
        filters:
          tags:
            only: /.*/
    - grpc:
        filters:
          tags:
            only: /.*/
    - libsinsp:
        requires:
        - init
        filters:
          tags:
            only: /.*/
    - collector:
        requires:
        - builder
        - grpc
        - libsinsp
        filters:
          tags:
            only: /.*/
    - prepare-kernels:
        requires:
        - init
        filters:
          tags:
            only: /.*/
    - kernels:
        requires:
        - prepare-kernels
        filters:
          tags:
            only: /.*/
    - images:
        requires:
        - collector
        - kernels
        filters:
          tags:
            only: /.*/
    - upload-modules:
        requires:
          - kernels
        filters:
          tags:
            only: /.*/

