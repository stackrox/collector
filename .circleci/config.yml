version: 2.1
parameters:
  quay-repo:
    type: string
    default: "quay.io/rhacs-eng"
  dockerized-parallel:
    type: integer
    default: 8
  dockerized-cache-tag:
    type: string
    default: cache-v2
  kernel-bundles-staging:
    type: string
    default: ""
  default-machine-image:
    type: string
    # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
    default: ubuntu-2004:202111-02

defaultImage: &defaultImage
  docker:
  - image: "<< pipeline.parameters.quay-repo >>/apollo-ci:collector-0.3.35"
    auth:
      username: $QUAY_RHACS_ENG_RO_USERNAME
      password: $QUAY_RHACS_ENG_RO_PASSWORD
  working_directory: ~/workspace
  environment:
    ROX_CI_IMAGE: true

defaultMachine: &defaultMachine
  machine:
    image: << pipeline.parameters.default-machine-image >>

runOnAllTags: &runOnAllTags
  filters:
    tags:
      only: /.*/

runOnAllTagsWithDockerIOPullCtx: &runOnAllTagsWithDockerIOPullCtx
  <<: *runOnAllTags
  context:
    - docker-io-pull
    - quay-rhacs-eng-readonly

runOnAllTagsWithDockerIOPushCtx: &runOnAllTagsWithDockerIOPushCtx
  <<: *runOnAllTags
  context:
    - docker-io-push
    - quay-rhacs-eng-readwrite
    - quay-rhacs-eng-readonly
    - quay-stackrox-io-readwrite

runOnAllTagsWithIntegrationTestRequires: &runOnAllTagsWithIntegrationTestRequires
  <<: *runOnAllTags
  context:
    - docker-io-pull
    - quay-rhacs-eng-readonly
    - ubuntu-esm-subscription-token # Provides environment variable UBUNTU_ESM_SUBSCRIPTION_TOKEN.
    - redhat-developer-account-login
  requires:
  - images
  - ubi-image
  - integration-test-local
  - dockerized-build-collector

orbs:
  slack: circleci/slack@3.4.2
  ci-artifacts: stackrox/ci-artifacts-orb@0.1.1

commands:
  initcommand:
    steps:
    - attach_workspace:
        at: ~/workspace
    - run:
        name: Set up environment
        command: |
          cat >>"$BASH_ENV" \<<-EOF
            export WORKSPACE_ROOT="${HOME}/workspace"
          EOF
          [[ -f ~/workspace/shared-env ]] && cat ~/workspace/shared-env >>"$BASH_ENV"

  read-pr-metadata:
    steps:
    - run:
        name: Read PR metadata
        command: |
          "${SOURCE_ROOT}/.circleci/read-labels.sh" pr-metadata/labels

  gcloud-init:
    parameters:
      service-account-env:
        type: string
        default: GOOGLE_CREDENTIALS_CIRCLECI_COLLECTOR
      bucket-permission-check:
        type: string
        default: gs://collector-build-cache

    steps:
    - run:
        name: Install and configure gcloud
        working_directory: ~/.config/gcloud
        command: |
          "${CI_ROOT}/gcloud-init/install-and-configure-gcloud.sh"

    - run:
        name: Setup GCP env
        command: |
          "${CI_ROOT}/gcloud-init/setup-gcp-env.sh" "${<< parameters.service-account-env >>}" << parameters.bucket-permission-check >>

  docker-login-pull:
    steps:
    - run:
        name: Login to Docker Hub with pull credentials
        command: |
            docker login -u "$DOCKER_IO_PULL_USERNAME" -p "$DOCKER_IO_PULL_PASSWORD"

  docker-login-push:
    steps:
    - run:
        name: Login to Docker Hub with push credentials
        command: |
            docker login -u "$DOCKER_IO_PUSH_USERNAME" -p "$DOCKER_IO_PUSH_PASSWORD"

  quay-login:
    steps:
    - run:
        name: Login to Quay with pull credentials
        command: |
            docker login -u "$QUAY_RHACS_ENG_RO_USERNAME" -p "$QUAY_RHACS_ENG_RO_PASSWORD" quay.io

  quay-login-push:
    steps:
    - run:
        name: Login to Quay with push credentials
        command: |
            docker login -u "$QUAY_RHACS_ENG_RW_USERNAME" -p "$QUAY_RHACS_ENG_RW_PASSWORD" quay.io

  dockerized-pull-cache-image:
    steps:
    - run:
        name: Pull cache image
        command: |
          "${CI_ROOT}/dockerized-pull-cache-image/10-pull-cache-image.sh" "${COLLECTOR_DRIVERS_CACHE}" << pipeline.parameters.quay-repo >>

  dockerized-check-drivers-built:
    steps:
    - run:
        name: Check if job should run
        command: |
          if [[ ! -s ~/workspace/build-tasks ]]; then
            echo "Nothing was built, skipping this job"

            circleci step halt
            exit 0
          fi

  dockerized-should-run:
    steps:
    - run:
        name: Check if dockerized job should run
        command: |
          if [[ ! -f ~/workspace/pr-metadata/labels/run-dockerized-steps ]]; then
            echo "Skipping dockerized build jobs."
            circleci step halt
            exit 0
          fi

  stackrox-io-login:
    steps:
    - run:
        name: Docker login to collector.stackrox.io
        command: |
          docker login \
            -u "$STACKROX_IO_PUSH_USERNAME" \
            -p "$STACKROX_IO_PUSH_PASSWORD" \
            collector.stackrox.io

jobs:
  initjob:
    <<: *defaultImage
    environment:
    - SOURCE_ROOT: /home/circleci/workspace/go/src/github.com/stackrox/collector
    - CI_ROOT: /home/circleci/workspace/go/src/github.com/stackrox/collector/.circleci
    - SHARED_ENV: /home/circleci/workspace/shared-env 

    steps:
    - checkout:
        path: ~/workspace/go/src/github.com/stackrox/collector

    - add_ssh_keys:
        fingerprints:
        - "32:e2:6d:de:c3:bb:b8:a4:62:89:a1:df:7a:30:37:f2"

    - run:
        name: "Pull git submodule"
        command: |
          "${CI_ROOT}/initjob/10-pull-git-submodule.sh" "${SOURCE_ROOT}"

    - run:
        name: Set up shared environment
        command: |
          "${CI_ROOT}/initjob/20-set-up-shared-environment.sh" "${SHARED_ENV}"

    - read-pr-metadata

    - run:
        name: Set COLLECTOR_VERSION
        command: |
          "${CI_ROOT}/initjob/30-set-collector-version.sh" \
            "${SHARED_ENV}" \
            << pipeline.parameters.dockerized-cache-tag >> \
            "circle-build-${WORKFLOW_ID}" \
            "${CIRCLE_TAG}" \
            "${CIRCLE_BRANCH}" \
            "${SOURCE_ROOT}"

    - run:
        name: Set label environment variables
        command: |
          "${CI_ROOT}/initjob/40-set-label-environment-variables.sh" "${SHARED_ENV}"

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector
        - pr-metadata
        - shared-env

  lint:
    <<: *defaultImage
    steps:
    - initcommand
    - run:
        name: Lint via clang-format
        command: |
           make -C "${COLLECTOR_SOURCE_ROOT}" check

    - run:
        name: Lint via shfmt
        command: |
          go install mvdan.cc/sh/v3/cmd/shfmt@v3.4.1
          make -C "${SOURCE_ROOT}" shfmt-check

  test-scripts:
    <<: *defaultImage

    steps:
    - initcommand

    - run:
        name: Test get-builder-flavor
        command: |
          "${CI_ROOT}/test-scripts/get-builder-flavor/run-tests.sh" "${SOURCE_ROOT}"

    - run:
        name: shellcheck-all
        command: |
          wget -qO- "https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz" | tar -xJv
          sudo cp "shellcheck-stable/shellcheck" /usr/bin/
          make -C "${SOURCE_ROOT}" shellcheck-all

  builder:
    <<: *defaultMachine
    resource_class: large

    steps:
    - initcommand
    - docker-login-push

    - run:
        name: Restore collector-builder image
        command: |
          docker pull "stackrox/collector-builder:${COLLECTOR_BUILDER_TAG}" || docker pull stackrox/collector-builder:cache || true

    - run:
        name: Build collector-builder image
        command: |
          make -C "${SOURCE_ROOT}" builder

    - run:
        name: Save collector-builder image
        command: |
          "${CI_ROOT}/builder/save-collector-builder-image.sh" "${CIRCLE_BRANCH}"

  prepare-kernels:
    <<: *defaultImage

    steps:
    - initcommand

    - run:
        name: Prepare source
        command: |
          "${CI_ROOT}/prepare-kernels/10-prepare-source.sh"

    - run:
        name: Prepare legacy sources
        command: |
          "${CI_ROOT}/prepare-kernels/20-prepare-legacy-sources.sh" "${CIRCLE_TAG}" "${CIRCLE_BRANCH}"

    - run:
        name: Prepare Kernel module build cache lookup
        command: |
          "${CI_ROOT}/prepare-kernels/30-prepare-kernel-module-build-cache-lookup.sh"

    - restore_cache:
        name: Restore Kernel module build cache
        keys:
          - kernel-module-cache-v18-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-{{ .Revision }}
          - kernel-module-cache-v18-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-master-

    - run:
        name: Unpack module sources
        command: |
          "${CI_ROOT}/prepare-kernels/40-unpack-module-sources.sh"

    - run:
        name: Copy cached modules to build output
        command: |
          "${CI_ROOT}/prepare-kernels/50-copy-cached-modules-to-build-output.sh"

    - gcloud-init

    - run:
        name: Upload module sources
        command: |
          gsutil -m rsync -r ~/kobuild-tmp/versions-src/ "gs://stackrox-kernel-modules-source/collector/"

    - run:
        name: Download missing modules for CURRENT version from gcloud bucket
        command: |
          "${CI_ROOT}/prepare-kernels/60-download-missing-modules-for-current-version-from-gcloud-bucket.sh"

    - run:
        name: Patch module sources
        command: |
          "${CI_ROOT}/prepare-kernels/70-patch-module-sources.sh"

    - run:
        name: Compile list of cached modules for CURRENT module version
        command: |
          "${CI_ROOT}/prepare-kernels/80-compile-list-of-cached-modules-for-current-module-version.sh"

    - run:
        name: Compile list of existing modules for LEGACY module versions
        command: |
          "${CI_ROOT}/prepare-kernels/90-compile-list-of-existing-modules-for-legacy-module-versions.sh"

    - run:
        name: Generate list of all (source, kernel version) build combinations
        command: |
          "${CI_ROOT}/prepare-kernels/100-generate-list-of-all-build-combinations.sh"

    - run:
        name: Print list of all (source, kernel version) build combinations
        command: |
          "${CI_ROOT}/prepare-kernels/110-print-list-of-all-build-combinations.sh"

    - ci-artifacts/store:
        path: ~/kobuild-tmp
    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build
          - bin
          - shared-env

  kernels:
    <<: *defaultMachine
    parallelism: 8
    environment:
    - BUILD_CONTAINER_TAG: stackrox/collector-builder:kobuilder-cache
    - BUILD_CONTAINER_CACHE_IMAGES: stackrox/collector-builder:kobuilder-cache
    - KERNEL_BUNDLES_STAGING_BUCKET: "<< pipeline.parameters.kernel-bundles-staging >>"

    steps:
    - initcommand

    - run:
        name: Determine tasks for current shard
        command: |
          "${CI_ROOT}/kernels/10-determine-tasks-for-current-shard.sh" "${CIRCLE_NODE_TOTAL}" "${CIRCLE_NODE_INDEX}"

    - gcloud-init
    - run:
        name: Download required packages
        command: |
          "${CI_ROOT}/kernels/20-download-required-packages.sh" "${CIRCLE_TAG}" "${CIRCLE_BRANCH}" ~/kobuild-tmp

    - run:
        name: Determine versions requiring a custom builder flavor
        command: |
          "${CI_ROOT}/kernels/30-determine-versions-requiring-a-custom-builder-flavor.sh" ~/kobuild-tmp

    - run:
        name: Separate local build tasks by flavor
        command: |
          "${CI_ROOT}/kernels/40-separate-local-build-tasks-by-flavor.sh"

    - docker-login-push

    - run:
        name: Restore builder cache image(s)
        command: |
          make -C "${SOURCE_ROOT}/kernel-modules" pull-build-containers

    - run:
        name: Build builder image
        command: |
          "${CI_ROOT}/kernels/50-build-builder-image.sh"

    - run:
        name: Upload builder cache image
        command: |
          # [[ "$CIRCLE_BRANCH" == "master" ]] || exit 0
          (( CIRCLE_NODE_INDEX == 0 )) || exit 0
          make -C "${SOURCE_ROOT}/kernel-modules" push-build-containers
        background: true

    - run:
        name: Build modules
        command: |
          "${CI_ROOT}/kernels/60-build-modules.sh" "${CIRCLE_NODE_INDEX}"

    - run:
        name: Print built modules
        command: |
          "${CI_ROOT}/kernels/70-print-built-modules.sh" "${CIRCLE_NODE_INDEX}"

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build/build-output/shard-*
          - ko-build/build-output/FAILURES-*

  collector:
    <<: *defaultMachine
    resource_class: large
    environment:
      UNITTEST_OUTPUT_FILE: unittest_results.txt

    steps:
    - initcommand
    - read-pr-metadata
    - docker-login-push

    - run:
        name: Restore collector-builder image
        command: |
          "${CI_ROOT}/collector/10-restore-collector-builder-image.sh"

    - run:
        name: Build collector
        command: |
          "${CI_ROOT}/collector/20-build-collector.sh"

    - run:
        name: Run collector unit tests
        command: |
          "${CI_ROOT}/collector/30-run-collector-unit-tests.sh"

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector/collector/container/bin
        - go/src/github.com/stackrox/collector/collector/container/libs
        - go/src/github.com/stackrox/collector/collector/container/THIRD_PARTY_NOTICES

  images:
    <<: *defaultMachine
    environment:
    - INSTALL_DIRECTORY: /tmp
    - QUAY_REPO: << pipeline.parameters.quay-repo >>
    - DOCKER_REPO: "docker.io/stackrox"
    - PUBLIC_REPO: "quay.io/stackrox-io"

    steps:
    - initcommand
    - docker-login-push
    - quay-login-push
    - gcloud-init

    - run:
        name: Copying Kernel modules build output
        command: |
          "${CI_ROOT}/images/10-copying-kernel-modules-build-output.sh"

    - run:
        name: Copying Kernel modules from cache
        command: |
          "${CI_ROOT}/images/20-copying-kernel-modules-from-cache.sh"

    - run:
        name: Preparing Kernel modules build cache
        command: |
          "${CI_ROOT}/images/30-preparing-kernel-modules-build-cache.sh"

    - save_cache:
        name: Saving Kernel module build cache
        key: kernel-module-cache-v18-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-{{ .Revision }}
        paths:
          - /tmp/cache/

    - run:
        name: Adding Kernel module version and license files
        command: |
          "${CI_ROOT}/images/40-adding-kernel-module-version-and-license-files.sh"

    - run:
        name: Load any missing modules from GCloud
        command: |
          "${CI_ROOT}/images/50-load-any-missing-modules-from-gcloud.sh"

    - run:
        name: Sanity check
        command: |
          "${CI_ROOT}/images/60-sanity-check.sh"

    - run:
        name: Build collector slim and base images
        command: |
          "${CI_ROOT}/images/70-build-collector-slim-and-base-images.sh"

    - run:
        name: Build collector -latest images
        command: |
          "${CI_ROOT}/images/80-build-collector-latest-images.sh" "${CIRCLE_BRANCH}" "${CIRCLE_TAG}"

    - run:
        name: Sanity check images
        command: |
          "${CI_ROOT}/images/90-sanity-check-images.sh"

    - run:
        name: Push images
        command: |
          "${CI_ROOT}/images/100-push-images.sh"

  ubi-image:
    machine:
      image: << pipeline.parameters.default-machine-image >>
      docker_layer_caching: true
    resource_class: large
    environment:
    - QUAY_REPO: << pipeline.parameters.quay-repo >>
    - DOCKER_REPO: "docker.io/stackrox"

    steps:
    - initcommand
    - docker-login-push
    - quay-login-push
    - run:
        name: Lint Dockerfile
        command: |
          "${CI_ROOT}/ubi-images/10-lint-dockerfile.sh"

    - run:
        name: Build collector UBI images
        command: |
          "${CI_ROOT}/ubi-images/20-build-collector-ubi-images.sh"

    - run:
        name: Push collector UBI images
        command: |
          "${CI_ROOT}/ubi-images/30-push-collector-ubi-images.sh"

  kernel-module-build-failures-check:
    <<: *defaultImage

    steps:
      - initcommand

      - run:
          name: Save failures files
          command: |
            "${CI_ROOT}/kernel-module-build-failures-check/10-save-failures-files.sh"

      - run:
          name: Test for build failures
          command: |
            "${CI_ROOT}/kernel-module-build-failures-check/20-test-for-build-failures.sh"

      - ci-artifacts/store:
          path: /tmp/failures

      - slack/status:
          fail_only: true
          mentions: SGX5Y89KJ
          only_for_branches: master
          webhook: '${SLACK_WEBHOOK_KERNEL_PROBE_BUILD_FAILURE}'

  join-modules:
    <<: *defaultImage

    steps:
      - initcommand

      - run:
          name: Consolidate modules built by sharded jobs
          command: |
            "${CI_ROOT}/join-modules/10-consolidate-modules-built-by-sharded-jobs.sh"

      - persist_to_workspace:
          root: ~/workspace
          paths:
            - ko-build/built-probes/

  upload-modules:
    <<: *defaultImage

    steps:
      - initcommand
      - gcloud-init

      - run:
          name: Remove failures file and shard output dirs
          command: |
            "${CI_ROOT}/upload-modules/10-remove-failures-file-and-shard-output-dirs.sh"

      - run:
          name: Uploading Kernel modules
          command: |
            "${CI_ROOT}/upload-modules/20-uploading-kernel-modules.sh" "${CIRCLE_TAG}" "${CIRCLE_BRANCH}" "${CIRCLE_BUILD_NUM}"

      - run:
          name: Sanity check
          command: |
            "${CI_ROOT}/upload-modules/30-sanity-check.sh" "${CIRCLE_TAG}" "${CIRCLE_BRANCH}"


  dockerized-task-file:
    <<: *defaultMachine

    steps:
    - initcommand
    - dockerized-should-run
    - docker-login-pull
    - quay-login
    - dockerized-pull-cache-image

    - run:
        name: Create task files
        command: |
          GIT_REF="${CIRCLE_BRANCH}"
          if [[ -n "${CIRCLE_TAG}" ]]; then
            GIT_REF="${CIRCLE_TAG}"
          fi

          "${SOURCE_ROOT}/.circleci/dockerized-drivers/create-task-file.sh" \
            "<< pipeline.parameters.quay-repo >>" \
            "<< pipeline.parameters.dockerized-parallel >>" \
            "${CIRCLE_NODE_INDEX}" \
            "${GIT_REF}"

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - task-shard-*
          - build-tasks

  dockerized-build-drivers:
    <<: *defaultMachine
    parallelism: << pipeline.parameters.dockerized-parallel >>
    environment:
    - KERNEL_BUNDLES_STAGING_BUCKET: "<< pipeline.parameters.kernel-bundles-staging >>"

    steps:
    - initcommand
    - dockerized-should-run
    - dockerized-check-drivers-built

    - run:
        name: Check shard needs to run
        command: |
          if [[ ! -s "${WORKSPACE_ROOT}/task-shard-$(printf '%02d' "$CIRCLE_NODE_INDEX")" ]]; then
            echo "Nothing to be done for this shard."

            circleci step halt
            exit 0
          fi

    - gcloud-init
    - docker-login-pull
    - quay-login-push
    - dockerized-pull-cache-image

    - run:
        name: Download required bundles
        command: |
          echo "Nodes total: $CIRCLE_NODE_TOTAL"
          echo "Node index:  $CIRCLE_NODE_INDEX"

          ## Get the bundles for the running machine
          "${SOURCE_ROOT}/.circleci/kernels/20-download-required-packages.sh" \
            "${CIRCLE_TAG}" \
            "${CIRCLE_BRANCH}" \
            "${WORKSPACE_ROOT}/go/src/github.com/stackrox" \
            "${WORKSPACE_ROOT}/task-shard-$(printf '%02d' "$CIRCLE_NODE_INDEX")"

    - run:
        name: Build drivers
        command: |
          GIT_REF="${CIRCLE_BRANCH}"
          if [[ -n "${CIRCLE_TAG}" ]]; then
            GIT_REF="${CIRCLE_TAG}"
          fi

          "${SOURCE_ROOT}/.circleci/dockerized-drivers/build-drivers.sh" \
            "<< pipeline.parameters.quay-repo >>" \
            "${GIT_REF}" \
            "${CIRCLE_NODE_INDEX}"

  dockerized-unify-images:
    <<: *defaultMachine

    steps:
    - initcommand
    - dockerized-should-run
    - docker-login-pull
    - quay-login-push
    - dockerized-pull-cache-image

    - run:
        name: Unify images
        command: |
          "${SOURCE_ROOT}/.circleci/dockerized-drivers/unify-images.sh" \
            "<< pipeline.parameters.quay-repo >>" \
            "<< pipeline.parameters.dockerized-parallel >>"

  dockerized-check-failures:
    <<: *defaultMachine

    steps:
    - initcommand
    - dockerized-should-run
    - dockerized-check-drivers-built
    - quay-login

    - run:
        name: Test for build failures
        command: |
          "${SOURCE_ROOT}/.circleci/dockerized-drivers/check-failures.sh" \
            "<< pipeline.parameters.quay-repo >>"

    - store_artifacts:
        path: /tmp/dockerized-failures

  dockerized-build-collector:
    <<: *defaultMachine

    steps:
    - initcommand
    - dockerized-should-run
    - quay-login
    - docker-login-push

    - run:
        name: Build full collector image
        command: |
          "${SOURCE_ROOT}/.circleci/dockerized-drivers/build-full-collector.sh" \
            "docker.io/stackrox"

  integration-test-local:
    parameters:
      vm-config:
        type: string
        default: default
      use-ubi:
        type: boolean
        default: false

    <<: *defaultMachine
    working_directory: ~/workspace

    steps:
    - initcommand
    - docker-login-push
    - read-pr-metadata
    - gcloud-init

    - run:
        name: "Setup Env Vars Local"
        command: |
          "${CI_ROOT}/integration-test-local/10-setup-env-vars-local.sh" \
            "cirlce_local_"<< parameters.vm-config >> \
            << parameters.use-ubi >> \
            kernel_module

    - run:
        name: "Running integration tests"
        no_output_timeout: 45m
        command: |
          "${CI_ROOT}/run-integration-tests.sh" local "$CIRCLE_BRANCH" "$CIRCLE_BUILD_NUM"

    - run:
        name: "Check Valgrind errors"
        command: |
          "${CI_ROOT}/integration-test-local/20-check-valgrind-errors.sh"

    - run:
        name: "Resore core_dump file"
        command: |
          "${CI_ROOT}/integration-test-local/30-restore-core-dump-file.sh"
        when: always

    - store_test_results:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/integration-test-report.xml
    - ci-artifacts/store:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/integration-test-report.xml
        destination: "integration-test-report.xml"
    - ci-artifacts/store:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/container-logs
        destination: "container-logs"
    - ci-artifacts/store:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/perf.json
        destination: "kernel_module-circle_local_<< parameters.vm-config >>-perf.json"
    - ci-artifacts/store:
        path: /tmp/core.out

  integration-test:
    parameters:
      collection_method:
        type: enum
        enum: [module, ebpf]
      vm_type:
        type: enum
        enum: [cos, rhel, suse, suse-sap, ubuntu-os-pro, ubuntu-os, flatcar, fedora-coreos, garden-linux]
      image_family:
        type: enum
        enum: [
          cos-77-lts,
          cos-85-lts,
          cos-89-lts,
          cos-beta,
          cos-dev,
          cos-stable,
          fedora-coreos-stable,
          flatcar-stable,
          garden-linux,
          rhel-7,
          rhel-8,
          sles-12,
          sles-15,
          sles-15-sp2-sap,
          ubuntu-1804-lts,
          ubuntu-2004-lts,
          ubuntu-2110,
          ubuntu-pro-1804-lts
        ]
      image_name:
        type: string
        default: "unset"
      image_version:
        type: string
        default: ""
      offline:
        type: boolean
        default: false
      dockerized:
        type: boolean
        default: false
    <<: *defaultMachine
    working_directory: ~/workspace

    steps:
    - initcommand
    - docker-login-pull

    - run:
        name: Check whether to run job
        command: |
          if [[ -f "${WORKSPACE_ROOT}/pr-metadata/labels/skip-integration-tests" ]]; then
            echo "Skipping job with skip-integration-tests label."
            circleci step halt
            exit 0
          fi

          if [[ "<< parameters.dockerized >>" == "true" && ! -f "${WORKSPACE_ROOT}/pr-metadata/labels/run-dockerized-steps" ]]; then
            echo "Skipping dockerized build jobs."
            circleci step halt
            exit 0
          fi

    - add_ssh_keys
    - read-pr-metadata
    - gcloud-init

    - run:
        name: "Setup env vars"
        command: |
          "${CI_ROOT}/integration-test/20-setup-env-vars.sh" \
            "<< parameters.collection_method >>" \
            "<< parameters.vm_type >>" \
            "<< parameters.offline >>" \
            "<< parameters.image_family >>" \
            "<< parameters.image_name >>" \
            "<< parameters.dockerized >>" \
            "$CIRCLE_BUILD_NUM"

    - run:
        name: "Extract gcp ssh public key from environment variable"
        command: |
          "${CI_ROOT}/integration-test/30-extract-gcp-ssh-public-key-from-environment-variable.sh"

    - run:
        name: "Create VM"
        command: |
          "${CI_ROOT}/integration-test/40-create-vm.sh"

    - run:
        name: "Running integration tests"
        no_output_timeout: 45m
        command: |
          "${CI_ROOT}/run-integration-tests.sh" gcloud "$CIRCLE_BRANCH" "$CIRCLE_BUILD_NUM"

    - run:
        name: "Check Valgrind errors"
        command: |
          "${CI_ROOT}/integration-test/60-check-valgrind-errors.sh" "$SOURCE_ROOT" "$CI_ROOT"

    - run:
        name: "Get serial port output"
        command: |
          "${CI_ROOT}/integration-test/70-get-serial-port-output.sh" \
              "<< parameters.collection_method >>" \
              "<< parameters.vm_type >>" \
              "<< parameters.image_family >>" \
              "$WORKSPACE_ROOT" \
              "$CIRCLE_BUILD_NUM"
        when: always

    - store_test_results:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/integration-test-report.xml
    - ci-artifacts/store:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/integration-test-report.xml
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-integration-test-report.xml"
    - ci-artifacts/store:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/container-logs
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-container-logs"
    - ci-artifacts/store:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/perf.json
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-perf.json"
    - ci-artifacts/store:
        path: ~/workspace/serial-output
    - ci-artifacts/store:
        path: /tmp/core.out

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-perf.json"

    - run:
        name: "Destroy VM"
        command: |
          "${CI_ROOT}/integration-test/80-destroy-vm.sh"
        when: always

  integration-test-data:
    <<: *defaultImage

    steps:
    - initcommand
    - run:
        name: Check whether to run job
        command: |
          if [[ -f "${WORKSPACE_ROOT}/pr-metadata/labels/skip-integration-tests" ]]; then
            echo "Skipping job with skip-integration-tests label."
            circleci step halt
            exit 0
          fi

    - run:
        name: "Gather Perf Data"
        command: |
          "${CI_ROOT}/test-scripts/baseline/compare-and-update-baseline.sh"

    - run:
        name: Comment on PR
        command: |
          "${CI_ROOT}/integration-test-data/30-comment-on-pr.sh"

    - ci-artifacts/store:
        path: ~/workspace/all-perf.json
    - ci-artifacts/store:
        path: ~/workspace/benchmark.md
    - ci-artifacts/store:
        path: ~/workspace/benchmark.csv

  update-support-packages:
    <<: *defaultImage
    environment:
      - DOWNLOAD_BASE_URL: "https://install.stackrox.io"
      - RELATIVE_PATH: "collector/support-packages"
      - GCLOUD_BUCKET: "gs://sr-roxc"
      - PUBLIC_RELATIVE_PATH: "offline/v1/support-packages"
      - PUBLIC_GCLOUD_BUCKET: "gs://collector-support-public"

    steps:
      - initcommand
      - read-pr-metadata
      - run:
          name: Check whether to run job
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" && ! -f "${WORKSPACE_ROOT}/pr-metadata/labels/test-support-packages" ]]; then
              echo "On a PR without the test-support-packages label. Not building support packages."
              circleci step halt
            fi

      - setup_remote_docker:
          version: 20.10.11
      - stackrox-io-login
      - gcloud-init

      - run:
          name: Initialize environment
          command: |
            relative_path="$RELATIVE_PATH"
            if [[ "$CIRCLE_BRANCH" != "master" ]]; then
              relative_path="${relative_path}/.test-${CIRCLE_BUILD_NUM}"
            fi
            cci-export BASE_URL "${DOWNLOAD_BASE_URL}/${relative_path}"
            cci-export SUPPORT_PKG_SRC_ROOT "${SOURCE_ROOT}/kernel-modules/support-packages"
            cci-export LICENSE_FILE "${SOURCE_ROOT}/collector/LICENSE-kernel-modules.txt"
            cci-export GCLOUD_TARGET "${GCLOUD_BUCKET}/${relative_path}"
            cci-export PUBLIC_GCLOUD_TARGET "${PUBLIC_GCLOUD_BUCKET}/${PUBLIC_RELATIVE_PATH}"

      - run:
          name: Install Jinja2
          command: |
            pip install Jinja2

      - run:
          name: Generate collector -> rox version map
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/01-collector-to-rox-version-map.py" \
              "${SOURCE_ROOT}/RELEASED_VERSIONS" \
              /tmp/support-packages/metadata

      - run:
          name: Fetch collector metadata
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/02-fetch-collectors-metadata.sh" \
              /tmp/support-packages/metadata

      - run:
          name: Group by module version
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/03-group-by-module-version.sh" \
              /tmp/support-packages/metadata

      - run:
          name: Create support package files
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/04-create-support-packages.sh" \
              "${LICENSE_FILE}" /tmp/support-packages/metadata /tmp/support-packages/output

      - run:
          name: Create index file
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/05-create-index.py" \
              /tmp/support-packages/metadata /tmp/support-packages/output

      - run:
          name: Upload to GCloud
          command: |
            gsutil -m rsync -r /tmp/support-packages/output "$GCLOUD_TARGET"

      - run:
          name: Wait for 120 seconds
          command: |
            for i in {1..120}; do
              sleep 1
              echo -n .
            done
            echo

      - run:
          name: Delete old files
          command: |
            # Sanity check. If for some reason GCLOUD_TARGET is malformed, we risk deleting the
            # entire `sr-roxc` bucket (!!!). Hence have a hardcoded check for the path looking
            # valid.
            [[ "$GCLOUD_TARGET" =~ ^gs://[^/]+/.*collector.*/.*support-packages.*$ ]]
            # On non-master, additionally test that we have a .test indicator in the URL
            [[ "$CIRCLE_BRANCH" == "master" || "$GCLOUD_TARGET" = *.test* ]]
            gsutil -m rsync -n -r -d /tmp/support-packages/output "$GCLOUD_TARGET"

      - gcloud-init:
          service-account-env: GCP_SERVICE_ACCOUNT_CREDS
          bucket-permission-check: $PUBLIC_GCLOUD_BUCKET

      - run:
          name: Upload to Public GCloud Bucket if on master
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" ]]; then
              exit 0
            fi
            # Sync support packages
            gsutil -m rsync -r /tmp/support-packages/output "$PUBLIC_GCLOUD_TARGET"

            # Sleep for 120s
            for i in {1..120}; do
              sleep 1
              echo -n .
            done
            echo

            # Delete old files
            gsutil -m rsync -n -r -d /tmp/support-packages/output "$PUBLIC_GCLOUD_TARGET"

      - slack/status:
          fail_only: true
          mentions: SGX5Y89KJ
          only_for_branches: master
          webhook: '${SLACK_WEBHOOK_KERNEL_PROBE_BUILD_FAILURE}'

  reload-released-images:
    <<: *defaultMachine
    environment:
    - INSTALL_DIRECTORY: /tmp
    - RELOAD_MD_DIRECTORY: /tmp/reload/collectors
    - DOCKER_BUILDKIT: 1
    - QUAY_REPO: << pipeline.parameters.quay-repo >>
    - DOCKER_REPO: "docker.io/stackrox"
    working_directory: ~/workspace

    steps:
    - initcommand

    - run:
        name: Check if reload job should run
        command: |
          shopt -s nullglob
          mod_build_dir="${WORKSPACE_ROOT}/ko-build/build-output"

          if [[ ( "$CIRCLE_BRANCH" != "master" && ! -f "${WORKSPACE_ROOT}/pr-metadata/labels/reload-released-images" ) \
             || ( "$CIRCLE_BRANCH" == "master" && -z "$( find "${mod_build_dir}" -type f -name '*.gz' )" ) ]]; then
            echo "Not reloading released images"
            circleci step halt
            exit 0
          fi

    - run:
        name: Copy kernel objects
        command: |
           "${CI_ROOT}/reload-released-images/20-copy-kernel-objects.sh"

    - docker-login-push
    - quay-login-push
    - stackrox-io-login
    - gcloud-init

    - run:
        name: Determine collector versions that need reload
        command: |
          "${CI_ROOT}/reload-released-images/30-determine-collector-versions-that-need-reload.sh" \
            "${SOURCE_ROOT}" \
            "${RELOAD_MD_DIRECTORY}" \
            "${DOCKER_REPO}" \
            "${COLLECTOR_MODULES_BUCKET}"

    - ci-artifacts/store:
        path: /tmp/reload/collectors

    - run:
        name: Sync module versions
        command: |
          "${CI_ROOT}/reload-released-images/40-sync-module-versions.sh" "${SOURCE_ROOT}" "${COLLECTOR_MODULES_BUCKET}"

    - run:
        name: Reload collector images
        command: |
          "${CI_ROOT}/reload-released-images/50-reload-collector-images.sh" \
            "${RELOAD_MD_DIRECTORY}" \
            "${MAX_LAYER_MB}" \
            "${DOCKER_REPO}" \
            "${QUAY_REPO}" \
            "${BUILD_USE_VALGRIND}" \
            "${SANITIZER_TESTS}" \
            "${CIRCLE_BRANCH}" \
            "${CIRCLE_TAG}"

    - slack/status:
        fail_only: true
        mentions: SGX5Y89KJ
        only_for_branches: master
        webhook: '${SLACK_WEBHOOK_KERNEL_PROBE_BUILD_FAILURE}'

workflows:
  version: 2
  build:
    jobs:
    - initjob:
        <<: *runOnAllTagsWithDockerIOPullCtx
    - lint:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - initjob
    - test-scripts:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - initjob
    - builder:
        <<: *runOnAllTagsWithDockerIOPushCtx
        requires:
        - lint
    - collector:
        <<: *runOnAllTagsWithDockerIOPushCtx
        requires:
        - builder
    - dockerized-task-file:
        <<: *runOnAllTags
        context:
          - docker-io-pull
          - quay-rhacs-eng-readonly
          - redhat-developer-account-login
        requires:
        - lint
    - dockerized-build-drivers:
        <<: *runOnAllTags
        context:
          - docker-io-pull
          - quay-rhacs-eng-readwrite
          - redhat-developer-account-login
        requires:
        - dockerized-task-file
    - dockerized-unify-images:
        <<: *runOnAllTags
        context:
          - docker-io-pull
          - quay-rhacs-eng-readwrite
        requires:
          - dockerized-build-drivers
    - dockerized-check-failures:
        <<: *runOnAllTags
        context:
          - quay-rhacs-eng-readonly
        requires:
          - dockerized-unify-images
    - dockerized-build-collector:
        <<: *runOnAllTags
        context:
          - docker-io-push
          - quay-rhacs-eng-readonly
        requires:
          - dockerized-unify-images
          - images
    - prepare-kernels:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - lint
    - kernels:
        <<: *runOnAllTagsWithDockerIOPushCtx
        requires:
        - prepare-kernels
    - join-modules:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - kernels
    - upload-modules:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - join-modules
    - kernel-module-build-failures-check:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - kernels
    - images:
        <<: *runOnAllTagsWithDockerIOPushCtx
        requires:
        - collector
        - kernels
        - join-modules
    - ubi-image:
        <<: *runOnAllTags
        context:
          - docker-io-push
          - quay-rhacs-eng-readwrite
          - redhat-developer-account-login
        requires:
        - initjob
    - integration-test-local:
        <<: *runOnAllTagsWithDockerIOPushCtx
        name: integration-test-local
        vm-config: rhel
        requires:
        - images
        - upload-modules
    - integration-test-local:
        <<: *runOnAllTagsWithDockerIOPushCtx
        name: integration-test-local-ubi
        vm-config: rhel
        use-ubi: true
        requires:
        - ubi-image
        - upload-modules
    - integration-test:
        <<: *runOnAllTagsWithIntegrationTestRequires
        name: test-ebpf-<< matrix.image_family >><<# matrix.dockerized >>-dockerized<</ matrix.dockerized >>
        vm_type: cos
        collection_method: ebpf
        matrix:
          parameters:
            image_family: [cos-stable, cos-beta, cos-dev, cos-85-lts, cos-89-lts]
            dockerized: [false, true]
    - integration-test:
        <<: *runOnAllTagsWithIntegrationTestRequires
        name: test-<< matrix.collection_method >>-<< matrix.image_family >><<# matrix.dockerized >>-dockerized<</ matrix.dockerized >>
        vm_type: rhel
        matrix:
          parameters:
            image_family: [rhel-7, rhel-8]
            collection_method: [module, ebpf]
            dockerized: [false, true]
    - integration-test:
        <<: *runOnAllTagsWithIntegrationTestRequires
        name: test-<< matrix.collection_method >>-<< matrix.image_family >><<# matrix.dockerized >>-dockerized<</ matrix.dockerized >>
        vm_type: ubuntu-os
        matrix:
          parameters:
            image_family: [ubuntu-1804-lts, ubuntu-2004-lts, ubuntu-2110]
            collection_method: [module, ebpf]
            dockerized: [false, true]
          exclude:
            # Failing due to GLIC 2.33 not available on ubi 8
            - image_family: ubuntu-2110
              collection_method: module
              dockerized: true
    - integration-test:
        <<: *runOnAllTagsWithIntegrationTestRequires
        name: test-<< matrix.collection_method >>-<< matrix.image_family >><<# matrix.dockerized >>-dockerized<</ matrix.dockerized >>
        vm_type: ubuntu-os-pro
        matrix:
          parameters:
            image_family: [ubuntu-pro-1804-lts]
            collection_method: [module, ebpf]
            dockerized: [false, true]
    - integration-test:
        <<: *runOnAllTagsWithIntegrationTestRequires
        name: test-<< matrix.collection_method >>-<< matrix.image_family >><<# matrix.dockerized >>-dockerized<</ matrix.dockerized >>
        vm_type: suse
        matrix:
          parameters:
            image_family: [sles-12, sles-15]
            collection_method: [module, ebpf]
            dockerized: [false, true]
          exclude:
            - image_family: sles-12
              collection_method: ebpf
              dockerized: false
            - image_family: sles-12
              collection_method: ebpf
              dockerized: true
    # Removed while solving ROX-9180
    # - integration-test:
    #     <<: *runOnAllTagsWithIntegrationTestRequires
    #     name: test-<< matrix.collection_method >>-sles-15-sp2-sap<<# matrix.dockerized >>-dockerized<</ matrix.dockerized >>
    #     vm_type: suse-sap
    #     image_family: sles-15-sp2-sap
    #     matrix:
    #       parameters:
    #         collection_method: [module, ebpf]
    #         dockerized: [false, true]
    - integration-test:
        <<: *runOnAllTagsWithIntegrationTestRequires
        name: test-<< matrix.collection_method >>-flatcar-stable<<# matrix.dockerized >>-dockerized<</ matrix.dockerized >>
        vm_type: flatcar
        image_family: flatcar-stable
        matrix:
          parameters:
            collection_method: [module, ebpf]
            dockerized: [false, true]
          exclude:
            # Failing due to GLIC 2.33 not available on ubi 8
            - collection_method: module
              dockerized: true
    - integration-test:
        <<: *runOnAllTagsWithIntegrationTestRequires
        name: test-<< matrix.collection_method >>-fedora-coreos-stable<<# matrix.dockerized >>-dockerized<</ matrix.dockerized >>
        image_family: fedora-coreos-stable
        vm_type: fedora-coreos
        matrix:
          parameters:
            collection_method: [module, ebpf]
            dockerized: [false, true]
          exclude:
            # Failing due to GLIC 2.33 not available on ubi 8
            - collection_method: module
              dockerized: true
    - integration-test:
        <<: *runOnAllTagsWithIntegrationTestRequires
        name: test-<< matrix.collection_method >>-garden-linux<<# matrix.dockerized >>-dockerized<</ matrix.dockerized >>
        image_family: garden-linux
        image_name: gardenlinux-gcp-cloud-gardener--prod-<< matrix.image_version >>
        vm_type: garden-linux
        matrix:
          parameters:
            collection_method: [module, ebpf]
            dockerized: [false, true]
            image_version: [576-7-7d3c7d]
          exclude:
            # Failing due to dockerized module not being built (requires gcc-10).
            - collection_method: module
              dockerized: true
              image_version: 576-7-7d3c7d
    - integration-test-data:
        <<: *runOnAllTagsWithDockerIOPullCtx
        requires:
        - test-ebpf-cos-stable
        - test-ebpf-cos-beta
        - test-ebpf-cos-dev
        - test-ebpf-cos-85-lts
        - test-ebpf-cos-89-lts
        - test-module-rhel-7
        - test-ebpf-rhel-7
        - test-module-rhel-8
        - test-ebpf-rhel-8
        - test-module-ubuntu-1804-lts
        - test-ebpf-ubuntu-1804-lts
        - test-module-ubuntu-2004-lts
        - test-ebpf-ubuntu-2004-lts
        - test-module-ubuntu-2110
        - test-ebpf-ubuntu-2110
        - test-ebpf-sles-15
        - test-module-sles-15
        - test-module-sles-12
        # Removed while solving ROX-9180
        # - test-ebpf-sles-15-sp2-sap
        # - test-module-sles-15-sp2-sap
        - test-ebpf-flatcar-stable
        - test-module-flatcar-stable
        - test-ebpf-fedora-coreos-stable
        - test-module-fedora-coreos-stable
        - test-ebpf-garden-linux
        - test-module-garden-linux
        - test-module-ubuntu-pro-1804-lts
        - test-ebpf-ubuntu-pro-1804-lts
    - reload-released-images:
        <<: *runOnAllTags
        context:
          - docker-io-and-stackrox-io-push
          - quay-rhacs-eng-readonly
          - quay-rhacs-eng-readwrite
          - collector-support
        requires:
          - upload-modules
