version: 2.1

orbs:
  slack: circleci/slack@3.4.2

setupGCP: &setupGCP
  run:
    name: Setup GCP env
    command: |
      which gcloud
      which gsutil
      gsutil ver
      gsutil ver -l | grep crcmod
      gcloud version
      cat ~/.boto || true
      echo '[Credentials]' >~/.boto
      echo 'gs_service_key_file = /tmp/gcp.json' >>~/.boto
      echo $GOOGLE_CREDENTIALS_CIRCLECI_COLLECTOR > /tmp/gcp.json
      gcloud auth activate-service-account --key-file /tmp/gcp.json
      gcloud config set project stackrox-ci
      gcloud config set compute/region us-central1
      gcloud config unset compute/zone
      gcloud config set core/disable_prompts True
      gcloud auth list
      gsutil ls gs://collector-build-cache/ || echo "ERROR: Could not ls bucket"

commands:
  initcommand:
    steps:
    - attach_workspace:
        at: ~/workspace
    - run:
        name: Set up environment
        command: |
          cat >>"$BASH_ENV" \<<-EOF
            export WORKSPACE_ROOT="${HOME}/workspace"
          EOF
          [[ -f ~/workspace/shared-env ]] && cat ~/workspace/shared-env >>"$BASH_ENV"

  gcloud-init:
    steps:
    - run:
        name: Install and configure gcloud
        working_directory: ~/.config/gcloud
        command: |
          if [[ -z "$ROX_CI_IMAGE" ]]; then
            pip install --upgrade pip
            pip install wheel
            pip install -U crcmod google_compute_engine
            pip install -U gcloud gsutil
          fi
          sudo chown circleci:circleci /opt
          gcloud components install gsutil -q
          gcloud components update -q

    - *setupGCP

  docker-login:
    steps:
    - run:
        name: Login to Docker Hub
        command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"

  update-go:
    steps:
    - run:
        name: "Update Go"
        command: |
          GO_VERSION="1.13.3"
          sudo rm -r /usr/local/go/
          wget "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm "go${GO_VERSION}.linux-amd64.tar.gz"
          go version

  set-python-version:
    steps:
    - run:
        name: "Set python version to 3.5.9"
        command: pyenv global 3.5.9

jobs:
  initjob:
    docker:
    - image: docker.io/stackrox/apollo-ci:collector-0.2.12
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASS

    environment:
      ROX_CI_IMAGE: "true"

    working_directory: ~/workspace

    steps:
    - checkout:
        path: ~/workspace/go/src/github.com/stackrox/collector

    - add_ssh_keys:
        fingerprints:
        - "32:e2:6d:de:c3:bb:b8:a4:62:89:a1:df:7a:30:37:f2"

    - run:
        name: "Pull git submodule"
        command: |
          git -C ~/workspace/go/src/github.com/stackrox/collector submodule update --init

    - run:
        name: Set up shared environment
        command: |
          cat >~/workspace/shared-env \<<-"EOF"
            export GOPATH="${WORKSPACE_ROOT}/go"
            export SOURCE_ROOT="${GOPATH}/src/github.com/stackrox/collector"
            export COLLECTOR_SOURCE_ROOT="${SOURCE_ROOT}/collector"
            export PATH="${PATH}:${GOPATH}/bin:${WORKSPACE_ROOT}/bin"
          EOF

    - run:
        name: Read PR metadata
        command: |
          ~/workspace/go/src/github.com/stackrox/collector/.circleci/read-labels.sh pr-metadata/labels

    - run:
        name: Set COLLECTOR_VERSION
        command: |
          COLLECTOR_VERSION="$(make -s -C ~/workspace/go/src/github.com/stackrox/collector tag)"

          COLLECTOR_TAG="${COLLECTOR_VERSION}"
          GCLOUD_SSH_FINGERPRINT="$(echo ${GCLOUD_SSH_KEY_PUB} | awk '{print $2}' | base64 -d | md5sum | awk '{print $1}')"
          GCP_SSH_KEY_FILE="${HOME}/.ssh/id_rsa_${GCLOUD_SSH_FINGERPRINT}"

          cat >>~/workspace/shared-env \<<-EOF
            export COLLECTOR_VERSION="${COLLECTOR_VERSION}"
            export COLLECTOR_TAG="${COLLECTOR_TAG}"
            export GCP_SSH_KEY_FILE="${GCP_SSH_KEY_FILE}"
          EOF

          if [[ -z "$CIRCLE_TAG" && "$CIRCLE_BRANCH" != "master" && ! -f pr-metadata/labels/build-builder-image ]]; then
          cat >>~/workspace/shared-env \<<-EOF
            export COLLECTOR_BUILDER_TAG="cache"
          EOF
          else
          cat >>~/workspace/shared-env \<<-EOF
            export COLLECTOR_BUILDER_TAG="circle-build-${CIRCLE_WORKFLOW_ID}"
            export BUILD_BUILDER_IMAGE=true
          EOF
          fi
          cat ~/workspace/shared-env

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector
        - pr-metadata
        - shared-env

  builder:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    steps:
    - initcommand
    - docker-login

    - run:
        name: Restore collector-builder image
        command: docker pull "stackrox/collector-builder:${COLLECTOR_BUILDER_TAG}" || docker pull stackrox/collector-builder:cache || true

    - run:
        name: Build collector-builder image
        command: make -C "${SOURCE_ROOT}" builder

    - run:
        name: Save collector-builder image
        command: |
          docker push "stackrox/collector-builder:${COLLECTOR_BUILDER_TAG}"
          if [[ "$CIRCLE_BRANCH" == "master" ]]; then
            docker tag "stackrox/collector-builder:${COLLECTOR_BUILDER_TAG}" stackrox/collector-builder:cache
            docker push stackrox/collector-builder:cache
          fi

  builder-rhel:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    steps:
    - initcommand
    - docker-login

    - run:
        name: Restore collector-builder rhel image
        command: docker pull "stackrox/collector-builder:rhel-${COLLECTOR_BUILDER_TAG}" || docker pull stackrox/collector-builder:rhel-cache || true

    - run:
        name: Build collector-builder rhel image
        command: make -C "${SOURCE_ROOT}" builder-rhel

    - run:
        name: Save collector-builder rhel image
        command: |
          docker push "stackrox/collector-builder:rhel-${COLLECTOR_BUILDER_TAG}"
          if [[ "$CIRCLE_BRANCH" == "master" ]]; then
            docker tag "stackrox/collector-builder:rhel-${COLLECTOR_BUILDER_TAG}" stackrox/collector-builder:rhel-cache
            docker push stackrox/collector-builder:rhel-cache
          fi


  prepare-kernels:
    docker:
    - image: docker.io/stackrox/apollo-ci:collector-0.2.12
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASS
    environment:
      ROX_CI_IMAGE: "true"

    working_directory: ~/workspace

    steps:
    - initcommand

    - run:
        name: Install patch utility
        command: |
          sudo apt-get install patch

    - run:
        name: Prepare source
        command: |
          mkdir -p ~/kobuild-tmp/versions-src
          SYSDIG_DIR="${SOURCE_ROOT}/sysdig/src" \
              SCRATCH_DIR="${HOME}/scratch" \
              OUTPUT_DIR="${HOME}/kobuild-tmp/versions-src" \
            "${SOURCE_ROOT}/kernel-modules/build/prepare-src"

          versions=(~/kobuild-tmp/versions-src/*)
          [[ "${#versions[@]}" == 1 ]] || {
            echo >&2 "Expected a unique kernel module source version, got:"
            printf >&2 '- %s\n' "${versions[@]}"
            exit 1
          }

          version="$(basename "${versions[0]}" .tgz)"
          MODULE_VERSION="$version"

          cat >>"${WORKSPACE_ROOT}/shared-env" \<<-EOF
            export MODULE_VERSION="${MODULE_VERSION}"
          EOF
          cat >>"$BASH_ENV" \<<-EOF
            export MODULE_VERSION="${MODULE_VERSION}"
          EOF
          echo "Building modules for module version $version"

    - run:
        name: Prepare legacy sources
        command: |
          cd "$SOURCE_ROOT"
          if [[ ! -f RELEASED_VERSIONS ]]; then
            echo "RELEASED_VERSIONS file does not exist!"
            exit 1
          fi

          # get fingerprint from github
          GH_KEY="$(ssh-keyscan github.com 2> /dev/null)"
          GH_FINGERPRINT="$(echo ${GH_KEY} | ssh-keygen -lf - | cut -d" " -f2)"
          # Verify from: https://help.github.com/en/articles/githubs-ssh-key-fingerprints
          GH_FINGERPRINT_VERIFY="SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8"
          [[ "${GH_FINGERPRINT}" == "${GH_FINGERPRINT_VERIFY}" ]] || {
            echo >&2 "Unexpected SSH key fingerprint for github.com : ${GH_FINGERPRINT} != ${GH_FINGERPRINT_VERIFY}"
            exit 1
          }
          mkdir -p ~/.ssh
          echo "${GH_KEY}" > ~/.ssh/known_hosts

          LEGACY_DIR="/tmp/old-sysdig"
          SYSDIG_REL_DIR="sysdig/src"
          git clone git@github.com:stackrox/collector "${LEGACY_DIR}"

          mkdir -p "${WORKSPACE_ROOT}/ko-build"

          # These directories contain a bi-directional mapping from collector to module version.
          # The file structure allows using shell globbing without having to resort to `read` loops
          # etc.
          mkdir -p "${WORKSPACE_ROOT}/ko-build/"{released-collectors,released-modules}

          while IFS='' read -r line || [[ -n "$line" ]]; do
            [[ -n "$line" ]] || continue

            collector_ref="$line"
            echo "Preparing module source archive for collector version ${collector_ref}"

            git -C "${LEGACY_DIR}" submodule deinit "${SYSDIG_REL_DIR}"
            git -C "${LEGACY_DIR}" clean -xdf
            git -C "${LEGACY_DIR}" checkout "${collector_ref}"
            git -C "${LEGACY_DIR}" submodule update --init

            mod_ver_file="${WORKSPACE_ROOT}/ko-build/released-collectors/${collector_ref}"
            SYSDIG_DIR="${LEGACY_DIR}/${SYSDIG_REL_DIR}" \
                SCRATCH_DIR="${HOME}/scratch" \
                OUTPUT_DIR="${HOME}/kobuild-tmp/versions-src" \
              ./kernel-modules/build/prepare-src | tail -n 1 \
                >"${mod_ver_file}"

            # If not building legacy probe version {module_version}, remove source 'kobuild-tmp/versions-src/{module_version}.tgz'
            # and do not add the collector version to 'ko-build/released-modules/{module_version}'.
            if [[ -z "$CIRCLE_TAG" && "$CIRCLE_BRANCH" != "master" && ! -f "${WORKSPACE_ROOT}/pr-metadata/labels/build-legacy-probes" ]]; then
                version="$(< "${mod_ver_file}")"
                [[ "$version" != "$MODULE_VERSION" ]] || continue
                echo "Not building probes for legacy version ${version}"
                rm "${HOME}/kobuild-tmp/versions-src/${version}.tgz"
            else
                echo "${collector_ref}" >> "${WORKSPACE_ROOT}/ko-build/released-modules/$(< "${mod_ver_file}")"
            fi

          done < <(grep -v '^#' <RELEASED_VERSIONS | awk '{print $1}' | sort | uniq)

          rm -rf "${LEGACY_DIR}"

          shopt -s nullglob
          for i in "${WORKSPACE_ROOT}/ko-build/released-modules"/* ; do
            version="$(basename $i .tgz)"
            [[ "$version" != "$MODULE_VERSION" ]] || continue
            echo "Building modules for legacy module version $version"
          done

    - run:
        name: Prepare Kernel module build cache lookup
        command: |
          mkdir -p /tmp/cache
          if [[ -f pr-metadata/labels/no-cache ]]; then
            echo >/tmp/cache/kernel-modules-version.txt
          else
            echo "$MODULE_VERSION" >/tmp/cache/kernel-modules-version.txt
          fi

    - restore_cache:
        name: Restore Kernel module build cache
        keys:
          - kernel-module-cache-v14-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-{{ .Revision }}
          - kernel-module-cache-v14-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-
          - kernel-module-cache-v14-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-master-

    - run:
        name: Unpack module sources
        command: |
          mkdir -p "${WORKSPACE_ROOT}/ko-build"
          cd "${WORKSPACE_ROOT}/ko-build"

          echo >build-tasks
          mkdir build-output

          for i in ~/kobuild-tmp/versions-src/*.tgz; do
            version="$(basename "$i" .tgz)"
            mkdir -p "module-versions/${version}"
            tar -C "module-versions/${version}" -xvzf "$i"
            mkdir -p "build-output/${MODULE_VERSION}"
          done

    - run:
        name: Copy cached modules to build output
        command: |
          [[ -d "/tmp/cache/kernel-modules/${MODULE_VERSION}/" ]] || exit 0
          mkdir -p "${WORKSPACE_ROOT}/ko-build/cached-probes/${MODULE_VERSION}"
          mv -v \
              "/tmp/cache/kernel-modules/${MODULE_VERSION}"/* \
              "${WORKSPACE_ROOT}/ko-build/cached-probes/${MODULE_VERSION}/" \
            || true

    - gcloud-init

    - run:
        name: Upload module sources
        command: |
          gsutil -m rsync -r ~/kobuild-tmp/versions-src/ "gs://stackrox-kernel-modules-source/collector/"

    - run:
        name: Download missing modules for current version from gcloud bucket
        command: |
          mkdir -p "${WORKSPACE_ROOT}/ko-build/cached-probes/${MODULE_VERSION}"
          gsutil -m rsync -r \
            "${COLLECTOR_MODULES_BUCKET}/${MODULE_VERSION}/" \
            "${WORKSPACE_ROOT}/ko-build/cached-probes/${MODULE_VERSION}/" \
            || true

    - run:
        name: Patch module sources
        command: |
          cd "${WORKSPACE_ROOT}/ko-build/module-versions"
          for version in *; do
            [[ -f "${SOURCE_ROOT}/kernel-modules/patches/${version}.patch" ]] || continue
            echo "Applying patch for module version ${version} ..."
            patch -p1 -d "$version" <"${SOURCE_ROOT}/kernel-modules/patches/${version}.patch"
          done

    - run:
        name: Compile list of cached modules for CURRENT module version
        command: |
          ( ls -a "${WORKSPACE_ROOT}/ko-build/cached-probes/${MODULE_VERSION}"/ || true ) \
            | "${SOURCE_ROOT}/kernel-modules/build/extract-kernel-versions-from-module-files" \
            >~/kobuild-tmp/existing-modules-"${MODULE_VERSION}"

    - run:
        name: Compile list of existing modules for LEGACY module versions
        command: |
          for i in "${WORKSPACE_ROOT}/ko-build/module-versions"/*/; do
            version="$(basename "$i")"
            [[ "$version" != "$MODULE_VERSION" ]] || continue
            if [[ -f pr-metadata/labels/no-cache ]] ; then
                echo >~/kobuild-tmp/existing-modules-"${version}"
                echo "Skipping GCS cache for version ${version}:"
                continue
            fi
            ( gsutil ls "${COLLECTOR_MODULES_BUCKET}/${version}/" || true)  \
              | "${SOURCE_ROOT}/kernel-modules/build/extract-kernel-versions-from-module-files" \
                >~/kobuild-tmp/existing-modules-"${version}"

            echo "Existing modules for version ${version}:"
            cat ~/kobuild-tmp/existing-modules-"${version}"
            echo
          done

    - run:
        name: Generate list of all (source, kernel version) build combinations
        command: |
          # all-build-tasks will contain all potentially possible build tasks, i.e., the cross
          # product between the set of kernel versions and the set of module versions
          echo >~/kobuild-tmp/all-build-tasks

          # redundant-build-tasks will contain all build tasks for which we already have the resulting
          # module.
          echo >~/kobuild-tmp/redundant-build-tasks

          cd "${WORKSPACE_ROOT}/ko-build"
          echo >~/kobuild-tmp/all-module-versions

          for i in module-versions/*/; do
            version="$(basename "$i")"
            echo "$version" >>~/kobuild-tmp/all-module-versions

            awk -v modver="$version" '{print $1 " " modver " mod"}' <"${SOURCE_ROOT}/kernel-modules/KERNEL_VERSIONS" >>~/kobuild-tmp/all-build-tasks
            if [[ -d "${i}/bpf" ]]; then
              awk -v modver="$version" '{print $1 " " modver " bpf"}' <"${SOURCE_ROOT}/kernel-modules/KERNEL_VERSIONS" >>~/kobuild-tmp/all-build-tasks
            fi
            awk -v modver="$version" '{print $1 " " modver " " $2}' <~/kobuild-tmp/existing-modules-"${version}" >>~/kobuild-tmp/redundant-build-tasks
          done

          # blocklisted-build-tasks is populated from the BLOCKLIST file to exclude build tasks which would fail.
          "${SOURCE_ROOT}/kernel-modules/build/apply-blocklist.py" "${SOURCE_ROOT}/kernel-modules/BLOCKLIST" \
            ~/kobuild-tmp/all-build-tasks >~/kobuild-tmp/non-blocklisted-build-tasks

          # Create the set of build tasks as the contents of `all-build-tasks` minus the redundant and blocklisted
          # build tasks.
          cat ~/kobuild-tmp/non-blocklisted-build-tasks \
              ~/kobuild-tmp/redundant-build-tasks ~/kobuild-tmp/redundant-build-tasks \
            | sort | uniq -u >build-tasks

    - run:
        name: Print list of all (source, kernel version) build combinations
        command: |
          cd "${WORKSPACE_ROOT}/ko-build"

          num_build_tasks="$(wc -l build-tasks | awk '{print $1}')"
          echo "Building kernel modules for the following kernel/module version/probe type combinations:"
          sed -e 's@^@  @' <build-tasks
          echo "Total: ${num_build_tasks} kernel/module version/probe type combinations."

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build
          - bin
          - shared-env

  kernels:
    machine:
      image: ubuntu-1604:202004-01
    parallelism: 8
    environment:
    - BUILD_CONTAINER_TAG: stackrox/collector-builder:kobuilder-cache
    - BUILD_CONTAINER_CACHE_IMAGES: stackrox/collector-builder:kobuilder-cache

    steps:
    - initcommand

    - run:
        name: Determine tasks for current shard
        command: |
          echo "Nodes total: $CIRCLE_NODE_TOTAL"
          echo "Node index:  $CIRCLE_NODE_INDEX"

          cd "${WORKSPACE_ROOT}/ko-build"
          num_tasks=$(wc -l <build-tasks)
          shard_size=$(((num_tasks - 1) / CIRCLE_NODE_TOTAL + 1))

          echo "Total number of tasks: ${num_tasks}"
          echo "Tasks per shard: ${shard_size}"

          mkdir -p ~/kobuild-tmp
          cd ~/kobuild-tmp
          split -d -l "$shard_size" "${WORKSPACE_ROOT}/ko-build/build-tasks" task-shard-

          this_shard_file=~/kobuild-tmp/task-shard-"$(printf '%02d' "$CIRCLE_NODE_INDEX")"

          if [[ ! -s "$this_shard_file" ]]; then
            echo "Nothing to be done for this shard."
            circleci step halt
            exit 0
          fi

          mv "$this_shard_file" ~/kobuild-tmp/local-build-tasks

          num_build_tasks="$(wc -l ~/kobuild-tmp/local-build-tasks | awk '{print $1}')"
          echo "Building kernel modules for the following kernel/module version/probe type combinations:"
          sed -e 's@^@  @' <~/kobuild-tmp/local-build-tasks
          echo "Total: ${num_build_tasks} kernel/module version/probe type combinations."

          awk '{print $1}' <~/kobuild-tmp/local-build-tasks | sort | uniq >~/kobuild-tmp/all-kernel-versions
          awk '{print $2}' <~/kobuild-tmp/local-build-tasks | sort | uniq >~/kobuild-tmp/all-module-versions

          cd "${WORKSPACE_ROOT}/ko-build/build-output"
          xargs <~/kobuild-tmp/all-module-versions mkdir -p

    - gcloud-init
    - run:
        name: Download required packages
        command: |
          mkdir -p ~/kobuild-tmp/bundles

          awk -v bucket="$KERNEL_BUNDLES_BUCKET" '{print bucket "/bundle-" $1 ".tgz"}' <~/kobuild-tmp/all-kernel-versions \
            | gsutil -m cp -I ~/kobuild-tmp/bundles/

          ls ~/kobuild-tmp/bundles/

    - run:
        name: Determine versions requiring a custom builder flavor
        command: |
          mkdir -p ~/kobuild-tmp/custom-flavors
          make --quiet -C "${SOURCE_ROOT}/kernel-modules" print-custom-flavors >~/kobuild-tmp/custom-flavors/all
          mkdir ~/kobuild-tmp/meta-inspect
          for bundle_file in ~/kobuild-tmp/bundles/bundle-*.tgz; do
            version="$(basename "$bundle_file" | sed -E 's/^bundle-(.*)\.tgz$/\1/')"
            tar -xzf "${bundle_file}" -C ~/kobuild-tmp/meta-inspect ./BUNDLE_DISTRO ./BUNDLE_VERSION
            distro="$(< ~/kobuild-tmp/meta-inspect/BUNDLE_DISTRO)"
            kernel_version="$(< ~/kobuild-tmp/meta-inspect/BUNDLE_VERSION)"
            if grep -q "$distro" <~/kobuild-tmp/custom-flavors/all; then
              echo "$version" >>~/kobuild-tmp/custom-flavors/versions."$distro"
              echo "Building kernel version $version with custom builder flavor $distro"
            elif (( kernel_version >= 5 )); then
              echo "$version" >>~/kobuild-tmp/custom-flavors/versions.modern
              echo "Building kernel version $version with modern builder"
            fi
          done

    - run:
        name: Separate local build tasks by flavor
        command: |
          # Handle the case that glob doesn't match anything
          shopt -s nullglob

          for f in ~/kobuild-tmp/custom-flavors/versions.*; do
            flavor="$(basename "$f")"
            flavor="${flavor#versions\.}"
            join -1 1 -2 1 -o'1.1,1.2,1.3' <(sort -k 1b,1 <~/kobuild-tmp/local-build-tasks) <(sort -k 1b,1 <"$f") >~/kobuild-tmp/local-build-tasks."$flavor"
          done
          cat ~/kobuild-tmp/local-build-tasks.* ~/kobuild-tmp/local-build-tasks | sort | uniq -u >~/kobuild-tmp/local-build-tasks.default
          rm ~/kobuild-tmp/local-build-tasks

    - docker-login

    - run:
        name: Restore builder cache image(s)
        command: docker pull $BUILD_CONTAINER_CACHE_IMAGES || true

    - run:
        name: Build builder image
        command: |
          make -C "${SOURCE_ROOT}/kernel-modules" build-container
          docker tag "$BUILD_CONTAINER_TAG" build-kernel-modules-default

          shopt -s nullglob

          for f in ~/kobuild-tmp/custom-flavors/versions.*; do
            flavor="$(basename "$f")"
            flavor="${flavor#versions\.}"
            make -C "${SOURCE_ROOT}/kernel-modules" "build-container-${flavor}"
            docker tag "${BUILD_CONTAINER_TAG}-${flavor}" "build-kernel-modules-${flavor}"
          done

    - run:
        name: Upload builder cache image
        command: |
          # [[ "$CIRCLE_BRANCH" == "master" ]] || exit 0
          (( CIRCLE_NODE_INDEX == 0 )) || exit 0
          docker push "$BUILD_CONTAINER_TAG"
        background: true

    - run:
        name: Build modules
        command: |
          shopt -s nullglob

          shard_output_dir="${WORKSPACE_ROOT}/ko-build/build-output/shard-${CIRCLE_NODE_INDEX}"
          mkdir "${shard_output_dir}"
          for task_file in ~/kobuild-tmp/local-build-tasks.*; do
            [[ -s "$task_file" ]] || continue
            flavor="$(basename "${task_file}")"
            flavor="${flavor#local-build-tasks\.}"
            echo "Building kernel modules with flavor $flavor"

            docker run --rm -i \
              -v "${HOME}/kobuild-tmp/bundles:/bundles:ro" \
              -v "${WORKSPACE_ROOT}/ko-build/module-versions:/sources:ro" \
              -v "${shard_output_dir}:/output" \
              --tmpfs /scratch:exec \
              "build-kernel-modules-${flavor}" \
              build-kos <"$task_file"
          done
          sudo chown -R "$(id -u):$(id -g)" "$shard_output_dir"
          find "${shard_output_dir}/FAILURES" -type d -empty -depth -exec rmdir {} \;
          [[ ! -d "${shard_output_dir}/FAILURES" ]] \
            || mv "${shard_output_dir}/FAILURES" "${shard_output_dir}/../FAILURES-${CIRCLE_NODE_INDEX}"

    - run:
        name: Print built modules
        command: |
          shard_output_dir="${WORKSPACE_ROOT}/ko-build/build-output/shard-${CIRCLE_NODE_INDEX}"
          for i in "${WORKSPACE_ROOT}/ko-build/module-versions"/*/; do
            version="$(basename "$i")"
            if [[ -d "${shard_output_dir}/$version" ]]; then
              find "${shard_output_dir}/${version}" -type f -ls
            fi
          done

    - persist_to_workspace:
        root: ~/workspace
        paths:
          - ko-build/build-output/shard-*
          - ko-build/build-output/FAILURES-*

  collector:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large

    steps:
    - initcommand
    - docker-login

    - run:
        name: Restore collector-builder image
        command: docker pull "stackrox/collector-builder:${COLLECTOR_BUILDER_TAG}"

    - run:
        name: Build collector
        command: make -C "${SOURCE_ROOT}" collector

    - run:
        name: Run collector unit tests
        command: make -C "${SOURCE_ROOT}" unittest

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector/collector/container/bin
        - go/src/github.com/stackrox/collector/collector/container/libs

  collector-rhel:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large

    steps:
    - initcommand
    - docker-login

    - run:
        name: Restore collector-builder rhel image
        command: docker pull "stackrox/collector-builder:rhel-${COLLECTOR_BUILDER_TAG}"

    - run:
        name: Build rhel collector
        command: make -C "${SOURCE_ROOT}" collector-rhel

    - run:
        name: Run RHEL collector unit tests
        command: make -C "${SOURCE_ROOT}" unittest-rhel

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - go/src/github.com/stackrox/collector/collector/container/bin
        - go/src/github.com/stackrox/collector/collector/container/libs

  images:
    machine:
      image: ubuntu-1604:202004-01
    environment:
    - INSTALL_DIRECTORY: /tmp
    - GCLOUD_DSOP_BUCKET: "gs://dsop-artifacts.stackrox.io"

    steps:
    - initcommand
    - docker-login
    - gcloud-init

    - run:
        name: Copying Kernel modules build output
        command: |
          mkdir -p "${SOURCE_ROOT}/kernel-modules/container/kernel-modules"
          mv "${WORKSPACE_ROOT}/ko-build/built-probes/${MODULE_VERSION}/"* \
            "${SOURCE_ROOT}/kernel-modules/container/kernel-modules" || true
          rm -f "${SOURCE_ROOT}/kernel-modules/container/kernel-modules/".*.unavail || true

          ls "${SOURCE_ROOT}/kernel-modules/container/kernel-modules"

    - run:
        name: Copying Kernel modules from cache
        command: |
          cp -n "${WORKSPACE_ROOT}/ko-build/cached-probes/${MODULE_VERSION}"/* \
            "${SOURCE_ROOT}/kernel-modules/container/kernel-modules" || true
          rm -f "${SOURCE_ROOT}/kernel-modules/container/kernel-modules/".*.unavail || true

          ls "${SOURCE_ROOT}/kernel-modules/container/kernel-modules"

    - run:
        name: Preparing Kernel modules build cache
        command: |
          mkdir -p "/tmp/cache/kernel-modules/${MODULE_VERSION}/"
          cp -rl "${SOURCE_ROOT}/kernel-modules/container/kernel-modules/." \
            "/tmp/cache/kernel-modules/${MODULE_VERSION}/"
          echo "$MODULE_VERSION" >/tmp/cache/kernel-modules-version.txt

    - save_cache:
        name: Saving Kernel module build cache
        key: kernel-module-cache-v14-{{ checksum "/tmp/cache/kernel-modules-version.txt" }}-{{ .Branch }}-{{ .Revision }}
        paths:
          - /tmp/cache/

    - run:
        name: Adding Kernel module version file
        command: |
          mkdir -p "${SOURCE_ROOT}/kernel-modules/container/kernel-modules"
          echo "$MODULE_VERSION" \
            >>"${SOURCE_ROOT}/kernel-modules/container/kernel-modules/MODULE_VERSION.txt"

    - run:
        name: Load any missing modules from GCloud
        command: |
          gsutil -m cp -n \
              "${COLLECTOR_MODULES_BUCKET}/${MODULE_VERSION}/*.gz" \
              "${SOURCE_ROOT}/kernel-modules/container/kernel-modules"

    - run:
        name: Sanity check
        command: |
          cd "$SOURCE_ROOT"
          echo '>>> Collector Artifacts:'
          find collector/container
          echo '>>> Kernel Modules:'
          find kernel-modules/container

    - run:
        name: Build kernel-modules archive
        command: |
          if [[ "$CIRCLE_BRANCH" != "master" && -z "$CIRCLE_TAG" && ! -f "${WORKSPACE_ROOT}/pr-metadata/labels/build-full-images" ]]; then
            echo "Not building kernel module archive"
            exit 0
          fi
          cd "${SOURCE_ROOT}/kernel-modules/container"
          tar czf "${MODULE_VERSION}.tar.gz" -C ./kernel-modules .
          rm -rf ./kernel-modules

    - run:
        name: Build collector images
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          cp NOTICE-collector.txt container/
          cp COPYING.txt container/

          build_args=(
            --build-arg module_version="$MODULE_VERSION"
            --build-arg collector_version="$COLLECTOR_VERSION"
          )

          docker build \
            -t "stackrox/collector:${COLLECTOR_VERSION}-base" \
            -t "stackrox/collector:${COLLECTOR_VERSION}-slim" \
            "${build_args[@]}" \
            container

          # On PR branches, only build slim images
          if [[ "$CIRCLE_BRANCH" != "master" && -z "$CIRCLE_TAG" && ! -f "${WORKSPACE_ROOT}/pr-metadata/labels/build-full-images" ]]; then
            echo "Not building full images, re-tagging base images..."
            docker tag "stackrox/collector:${COLLECTOR_VERSION}-base" "stackrox/collector:${COLLECTOR_VERSION}"
            docker tag "stackrox/collector:${COLLECTOR_VERSION}-base" "stackrox/collector:${COLLECTOR_VERSION}-latest"
          else
            docker build \
              -t "stackrox/collector:${COLLECTOR_VERSION}" \
              -t "stackrox/collector:${COLLECTOR_VERSION}-latest" \
              "${build_args[@]}" \
              "${SOURCE_ROOT}/kernel-modules/container"
          fi

    - run:
        name: Build collector rhel images
        command: |
          cd "$COLLECTOR_SOURCE_ROOT"
          cp NOTICE-collector.txt container/
          cp COPYING.txt container/

          MODULE_ARCHIVE="${SOURCE_ROOT}/kernel-modules/container/${MODULE_VERSION}.tar.gz"
          if [[ "$CIRCLE_BRANCH" != "master" && -z "$CIRCLE_TAG" && ! -f "${WORKSPACE_ROOT}/pr-metadata/labels/build-full-images" ]]; then
            MODULE_ARCHIVE="-"
            echo "Not building full rhel images."
          fi

          ./container/rhel/create-bundle.sh \
            "$SOURCE_ROOT/collector/container" \
            "${MODULE_ARCHIVE}" \
            "$SOURCE_ROOT/collector/container/rhel/bundle.tar.gz"

          build_args=(
            --build-arg module_version="$MODULE_VERSION"
            --build-arg collector_version="$COLLECTOR_VERSION"
          )

          docker build \
            -t "stackrox/collector-rhel:${COLLECTOR_VERSION}-base" \
            -t "stackrox/collector-rhel:${COLLECTOR_VERSION}" \
            -t "stackrox/collector-rhel:${COLLECTOR_VERSION}-latest" \
            "${build_args[@]}" \
            -f container/rhel/Dockerfile \
            container/rhel

          mv "$SOURCE_ROOT/collector/container/rhel/bundle.tar.gz" "$SOURCE_ROOT/collector/container/rhel/latest-bundle.tar.gz"

    - run:
        name: Build slim collector rhel images
        command: |

          cd "$COLLECTOR_SOURCE_ROOT"
          MODULE_ARCHIVE="-" # Not including any kernel probes

          ./container/rhel/create-bundle.sh \
            "$SOURCE_ROOT/collector/container" \
            "${MODULE_ARCHIVE}" \
            "$SOURCE_ROOT/collector/container/rhel/bundle.tar.gz"

          build_args=(
            --build-arg module_version="$MODULE_VERSION"
            --build-arg collector_version="$COLLECTOR_VERSION"
          )

          docker build \
            -t "stackrox/collector-rhel:${COLLECTOR_VERSION}-slim" \
            "${build_args[@]}" \
            -f container/rhel/Dockerfile \
            container/rhel

          mv "$SOURCE_ROOT/collector/container/rhel/bundle.tar.gz" "$SOURCE_ROOT/collector/container/rhel/slim-bundle.tar.gz"

    - run:
        name: Sanity check images
        command: |
          docker images | grep collector | grep "${COLLECTOR_VERSION}"
          docker images | grep collector | grep "${COLLECTOR_VERSION}-slim"

    - run:
        name: Push images
        command: |
          echo "Pushing collector base image"
          docker push "stackrox/collector:${COLLECTOR_VERSION}-base"
          echo "Pushing collector image"
          docker push "stackrox/collector:${COLLECTOR_VERSION}"
          echo "Pushing collector latest image"
          docker push "stackrox/collector:${COLLECTOR_VERSION}-latest"
          echo "Pushing collector slim image"
          docker push "stackrox/collector:${COLLECTOR_VERSION}-slim"

          echo "Pushing collector rhel base image"
          docker push "stackrox/collector-rhel:${COLLECTOR_VERSION}-base"
          echo "Pushing collector rhel image"
          docker push "stackrox/collector-rhel:${COLLECTOR_VERSION}"
          echo "Pushing collector rhel latest image"
          docker push "stackrox/collector-rhel:${COLLECTOR_VERSION}-latest"
          echo "Pushing collector rhel slim image"
          docker push "stackrox/collector-rhel:${COLLECTOR_VERSION}-slim"

    - run:
        name: Upload collector image RHEL DSOP bundles on release
        command: |
          if [[ -n "$CIRCLE_TAG" ]]; then
            gsutil cp "${SOURCE_ROOT}/collector/container/rhel/latest-bundle.tar.gz" \
              "${GCLOUD_DSOP_BUCKET}/collector-rhel/${COLLECTOR_VERSION}-latest/bundle.tar.gz"
            gsutil cp "${SOURCE_ROOT}/collector/container/rhel/slim-bundle.tar.gz" \
              "${GCLOUD_DSOP_BUCKET}/collector-rhel/${COLLECTOR_VERSION}-slim/bundle.tar.gz"
          fi

  kernel-module-build-failures-check:
    docker:
      - image: docker.io/stackrox/apollo-ci:collector-0.2.12
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    environment:
      ROX_CI_IMAGE: "true"

    working_directory: ~/workspace

    steps:
      - initcommand

      - run:
          name: Save failures files
          command: |
            mkdir /tmp/failures
            cp -r "${WORKSPACE_ROOT}/ko-build/build-output/FAILURES"-*/. /tmp/failures || true

      - run:
          name: Test for build failures
          command: |
            shopt -s nullglob
            cd /tmp/failures
            failure_files=(*/*/*.log)

            for failure_file in "${failure_files[@]}"; do
              if [[ "$failure_file" =~ ^([^/]+)/([^/]+)/([^/]+)\.log$ ]]; then
                kernel_version="${BASH_REMATCH[1]}"
                module_version="${BASH_REMATCH[2]}"
                probe_type="${BASH_REMATCH[3]}"
                echo >&2 "============================================================================"
                echo >&2 "Failed to build ${probe_type} probe"
                echo >&2 "Module version: ${module_version}"
                echo >&2 "Kernel version: ${kernel_version}"
                echo >&2
                cat >&2 "$failure_file"
                echo >&2
                echo >&2
              fi
            done

            [[ "${#failure_files[@]}" == 0 ]]

      - store_artifacts:
          path: /tmp/failures

      - slack/status:
          fail_only: true
          mentions: SGX5Y89KJ
          only_for_branches: master
          webhook: '${SLACK_WEBHOOK_KERNEL_PROBE_BUILD_FAILURE}'

  join-modules:
    docker:
    - image: docker.io/stackrox/apollo-ci:collector-0.2.12
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASS
    environment:
      ROX_CI_IMAGE: "true"

    working_directory: ~/workspace

    steps:
      - initcommand

      - run:
          name: Consolidate modules built by sharded jobs
          command: |
            shard_dirs=("${WORKSPACE_ROOT}/ko-build/build-output/shard-"*)
            if [[ "{#shard_dirs[@]}" == 0 ]]; then
              exit 0
            fi
            for shard_dir in "${shard_dirs[@]}"; do
              for version_dir in "${WORKSPACE_ROOT}/ko-build/module-versions"/*/; do
                version="$(basename "$version_dir")"
                out_dir="${WORKSPACE_ROOT}/ko-build/built-probes/$version/"
                mkdir -p "$out_dir"
                mv "$shard_dir/$version"/*.gz "$out_dir" || true
              done
            done

      - persist_to_workspace:
          root: ~/workspace
          paths:
            - ko-build/built-probes/

  upload-modules:
    docker:
    - image: docker.io/stackrox/apollo-ci:collector-0.2.12
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASS
    environment:
      ROX_CI_IMAGE: "true"

    working_directory: ~/workspace

    steps:
      - initcommand
      - gcloud-init

      - run:
          name: Remove failures file and shard output dirs
          command: |
            rm -rf "${WORKSPACE_ROOT}/ko-build/build-output/FAILURES"-* 2>/dev/null || true
            rm -rf "${WORKSPACE_ROOT}/ko-build/build-output/shard"-* 2>/dev/null || true

      - run:
          name: Uploading Kernel modules
          command: |
            extra_args=()
            target="${COLLECTOR_MODULES_BUCKET}"
            if [[ "$CIRCLE_BRANCH" != "master" && -z "$CIRCLE_TAG" ]]; then
              target="gs://stackrox-collector-modules-staging/pr-builds/${CIRCLE_BRANCH}/${CIRCLE_BUILD_NUM}"
            fi

            shopt -s nullglob
            for probes_dir in "${WORKSPACE_ROOT}/ko-build/built-probes"/*; do
              files=("${probes_dir}"/*.gz)
              [[ "${#files[@]}" > 0 ]] || continue
              gsutil -m cp -n "${probes_dir}/*.gz" "${target}/$(basename "$probes_dir")/"
            done

            if [[ "$CIRCLE_BRANCH" == "master" || -n "$CIRCLE_TAG" ]]; then
              # On PR/master builds, additionally upload modules from cache
              for probes_dir in "${WORKSPACE_ROOT}/ko-build/cached-probes"/*; do
                files=("${probes_dir}"/*.gz)
                [[ "${#files[@]}" > 0 ]] || continue
                gsutil -m cp -n "${probes_dir}/*.gz" "${target}/$(basename "$probes_dir")/"
              done
            fi

      - run:
          name: Sanity check
          command: |
            if [[ "$CIRCLE_BRANCH" != "master" && -z "$CIRCLE_TAG" ]]; then
              exit 0
            fi
            gsutil ls "${COLLECTOR_MODULES_BUCKET}/${MODULE_VERSION}/"


  integration-test-local:
    parameters:
      vm-config:
        type: string
        default: default
      use-rhel:
        type: boolean
        default: false

    machine:
      image: ubuntu-1604:202004-01
    working_directory: ~/workspace

    steps:
    - initcommand
    - docker-login
    - gcloud-init
    - update-go

    - run:
        name: "Running integration tests"
        no_output_timeout: 45m
        command: |
          export REMOTE_HOST_TYPE=local
          export COLLECTION_METHOD=kernel_module
          export VM_CONFIG="circle_local_<< parameters.vm-config >>"
          export COLLECTOR_REPO="stackrox/collector<<# parameters.use-rhel>>-rhel<</ parameters.use-rhel>>"
          export COLLECTOR_IMAGE="${COLLECTOR_REPO}:${COLLECTOR_TAG}"
          make -C "${SOURCE_ROOT}" integration-tests-missing-proc-scrape integration-tests integration-tests-report
          [[ -z "$CIRCLE_BRANCH" ]] || gsutil cp ~/workspace/go/src/github.com/stackrox/collector/integration-tests/integration-test-report.xml "gs://stackrox-ci-results/circleci/collector/${CIRCLE_BRANCH}/$(date +%Y-%m-%d)-${CIRCLE_BUILD_NUM}/"

    - store_test_results:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/integration-test-report.xml
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/integration-test-report.xml
        destination: "integration-test-report.xml"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/container-logs
        destination: "container-logs"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/perf.json
        destination: "kernel_module-circle_local_<< parameters.vm-config >>-perf.json"

  integration-test:
    parameters:
      collection_method:
        type: enum
        enum: [module, ebpf]
      vm_type:
        type: enum
        enum: [coreos, cos, rhel, ubuntu-os]
      image_family:
        type: enum
        enum: [coreos-stable, cos-stable, cos-85-lts, cos-77-lts, cos-81-lts, rhel-7, rhel-8, ubuntu-1604-lts, ubuntu-1804-lts, ubuntu-2004-lts]
    machine:
      image: ubuntu-1604:202004-01

    working_directory: ~/workspace

    steps:
    - initcommand
    - add_ssh_keys
    - docker-login
    - set-python-version
    - gcloud-init
    - update-go

    - run:
        name: "Extract gcp ssh public key from environment variable"
        command: |
          echo "${GCLOUD_SSH_KEY_PUB}" > "${GCP_SSH_KEY_FILE}.pub"
          chmod 0600 "${GCP_SSH_KEY_FILE}.pub"

    - run:
        name: "Create VM"
        command: |
          source $SOURCE_ROOT/.circleci/create-vm.sh
          export TEST_NAME="<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>"
          export GCLOUD_INSTANCE="collector-ci-${TEST_NAME}-${CIRCLE_BUILD_NUM}"
          export VM_TYPE=<< parameters.vm_type >>
          export IMAGE_FAMILY=<< parameters.image_family >>
          main "$GCLOUD_INSTANCE" "$VM_TYPE" "$IMAGE_FAMILY" "$GCP_SSH_KEY_FILE" "$DOCKER_USER" "$DOCKER_PASS"

    - run:
        name: "Running integration tests"
        no_output_timeout: 45m
        command: |
          export REMOTE_HOST_TYPE=gcloud
          export COLLECTION_METHOD="<< parameters.collection_method >>"
          export VM_CONFIG="<< parameters.vm_type >>.<< parameters.image_family >>"
          export TEST_NAME="<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>"
          export GCLOUD_INSTANCE="collector-ci-${TEST_NAME}-${CIRCLE_BUILD_NUM}"
          export GCLOUD_OPTIONS="--ssh-key-file=${GCP_SSH_KEY_FILE}"
          export TEST_NAME="<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>"
          if "${SOURCE_ROOT}/.circleci/pr_has_label.sh" ci-run-against-rhel; then
            export COLLECTOR_REPO="stackrox/collector-rhel"
          else
            export COLLECTOR_REPO="stackrox/collector"
          fi
          make -C "${SOURCE_ROOT}" integration-tests-baseline integration-tests integration-tests-report
          cp "${SOURCE_ROOT}/integration-tests/perf.json" "${WORKSPACE_ROOT}/${TEST_NAME}-perf.json"
          [[ -z "$CIRCLE_BRANCH" ]] || gsutil cp "${SOURCE_ROOT}/integration-tests/integration-test-report.xml" "gs://stackrox-ci-results/circleci/collector/${CIRCLE_BRANCH}/$(date +%Y-%m-%d)-${CIRCLE_BUILD_NUM}/"

    - run:
        name: "Get serial port output"
        command: |
          export TEST_NAME="<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>"
          export GCLOUD_INSTANCE="collector-ci-${TEST_NAME}-${CIRCLE_BUILD_NUM}"
          mkdir -p ~/workspace/serial-output
          gcloud compute instances get-serial-port-output "$GCLOUD_INSTANCE" > ~/workspace/serial-output/"$GCLOUD_INSTANCE"-serial-output.logs
        when: always

    - store_test_results:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/integration-test-report.xml
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/integration-test-report.xml
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-integration-test-report.xml"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/container-logs
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-container-logs"
    - store_artifacts:
        path: ~/workspace/go/src/github.com/stackrox/collector/integration-tests/perf.json
        destination: "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-perf.json"
    - store_artifacts:
        path: ~/workspace/serial-output

    - persist_to_workspace:
        root: ~/workspace
        paths:
        - "<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>-perf.json"

    - run:
        name: "Destroy VM"
        command: |
          export TEST_NAME="<< parameters.collection_method >>-<< parameters.vm_type >>-<< parameters.image_family >>"
          export GCLOUD_INSTANCE="collector-ci-${TEST_NAME}-${CIRCLE_BUILD_NUM}"
          gcloud compute instances delete $GCLOUD_INSTANCE
        when: always

  integration-test-data:
    machine:
      image: ubuntu-1604:202004-01
    working_directory: ~/workspace

    steps:
    - initcommand

    - run:
        name: "Gather Data"
        command: |
          echo "ls 1"
          for i in "${WORKSPACE_ROOT}"/*perf.json; do
            echo "Performance data file: $i"
            cat $i >> ~/workspace/all-perf.json
          done
          ## TODO put into script
          cat all-perf.json | jq '. | select(.Metrics.hackbench_avg_time != null) | {kernel: .VmConfig, collection_method: .CollectionMethod, (.TestName): .Metrics.hackbench_avg_time } ' | jq -rs  ' group_by(.kernel) | .[] | group_by(.collection_method) | .[] | add | [.kernel, .collection_method, .baseline_benchmark, .collector_benchmark ] | @csv' > ~/workspace/benchmark.csv
          cat ~/workspace/benchmark.csv | sort | awk -v FS="," 'BEGIN{print "|Kernel|Method|Without Collector Time (secs)|With Collector Time (secs)|";print "|---|---|---|---|"}{printf "|%s|%s|%s|%s|%s",$1,$2,$3,$4,ORS}' > ~/workspace/benchmark.md

    - run:
        name: Comment on PR
        command: |
          wget --quiet https://github.com/joshdk/hub-comment/releases/download/0.1.0-rc6/hub-comment_linux_amd64
          sudo install hub-comment_linux_amd64 /usr/bin/hub-comment

          export COLLECTOR_TAG="${COLLECTOR_TAG}"
          export COLLECTOR_BUILDER_TAG="${COLLECTOR_BUILDER_TAG}"
          export PERF_TABLE=$(cat ~/workspace/benchmark.md)
          hub-comment -template-file "${SOURCE_ROOT}/.circleci/performance-comment-template.tpl"

    - store_artifacts:
        path: ~/workspace/all-perf.json
    - store_artifacts:
        path: ~/workspace/benchmark.md
    - store_artifacts:
        path: ~/workspace/benchmark.csv

  update-support-packages:
    docker:
      - image: docker.io/stackrox/apollo-ci:collector-0.2.12
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

    environment:
      - DOWNLOAD_BASE_URL: "https://install.stackrox.io"
      - RELATIVE_PATH: "collector/support-packages"
      - GCLOUD_BUCKET: "gs://sr-roxc"

    working_directory: ~/workspace

    steps:
      - initcommand
      - setup_remote_docker
      - run:
          name: Docker login to collector.stackrox.io
          command: |
            docker login \
              -u "$STACKROX_IO_PUSH_USERNAME" \
              -p "$STACKROX_IO_PUSH_PASSWORD" \
              collector.stackrox.io

      - gcloud-init

      - run:
          name: Initialize environment
          command: |
            cci-export BASE_URL "${DOWNLOAD_BASE_URL}/${RELATIVE_PATH}"
            cci-export SUPPORT_PKG_SRC_ROOT "${SOURCE_ROOT}/kernel-modules/support-packages"
            cci-export GCLOUD_TARGET "${GCLOUD_BUCKET}/${RELATIVE_PATH}"

      - run:
          name: Install Pip
          command: |
            curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py
            sudo python3 /tmp/get-pip.py

      - run:
          name: Install Jinja2
          command: |
            sudo pip3 install Jinja2

      - run:
          name: Generate collector -> rox version map
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/01-collector-to-rox-version-map.py" \
              "${SOURCE_ROOT}/RELEASED_VERSIONS" \
              /tmp/support-packages/metadata

      - run:
          name: Fetch collector metadata
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/02-fetch-collectors-metadata.sh" \
              /tmp/support-packages/metadata

      - run:
          name: Group by module version
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/03-group-by-module-version.sh" \
              /tmp/support-packages/metadata

      - run:
          name: Create support package files
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/04-create-support-packages.sh" \
              /tmp/support-packages/metadata /tmp/support-packages/output

      - run:
          name: Create index file
          command: |
            "${SUPPORT_PKG_SRC_ROOT}/05-create-index.py" \
              /tmp/support-packages/metadata /tmp/support-packages/output

      - run:
          name: Upload to GCloud
          command: |
            gsutil -m rsync -r /tmp/support-packages/output "$GCLOUD_TARGET"

      - run:
          name: Wait for 120 seconds
          command: |
            for i in {1..120}; do
              sleep 1
              echo -n .
            done
            echo

      - run:
          name: Delete old files
          command: |
            # Sanity check. If for some reason GCLOUD_TARGET is malformed, we risk deleting the
            # entire `sr-roxc` bucket (!!!). Hence have a hardcoded check for the path looking
            # valid.
            [[ "$GCLOUD_TARGET" =~ ^gs://[^/]+/.*collector.*/.*support-packages.*$ ]]
            gsutil -m rsync -n -r -d /tmp/support-packages/output "$GCLOUD_TARGET"

  reload-released-images:
    machine:
      image: ubuntu-1604:202004-01
    environment:
    - INSTALL_DIRECTORY: /tmp

    working_directory: ~/workspace

    steps:
    - initcommand

    - run:
        name: Check if reload job should run and copy kernel objects
        command: |
          shopt -s nullglob
          mod_build_dir="${WORKSPACE_ROOT}/ko-build/build-output"
          if [[ ( "$CIRCLE_BRANCH" != "master" && ! -f "${WORKSPACE_ROOT}/pr-metadata/labels/reload-released-images" ) \
             || ( "$CIRCLE_BRANCH" == "master" && -z "$( find "${mod_build_dir}" -type f -name '*.gz' )" ) ]]; then
            echo "Not reloading released images"
            circleci step halt
            exit 0
          fi

          for mod_dir in "${WORKSPACE_ROOT}/ko-build/module-versions"/*/; do
            mod_ver="$(basename "$mod_dir")"
            echo "Checking for module version ${mod_ver}"
            [[ -d "${mod_build_dir}/${mod_ver}" ]] || continue
            [[ ! -z "$( find "${mod_build_dir}/${mod_ver}" -type f -name '*.gz' )" ]] || continue
            echo "Copying into cache for module version ${mod_ver}"
            mkdir -p "/tmp/released-kernel-object-cache/${mod_ver}"
            cp "${mod_build_dir}/${mod_ver}"/*.gz "/tmp/released-kernel-object-cache/${mod_ver}"
          done


    - docker-login
    - gcloud-init

    - run:
        name: Reload released collector images
        command: |
          cd "$SOURCE_ROOT"
          docker login -u "$STACKROX_IO_PUSH_USERNAME" -p "$STACKROX_IO_PUSH_PASSWORD" collector.stackrox.io

          modules_bucket="${COLLECTOR_MODULES_BUCKET}"

          rm -rf "./reload/images"
          for collector_ver_file in "${WORKSPACE_ROOT}/ko-build/released-collectors"/*; do
            collector_ver="$(basename "${collector_ver_file}")"
            mod_ver="$(< "${collector_ver_file}")"
            echo "Checking ${collector_ver} with module version ${mod_ver}"
            released_latest_image="stackrox/collector:${collector_ver}-latest"
            released_base_image="stackrox/collector:${collector_ver}-base"
            docker pull "${released_latest_image}" | cat

            missing_objs_file="/tmp/missing-objs-${collector_ver}"
            echo "Reloading ${released_latest_image}"
            "./reload/missing-kernel-objects.sh" "${released_latest_image}" "${modules_bucket}" \
              >"${missing_objs_file}"

            if [[ ! -s "${missing_objs_file}" ]] ; then
              echo "Image ${released_latest_image} contains up to date kernel objects"
              continue
            fi

            echo "Kernel objects missing in image ${released_latest_image}:"
            cat "${missing_objs_file}"

            docker pull "${released_base_image}" | cat
            "./reload/build-latest.sh" "${collector_ver}" "${mod_ver}" "/tmp/released-kernel-object-cache/" "${COLLECTOR_MODULES_BUCKET}"

            if [[ "$CIRCLE_BRANCH" != "master" && -z "$CIRCLE_TAG" ]]; then
              docker push "stackrox/collector:${collector_ver}-reload-latest" | cat
            else
              docker push "stackrox/collector:${collector_ver}-latest" | cat
              docker push "collector.stackrox.io/collector:${collector_ver}-latest" | cat
            fi
          done

          docker images

workflows:
  version: 2
  build:
    jobs:
    - initjob:
        filters:
          tags:
            only: /.*/
    - builder:
        requires:
        - initjob
        filters:
          tags:
            only: /.*/
    - collector:
        requires:
        - builder
        filters:
          tags:
            only: /.*/
    - builder-rhel:
        requires:
        - initjob
        filters:
          tags:
            only: /.*/
    - collector-rhel:
        requires:
        - builder-rhel
        filters:
          tags:
            only: /.*/
    - prepare-kernels:
        requires:
        - initjob
        filters:
          tags:
            only: /.*/
    - kernels:
        requires:
        - prepare-kernels
        filters:
          tags:
            only: /.*/
    - join-modules:
        requires:
        - kernels
        filters:
          tags:
            only: /.*/
    - upload-modules:
        requires:
        - join-modules
        filters:
          tags:
            only: /.*/
    - kernel-module-build-failures-check:
        requires:
        - kernels
        filters:
          tags:
            only: /.*/
    - images:
        requires:
        - collector
        - collector-rhel
        - kernels
        - join-modules
        filters:
          tags:
            only: /.*/
    - integration-test-local:
        requires:
        - images
        - upload-modules
        filters:
          tags:
            only: /.*/
    - integration-test-local:
        name: integration-test-local-rhel
        vm-config: rhel
        use-rhel: true
        requires:
        - images
        - upload-modules
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-coreos-stable
        collection_method: ebpf
        vm_type: coreos
        image_family: coreos-stable
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-module-coreos-stable
        collection_method: module
        vm_type: coreos
        image_family: coreos-stable
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-cos-stable
        collection_method: ebpf
        vm_type: cos
        image_family: cos-stable
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-cos-81-lts
        collection_method: ebpf
        vm_type: cos
        image_family: cos-81-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-cos-77-lts
        collection_method: ebpf
        vm_type: cos
        image_family: cos-77-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-cos-85-lts
        collection_method: ebpf
        vm_type: cos
        image_family: cos-85-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-rhel-7
        collection_method: ebpf
        vm_type: rhel
        image_family: rhel-7
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    # TODO(rc) Enabled but bootstrap.sh forces fallback to kernel-module (ROX-3377)
    - integration-test:
        name: test-module-rhel-7
        collection_method: module
        vm_type: rhel
        image_family: rhel-7
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-rhel-8
        collection_method: ebpf
        vm_type: rhel
        image_family: rhel-8
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-module-rhel-8
        collection_method: module
        vm_type: rhel
        image_family: rhel-8
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-ubuntu-1804-lts
        collection_method: ebpf
        vm_type: ubuntu-os
        image_family: ubuntu-1804-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-module-ubuntu-1604-lts
        collection_method: module
        vm_type: ubuntu-os
        image_family: ubuntu-1604-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-ubuntu-1604-lts
        collection_method: ebpf
        vm_type: ubuntu-os
        image_family: ubuntu-1604-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-module-ubuntu-1804-lts
        collection_method: module
        vm_type: ubuntu-os
        image_family: ubuntu-1804-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-ebpf-ubuntu-2004-lts
        collection_method: ebpf
        vm_type: ubuntu-os
        image_family: ubuntu-2004-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test:
        name: test-module-ubuntu-2004-lts
        collection_method: module
        vm_type: ubuntu-os
        image_family: ubuntu-2004-lts
        requires:
        - images
        - integration-test-local
        filters:
          tags:
            only: /.*/
    - integration-test-data:
       requires:
       - test-module-coreos-stable
       - test-ebpf-coreos-stable
       - test-ebpf-cos-stable
       - test-ebpf-cos-77-lts
       - test-ebpf-cos-81-lts
       - test-ebpf-cos-85-lts
       - test-module-rhel-7
       - test-ebpf-rhel-7
       - test-module-rhel-8
       - test-ebpf-rhel-8
       - test-module-ubuntu-1604-lts
       - test-ebpf-ubuntu-1604-lts
       - test-module-ubuntu-1804-lts
       - test-ebpf-ubuntu-1804-lts
       - test-module-ubuntu-2004-lts
       - test-ebpf-ubuntu-2004-lts
       filters:
         tags:
           only: /.*/
    - reload-released-images:
        context: docker-io-and-stackrox-io-push
        requires:
        - images
        filters:
         tags:
           only: /.*/
    - update-support-packages:
        context: docker-io-and-stackrox-io-push
        filters:
          branches:
            only: master
        requires:
          - upload-modules
