name: Collector builder image build

on:
  workflow_call:
    inputs:
      collector-tag:
        type: string
        required: true
        description: |
          The tag used to build the collector image
    outputs:
      collector-builder-tag:
        description: The builder tag used by the build
        value: ${{ jobs.build-builder-image.outputs.collector-builder-tag }}

env:
  COLLECTOR_TAG: ${{ inputs.collector-tag }}
  DEFAULT_BUILDER_TAG: cache

jobs:
  builder-needs-rebuilding:
    name: Determine if builder image needs to be built
    runs-on: ubuntu-latest
    outputs:
      build-image: ${{ steps.changed.outputs.builder-changed }}

    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changed
        with:
          filters: |
            builder-changed:
              - builder/**
              - third_party/**

  build-builder-image:
    name: Build the builder image
    runs-on: ubuntu-latest
    # Multiarch builds sometimes take for eeeeeeeeeever
    timeout-minutes: 480
    needs:
    - builder-needs-rebuilding
    if: |
      needs.builder-needs-rebuilding.outputs.build-image == 'true' ||
      (github.event_name == 'push' && github.ref_type == 'tag') ||
      contains(github.event.pull_request.labels.*.name, 'build-builder-image')
    outputs:
      collector-builder-tag: ${{ steps.builder-tag.outputs.collector-builder-tag }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, ppc64le, s390x]

    env:
      PLATFORM: linux/${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Define builder tag
        id: builder-tag
        run: |
          COLLECTOR_BUILDER_TAG="${DEFAULT_BUILDER_TAG}"
          if [[ "${{ github.event_name }}" == 'pull_request' ]]; then
            COLLECTOR_BUILDER_TAG="${{ inputs.collector-tag }}"
          fi

          echo "COLLECTOR_BUILDER_TAG=${COLLECTOR_BUILDER_TAG}" >> "$GITHUB_ENV"
          echo "collector-builder-tag=${COLLECTOR_BUILDER_TAG}" >> "$GITHUB_OUTPUT"

      - name: Create secrets.yml
        run: |
          {
            echo "---"
            echo "stackrox_io_username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}"
            echo "stackrox_io_password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}"
            echo "rhacs_eng_username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}"
            echo "rhacs_eng_password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}"
          } > ${{ github.workspace }}/ansible/secrets.yml

      - name: Build images
        timeout-minutes: 480
        run: |
          ansible-galaxy install -r ansible/requirements.yml
          ansible-playbook \
            --connection local \
            -i localhost, \
            --limit localhost \
            -e arch='${{ matrix.arch }}' \
            -e @'${{ github.workspace }}/ansible/secrets.yml' \
            ansible/ci-build-builder.yml

  create-multiarch-manifest:
    needs:
    - build-builder-image
    name: Create Multiarch manifest
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      needs.build-builder-image.outputs.collector-builder-tag != 'cache'
    env:
      COLLECTOR_BUILDER_TAG: ${{ needs.build-builder-image.outputs.collector-builder-tag }}
      ARCHS: amd64 ppc64le s390x

    steps:
      - uses: actions/checkout@v3

      - name: Login to quay.io/stackrox-io
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Create and push multiarch manifest for builder to stackrox-io
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/stackrox-io/collector-builder:${{ env.COLLECTOR_BUILDER_TAG }}
          archs: ${{ env.ARCHS }}

      - name: Login to quay.io/rhacs-eng
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}

      - name: Create and push multiarch manifest for builder to rhacs-eng
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/rhacs-eng/collector-builder:${{ env.COLLECTOR_BUILDER_TAG }}
          archs: ${{ env.ARCHS }}

