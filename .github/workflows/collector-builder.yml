name: Collector builder image build

on:
  workflow_call:
    inputs:
      collector-tag:
        type: string
        required: true
        description: |
          The tag used to build the collector image
      architectures:
        type: string
        required: true
        description: |
          Space-separated list of architectures to build

    outputs:
      collector-builder-tag:
        description: The builder tag used by the build
        value: ${{ jobs.builder-needs-rebuilding.outputs.collector-builder-tag }}

env:
  COLLECTOR_TAG: ${{ inputs.collector-tag }}
  DEFAULT_BUILDER_TAG: master
  ANSIBLE_CONFIG: ${{ github.workspace }}/ansible/ansible.cfg

jobs:
  builder-needs-rebuilding:
    name: Determine if builder image needs to be built
    runs-on: ubuntu-24.04
    outputs:
      build-image: ${{ steps.builder-tag.outputs.build-image || false }}
      collector-builder-tag: ${{ steps.builder-tag.outputs.collector-builder-tag || 'master'}}

    env:
      DEFAULT_BUILDER_TAG: master

    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changed
        with:
          filters: |
            builder-changed:
              - builder/install/**
              - builder/third_party/**
              - builder/Dockerfile
              - .github/workflows/collector-builder.yml

      - name: Check labels and define builder tag
        id: builder-tag
        if: |
          steps.changed.outputs.builder-changed == 'true' ||
          (github.event_name == 'push' && (
            github.ref_type == 'tag' || startsWith(github.ref_name, 'release-')
          )) ||
          contains(github.event.pull_request.labels.*.name, 'build-builder-image') ||
          github.event_name == 'schedule'
        run: |
          COLLECTOR_BUILDER_TAG="${DEFAULT_BUILDER_TAG}"
          if [[ "${{ github.event_name }}" == 'pull_request' || \
                "${{ github.ref_type }}" == 'tag' || \
                "${{ github.ref_name }}" =~ ^release- ]]; then
            COLLECTOR_BUILDER_TAG="${{ inputs.collector-tag }}"
          fi

          echo "::notice::Rebuild builder image with tag ${COLLECTOR_BUILDER_TAG}"
          echo "collector-builder-tag=${COLLECTOR_BUILDER_TAG}" >> "$GITHUB_OUTPUT"
          echo "build-image=true" >> "$GITHUB_OUTPUT"

  build-builder-image:
    name: Local builder image
    # Multiarch builds sometimes take for eeeeeeeeeever
    timeout-minutes: 480
    needs:
    - builder-needs-rebuilding
    if: |
      needs.builder-needs-rebuilding.outputs.build-image == 'true'
    strategy:
      matrix:
        arch:
        - amd64
        - arm64
        - ppc64le
        - s390x
    runs-on: ${{ (matrix.arch == 'arm64' && 'ubuntu-24.04-arm') ||
                 (matrix.arch == 'ppc64le' && 'ubuntu-24.04-ppc64le') ||
                 (matrix.arch == 's390x' && 'ubuntu-24.04-s390x') ||
                'ubuntu-24.04' }}

    env:
      PLATFORM: linux/${{ matrix.arch }}
      BUILD_TYPE: ci
      COLLECTOR_BUILDER_TAG: ${{ needs.builder-needs-rebuilding.outputs.collector-builder-tag }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install ansible on P&Z runners
        if: matrix.arch == 'ppc64le' || matrix.arch == 's390x'
        run: |
          sudo apt-get install -y ansible

      - name: Create ansible vars
        run: |
          cat << EOF > ${{ github.workspace }}/ansible/secrets.yml
          ---
          stackrox_io_username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          stackrox_io_password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}
          rhacs_eng_username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          rhacs_eng_password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}
          collector_git_ref: ${{ github.ref }}
          collector_builder_tag: ${{ env.COLLECTOR_BUILDER_TAG }}
          EOF

      - name: Build images
        run: |
          ansible-galaxy install -r ansible/requirements.yml
          ansible-playbook \
            --connection local \
            -i localhost, \
            --limit localhost \
            -e arch='${{ matrix.arch }}' \
            -e @'${{ github.workspace }}/ansible/secrets.yml' \
            ansible/ci-build-builder.yml

  create-multiarch-manifest:
    needs:
    - builder-needs-rebuilding
    - build-builder-image
    name: Create Multiarch manifest
    runs-on: ubuntu-24.04
    if: |
      always() && !contains(join(needs.*.result, ','), 'failure') &&
      needs.builder-needs-rebuilding.outputs.build-image == 'true'
    env:
      COLLECTOR_BUILDER_TAG: ${{ needs.builder-needs-rebuilding.outputs.collector-builder-tag }}
      ARCHS: amd64 arm64 ppc64le s390x

    steps:
      - uses: actions/checkout@v4

      - name: Login to quay.io/stackrox-io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Create and push multiarch manifest for builder to stackrox-io
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/stackrox-io/collector-builder:${{ env.COLLECTOR_BUILDER_TAG }}
          archs: ${{ env.ARCHS }}

      - name: Login to quay.io/rhacs-eng
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}

      - name: Create and push multiarch manifest for builder to rhacs-eng
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/rhacs-eng/collector-builder:${{ env.COLLECTOR_BUILDER_TAG }}
          archs: ${{ env.ARCHS }}

  notify:
    runs-on: ubuntu-24.04
    if: always() && contains(join(needs.*.result, ','), 'failure') && github.event_name != 'pull_request'
    needs:
      - build-builder-image
      - create-multiarch-manifest
    steps:
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_COLLECTOR_ONCALL_WEBHOOK }}
          SLACK_CHANNEL: team-acs-collector-oncall
          SLACK_COLOR: failure
          SLACK_LINK_NAMES: true
          SLACK_TITLE: "Builder image build has failed"
          MSG_MINIMAL: actions url,commit
          SLACK_MESSAGE: |
            @acs-collector-oncall
