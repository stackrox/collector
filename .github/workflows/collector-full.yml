name: Build the collector full image

on:
  workflow_call:
    inputs:
      collector-tag:
        type: string
        required: true
        description: |
          The tag used to build the collector image
      build-full-image:
        type: boolean
        required: true
        description: |
          If true, the full collector image will be built, else, the -slim
          image of collector will be retagged.
      skip-built-drivers:
        type: boolean
        required: true
        description: |
          Skip built drivers if no new drivers were built.
      drivers-bucket:
        type: string
        default: ''
        description: |
          GCP bucket to pull drivers from.
      arch-drivers-bucket:
        type: string
        default: ''
        description: |
          Architecture dependent drivers bucket. When used, the drivers in this
          bucket will take precendence over the one in drivers-bucket.
      max-layer-depth:
        type: string
        default: "5"
        description: |
          Max layer the drivers will be split into for x86 images

jobs:
  build-collector-full:
    runs-on: ubuntu-latest
    if: inputs.build-full-image
    strategy:
      fail-fast: false
      matrix:
        arch:
        - amd64
        - ppc64le
        - s390x
    env:
      COLLECTOR_IMAGE: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Restore built drivers
        uses: actions/download-artifact@v3
        if: matrix.arch == 'amd64' && !inputs.skip-built-drivers
        with:
          name: built-drivers
          path: /tmp/built-drivers/

      - name: Set environment variables
        run: |
          echo "DRIVER_VERSION=$(cat ${{ github.workspace }}/kernel-modules/MODULE_VERSION)" >> "$GITHUB_ENV"
          echo "CONTEXT_DRIVERS_DIR=${{ github.workspace }}/kernel-modules/container/kernel-modules" >> "$GITHUB_ENV"

          if [[ "${{ matrix.arch }}" == "amd64" ]]; then
            echo "LAYER_DEPTH=${{ inputs.max-layer-depth }}" >> "$GITHUB_ENV"
          else
            echo "LAYER_DEPTH=1" >> "$GITHUB_ENV"
          fi

      - name: Create context directory
        run: mkdir -p "${CONTEXT_DRIVERS_DIR}"

      - name: Download drivers from GCP
        if: matrix.arch == 'amd64' && inputs.drivers-bucket != ''
        run: |
          gsutil -m rsync -r "gs://${{ inputs.drivers-bucket }}/${DRIVER_VERSION}/" \
            "${CONTEXT_DRIVERS_DIR}"

      - name: Add built drivers
        if: matrix.arch == 'amd64'
        run: |
          BUILT_DRIVERS_DIR="/tmp/built-drivers/${DRIVER_VERSION}/"

          if [[ -d "${BUILT_DRIVERS_DIR}" ]]; then
            find "${BUILT_DRIVERS_DIR}" -type f -exec mv -t "${CONTEXT_DRIVERS_DIR}" {} +
          fi

      # Downstream built drivers take precedence over all others.
      - name: Download downstream built drivers from GCP
        if: inputs.arch-drivers-bucket != ''
        run: |
          GCP_BUCKET="gs://${{ inputs.arch-drivers-bucket }}/${{ matrix.arch }}"
          if [[ ${{ matrix.arch }} == "amd64" ]]; then
            GCP_BUCKET="gs://${{ inputs.arch-drivers-bucket }}/x86_64"
          fi

          gsutil -m rsync -r "${GCP_BUCKET}/${DRIVER_VERSION}/" \
            "${CONTEXT_DRIVERS_DIR}"

      - name: Create secrets.yml
        run: |
          {
            echo "---"
            echo "stackrox_io_username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}"
            echo "stackrox_io_password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}"
            echo "rhacs_eng_username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}"
            echo "rhacs_eng_password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}"
          } > ${{ github.workspace }}/ansible/secrets.yml

      # Ansible here is overkill, but GHA doesn't let me call a workflow from
      # a step, so... Overkill it is!
      - name: Build and push full images
        if: |
          matrix.arch == 'amd64' ||
          !contains(github.event.pull_request.labels.*.name, 'skip-multiarch-builds')
        run: |
          ansible-galaxy install -r ansible/requirements.yml
          ansible-playbook \
            --connection local \
            -i localhost, \
            --limit localhost \
            -e collector_image="${COLLECTOR_IMAGE}" \
            -e arch="${{ matrix.arch }}" \
            -e max_layer_depth="${LAYER_DEPTH}" \
            -e collector_tag="${{ inputs.collector-tag }}" \
            -e driver_version="${DRIVER_VERSION}" \
            -e context_path="${{ github.workspace }}/kernel-modules/container" \
            -e @'${{ github.workspace }}/ansible/secrets.yml' \
            ansible/ci-build-collector-full.yml

  multiarch-manifests:
    runs-on: ubuntu-latest
    if: |
      inputs.build-full-image &&
      !contains(github.event.pull_request.labels.*.name, 'skip-multiarch-builds')
    needs:
    - build-collector-full
    env:
      ARCHS: amd64 ppc64le s390x
      COLLECTOR_IMAGE: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to quay.io/stackrox-io
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Create and push multiarch manifest for stackrox-io
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: ${{ env.COLLECTOR_IMAGE }}
          archs: ${{ env.ARCHS }}

      - name: Create and push multiarch manifest for stackrox-io -latest
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: ${{ env.COLLECTOR_IMAGE }}
          archs: ${{ env.ARCHS }}
          suffix: -latest

      - name: Login to quay.io/rhacs-eng
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}

      - name: Create and push multiarch manifest for rhacs-eng
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/rhacs-eng/collector:${{ inputs.collector-tag }}
          archs: ${{ env.ARCHS }}

      - name: Create and push multiarch manifest for rhacs-eng -latest
        uses: ./.github/actions/create-multiarch-manifest
        with:
          base-image: quay.io/rhacs-eng/collector:${{ inputs.collector-tag }}
          archs: ${{ env.ARCHS }}
          suffix: -latest

  retag-collector-full:
    runs-on: ubuntu-latest
    if: |
      inputs.build-full-image &&
      contains(github.event.pull_request.labels.*.name, 'skip-multiarch-builds')
    needs:
    - build-collector-full
    steps:
      - uses: actions/checkout@v3

      - name: Pull full image
        run: |
          docker pull quay.io/stackrox-io/collector:${{ inputs.collector-tag }}-amd64

      - name: Retag and push stackrox-io
        uses: ./.github/actions/retag-and-push
        with:
          src-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}-amd64
          dst-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Retag and push stackrox-io -latest
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}-amd64
          dst-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}-latest
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Retag and push rhacs-eng
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}-amd64
          dst-image: quay.io/rhacs-eng/collector:${{ inputs.collector-tag }}
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}

      - name: Retag and push rhacs-eng -latest
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}-amd64
          dst-image: quay.io/rhacs-eng/collector:${{ inputs.collector-tag }}-latest
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}

  retag-collector-slim:
    runs-on: ubuntu-latest
    if: ${{ !inputs.build-full-image }}
    env:
      COLLECTOR_IMAGE_SLIM: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}-slim

    steps:
      - name: Pull slim image
        run: |
          docker pull "${COLLECTOR_IMAGE_SLIM}"

      - name: Retag and push stackrox-io
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: ${{ env.COLLECTOR_IMAGE_SLIM }}
          dst-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Retag and push stackrox-io -latest
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: ${{ env.COLLECTOR_IMAGE_SLIM }}
          dst-image: quay.io/stackrox-io/collector:${{ inputs.collector-tag }}-latest
          username: ${{ secrets.QUAY_STACKROX_IO_RW_USERNAME }}
          password: ${{ secrets.QUAY_STACKROX_IO_RW_PASSWORD }}

      - name: Retag and push rhacs-eng
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: ${{ env.COLLECTOR_IMAGE_SLIM }}
          dst-image: quay.io/rhacs-eng/collector:${{ inputs.collector-tag }}
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}

      - name: Retag and push rhacs-eng -latest
        uses: stackrox/actions/images/retag-and-push@v1
        with:
          src-image: ${{ env.COLLECTOR_IMAGE_SLIM }}
          dst-image: quay.io/rhacs-eng/collector:${{ inputs.collector-tag }}-latest
          username: ${{ secrets.QUAY_RHACS_ENG_RW_USERNAME }}
          password: ${{ secrets.QUAY_RHACS_ENG_RW_PASSWORD }}
