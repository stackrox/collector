--- 

- set_fact:
    normalized_collection_method: "{{ collection_method | default('any') | replace('kernel-module', 'ko') }}"

- name: Create VMs From Family
  include_role:
    name: create-vm
  vars:
    vm_name: "{{ gcp_instance_prefix }}-{{ normalized_collection_method }}-{{ item.1 }}-{{ job_id }}"
    vm_project: "{{ item.0.value.project }}"
    vm_family: "{{ item.1 }}"
    vm_platform: "{{ item.0.key }}"
    vm_config: "{{ item.0.key }}_{{ item.1 }}"
    vm_collection_method: "{{ collection_method | default('any') | replace('-', '_') }}"
    vm_available_zones: "{{ gcp_available_zones }}"

  #
  # The loop will create the "item" variable, which can be used throughout the task
  # and the subelements call will create a list that combines the project
  # with all of the image families in that set
  # e.g.
  #   - name: rhel
  #     families:
  #      - rhel-7
  #      - rhel-8
  #
  #  becomes:
  #  [{'name': 'rhel', 'families': ['rhel-7', 'rhel-8']}, 'rhel-7']
  #  [{'name': 'rhel', 'families': ['rhel-7', 'rhel-8']}, 'rhel-8']
  #
  #  This also allows us to filter based on specific test_platforms as seen
  #  in the when clause
  #
  loop: "{{ vm_list | dict2items | subelements('value.families', skip_missing=True) }}"
  when: "test_platform == item.0.key or test_platform == 'all'"

- name: Create VMs From Image
  include_role:
    name: create-vm
  vars:
    vm_name: "{{ gcp_instance_prefix }}-{{ normalized_collection_method }}-{{ item.0.key }}-{{ job_id }}"
    vm_project: "{{ item.0.value.project }}"
    # still populate the family, since it is used as a label to differentiate
    # VMs
    vm_family: "{{ item.0.key }}"
    vm_image: "{{ item.1 }}"
    vm_platform: "{{ item.0.key }}"
    vm_config: "{{ item.0.key }}_{{ item.0.key }}"
    vm_collection_method: "{{ collection_method | default('any') | replace('-', '_') }}"
    vm_available_zones: "{{ gcp_available_zones }}"

  #
  # The loop will create the "item" variable, which can be used throughout the task
  # and the subelements call will create a list that combines the project
  # with all of the images in that set
  # e.g.
  #   - name: rhel
  #     images:
  #      - rhel-7-image
  #      - rhel-8-image
  #
  #  becomes:
  #  [{'name': 'rhel', 'images': ['rhel-7-image', 'rhel-8-image']}, 'rhel-7-image']
  #  [{'name': 'rhel', 'images': ['rhel-7-image', 'rhel-8-image']}, 'rhel-8-image']
  #
  #  This also allows us to filter based on specific test_platforms as seen
  #  in the when clause
  #
  loop: "{{ vm_list | dict2items | subelements('value.images', skip_missing=True) }}"
  when: "test_platform == item.0.key or test_platform == 'all'"

