---

#
# Provisioning takes place once the VM is created. We need to handle a number
# of platforms here, and the ordering of this logic is quite important
# for the Container OS platforms like flatcar and fedora-coreos.
#
# For those platforms, Python does not exist (which is a requirement for
# ansible) so it is installed first, before the rest of the provisioning
# continues.
#

# set facts for weird platforms that report different families
- set_fact:
    is_rhel: "{{ vm_config.find('rhel') != -1 }}"
    is_coreos: "{{ vm_config.find('coreos') != -1 }}"
    is_ubuntu: "{{ vm_config.find('ubuntu') != -1 }}"
    is_flatcar: "{{ vm_config.find('flatcar') != -1 }}"

# Wait for SSH to be available on the remote host
# This is agnostic of whether or not ansible is available at that end.
- wait_for:
    port: 22
    host: "{{ ansible_host }}"
    timeout: 180
  delegate_to: localhost
  become: no

- include_tasks: "fedora-coreos.yml"
  when: is_coreos|bool

- include_tasks: "flatcar.yml"
  when: is_flatcar|bool


# At this point, ansible should be able to run on the remote host

- wait_for_connection:
    timeout: 180

- name: Gather facts
  setup:

- name: RedHat Provisioning
  include_tasks: "redhat.yml"
  when: is_rhel|bool

- name: Ubuntu Provisioning
  include_tasks: "ubuntu.yml"
  when: is_ubuntu|bool

- name: Docker specific setup
  include_tasks: "docker.yml"
  when: runtime_command == "docker"

- name: Podman specific setup
  include_tasks: "podman.yml"
  when: runtime_command == "podman"

- name: Permissive SELinux
  shell: sudo setenforce 0
  when: needs_selinux_permissive is defined and needs_selinux_permissive
