---
#
# This will run the steps for integration testing, for a given collection method.
# and handles creating the report and writing necessary log files.
#
# Args:
#   collection_method: ebpf
#

- set_fact:
    logs_root: "{{ collector_root }}/integration-tests/container-logs/{{ vm_config }}/{{ collection_method }}"

- name: Cleanup old containers
  become: "{{ runtime_as_root }}"
  shell: "{{ runtime_command }} rm -f $({{ runtime_command }} ps -aq) >/dev/null 2>&1 || true"

- name: Get default collector tag
  community.general.make:
    target: tag
    chdir: "{{ collector_root }}"
  register: collector_tag_result
  delegate_to: localhost

- set_fact:
    collector_image: "{{ lookup('env', 'COLLECTOR_IMAGE', default='quay.io/rhacs-eng/collector:' +  collector_tag_result.stdout) }}"
    integration_tests_image: "{{ lookup('env', 'TEST_IMAGE', default='quay.io/rhacs-eng/qa-multi-arch:collector-tests-' + collector_tag_result.stdout) }}"

- set_fact:
    run_args: -test.run {{ collector_test }} -test.timeout 60m -test.count=1
  when: collector_test != "ci-integration-tests"

- set_fact:
    run_args: -test.timeout 120m -test.short
  when: collector_test == "ci-integration-tests"

- name: Make logs directory
  file:
    path: "{{ remote_log_mount }}"
    state: directory
    mode: '0777'

- name: Set core dump path
  become: yes
  shell: |
    echo '/tmp/core_dumps/core_%t' | sudo tee /proc/sys/kernel/core_pattern
    mkdir /tmp/core_dumps || true

- name: Copy podman auth
  become: "{{ runtime_as_root }}"
  shell:
    cmd: |
      if [[ -f "/run/containers/0/auth.json" ]]; then
        mkdir -p ~/.docker/
        cp "/run/containers/0/auth.json" ~/.docker/config.json
      fi
    creates: ~/.docker/config.json
  when: runtime_command == "podman"

- block:

    # Some considerations for running the test container:
    #   1. the runtime auth must be mounted to allow the tests
    #      to pull images. (~/.docker/config.json)
    #   2. /tmp is mounted to allow a common mount point for
    #      communication between containers (see listening ports test for
    #      an example.
    #
    # One or both of these should be improved in the future. Letting the
    # container authenticate itself would solve (1) and better defined
    # inter-container comms would solve (2)
  - name: Run integration tests
    become: "{{ runtime_as_root }}"
    shell: |
      {{ runtime_command }} run -it --rm \
        -v {{ remote_log_mount }}:{{ container_logs_root }} \
        -v ~/.docker:/root/.docker \
        -v /tmp/:/tmp \
        -v {{ runtime_socket }}:/var/run/docker.sock \
        --network=host \
        -e COLLECTION_METHOD \
        -e VM_CONFIG \
        -e IMAGE_FAMILY \
        -e COLLECTOR_IMAGE \
        -e COLLECTOR_QA_TAG \
        -e COLLECTOR_LOG_LEVEL \
        {{ integration_tests_image }} \
        {{ run_args }} -test.v 2>&1
    environment:
      COLLECTION_METHOD: "{{ collection_method }}"
      VM_CONFIG: "{{ vm_config }}"
      IMAGE_FAMILY: "{{ vm_image_family }}"
      COLLECTOR_IMAGE: "{{ collector_image }}"
      COLLECTOR_QA_TAG: "{{ lookup('env', 'COLLECTOR_QA_TAG', default=lookup('file', integration_tests_root + '/container/QA_TAG')) }}"
      COLLECTOR_LOG_LEVEL: "{{ lookup('env', 'COLLECTOR_LOG_LEVEL', default='debug') }}"
    register: test_result
    # ensure that this is printed
    tags: [print_action]

  rescue:
    - name: Set tests as failed
      set_fact:
        success: false

    - name: Output test log
      debug:
        msg: "{{ test_result.stdout }}"
      tags: [print_action]

  always:
    - name: Make logs directories
      file:
        state: directory
        path: "{{ logs_root }}"
      delegate_to: localhost

    - name: Get log files
      find:
        paths: "{{ remote_log_mount }}/{{ vm_config }}/{{ collection_method }}/"
      register: remote_log_files

    - name: Fetch log files
      fetch:
        src: "{{ remote_log_path }}"
        dest: "{{ logs_root }}/"
        flat: true
      loop: "{{ remote_log_files.files | map(attribute='path') | list }}"
      loop_control:
        loop_var: remote_log_path

    - name: Write integration test log
      copy:
        content: "{{ test_result.stdout }}"
        dest: "{{ logs_root }}/integration-test.log"
      delegate_to: localhost

    - name: Get core dump file paths
      become: yes
      find:
        paths: "/tmp/core_dumps/"
      register: core_files

    - name: Fetch each core dump file
      become: yes
      fetch:
        src: "{{ core_file }}"
        dest: "{{ logs_root }}/"
        flat: true
      loop: "{{ core_files.files | map(attribute='path') | list }}"
      loop_control:
        loop_var: core_file

    - name: Report
      community.general.make:
        chdir: "{{ integration_tests_root }}"
        target: report
      environment:
        LOG_FILE: "{{ logs_root }}/integration-test.log"
      delegate_to: localhost

  # If this host is just for a certain collection method, skip running
  # the test if we're not using that collection method.
  when: vm_collection_method == collection_method or vm_collection_method == 'any'
