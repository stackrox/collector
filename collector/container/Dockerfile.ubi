# This builds a collector container based on UBI with a reliance on Red Hat
# subscription entitlements.
FROM registry.access.redhat.com/ubi8/ubi:8.4 AS builder

ARG REDHAT_USERNAME
ARG REDHAT_PASSWORD
ARG USE_VALGRIND=false
ARG ADDRESS_SANITIZER=false
RUN rm -rf /etc/rhsm-host && \
    subscription-manager register --username "${REDHAT_USERNAME}" --password "${REDHAT_PASSWORD}" && \
    subscription-manager attach && \
    # this pool id may be associated with the current test user account.
    # if the account changes, use: `subscription-manager list --available` to find a valid id.
    subscription-manager attach --pool=8a85f9a178d12e760178dba5bb1d2b43 && \
    dnf config-manager --enable codeready-builder-for-rhel-8-x86_64-rpms && \
    dnf config-manager --enable amq-clients-2-for-rhel-8-x86_64-rpms && \
    dnf config-manager --enable rhocp-4.6-for-rhel-8-x86_64-rpms

# hadolint ignore=DL3041
RUN dnf -y update && \
    dnf -y install \
        make \
        cmake \
        gcc-c++ \
        openssl-devel \
        ncurses-devel \
        curl-devel \
        libuuid-devel \
        libcap-ng-devel \
        autoconf \
        libtool \
        git \
        elfutils-libelf-devel \
        gtest-devel \
        gmock-devel \
        jsoncpp-devel  \
        tbb-devel \
        jq-devel \
        c-ares-devel && \
    if [ "$USE_VALGRIND" = "true" ]; then \
        dnf -y install valgrind; \
    fi && \
    if [ "$ADDRESS_SANITIZER" = "true" ]; then \
        dnf -y install libasan; \
    fi && \
    dnf clean all

ARG BUILD_DIR=/build
RUN mkdir -p ${BUILD_DIR}
WORKDIR ${BUILD_DIR}
ARG CMAKE_BUILD_TYPE
ENV CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
ARG COLLECTOR_APPEND_CID=false
ENV COLLECTOR_APPEND_CID=${COLLECTOR_APPEND_CID}
COPY builder builder
COPY collector src
COPY rox-proto rox-proto
COPY falcosecurity-libs falcosecurity-libs
COPY third_party third_party
ARG NPROCS=2
RUN NPROCS=${NPROCS} ./builder/build/build-ubi.sh


FROM registry.access.redhat.com/ubi8/ubi-minimal:8.4

WORKDIR /

ARG COLLECTOR_VERSION
LABEL version="${COLLECTOR_VERSION}"

ARG USE_VALGRIND=false
ARG ADDRESS_SANITIZER=false

ENV COLLECTOR_HOST_ROOT=/host

RUN rm -rf /etc/rhsm-host
COPY --from=builder /etc/pki/entitlement /etc/pki/entitlement
COPY --from=builder /etc/rhsm /etc/rhsm

ARG BUILD_DIR=/build
COPY --from=builder ${BUILD_DIR}/cmake-collector/EXCLUDE_FROM_DEFAULT_BUILD/libsinsp/libsinsp-wrapper.so /usr/local/lib/
COPY --from=builder ${BUILD_DIR}/cmake-collector/collector /usr/local/bin/
COPY --from=builder ${BUILD_DIR}/src/container/scripts /

# Switch shell to bash with pipefall to avoid hadolint warning DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

RUN mv /collector-wrapper.sh /usr/local/bin/ && \
    chmod 700 bootstrap.sh && \
    echo '/usr/local/lib' > /etc/ld.so.conf.d/usrlocallib.conf && \
    ldconfig && \
    mkdir /kernel-modules && \
    microdnf upgrade -y && \
    microdnf install -y \
      --enablerepo=codeready-builder-for-rhel-8-x86_64-rpms \
      --enablerepo=amq-clients-2-for-rhel-8-x86_64-rpms \
      --enablerepo=rhocp-4.6-for-rhel-8-x86_64-rpms \
      gzip \
      kmod \
      jsoncpp \
      tbb \
      jq \
      c-ares && \
    if [ "$USE_VALGRIND" = "true" ]; then \
      microdnf install -y valgrind; \
    fi && \
    if [ "$ADDRESS_SANITIZER" = "true" ]; then \
        microdnf -y install libasan; \
    fi && \
    microdnf clean all && \
    rpm --query --all 'curl' '*rpm*' '*dnf*' '*libsolv*' '*hawkey*' 'yum*' |\
      xargs rpm -e --nodeps && \
    rm -rf /var/cache/dnf

# Restore the default shell because "bootstrap.sh" expects a shell to be started with a single parameter
SHELL ["/bin/sh", "-c"]
COPY /kernel-modules/MODULE_VERSION /kernel-modules/MODULE_VERSION.txt
COPY --from=builder /THIRD_PARTY_NOTICES /THIRD_PARTY_NOTICES

EXPOSE 8080 9090

RUN rm -rf /etc/pki/entitlement && \
    rm -rf /etc/rhsm

# hadolint ignore=DL3059
RUN collector --help || if [ $? -ne 1 ]; then echo "Invalid collector build"; exit 1; fi

ENTRYPOINT ["/bootstrap.sh"]

# hadolint ignore=DL3025
CMD collector-wrapper.sh \
    --collector-config=$COLLECTOR_CONFIG \
    --collection-method=$COLLECTION_METHOD \
    --grpc-server=$GRPC_SERVER
