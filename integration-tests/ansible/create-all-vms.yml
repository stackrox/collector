---

- name: Create GCP VMs
  hosts: localhost
  strategy: free
  vars:
    platform: "{{ lookup('env', 'TEST_PLATFORM', default='all') }}"

  tasks:
    - name: Include VM definitions
      include_vars:
        file: instances.yml
        name: instances

    - debug: msg="{{ instances }}"

    - name: Create VMs From Family
      google.cloud.gcp_compute_instance:
        name: "collector-osci-giles-{{ item.1 }}-{{ instances.job_id }}"
        project: "{{ instances.gcp_project }}"
        auth_kind: "{{ instances.gcp_auth_kind }}"
        zone: "{{ instances.gcp_zone }}"
        machine_type: e2-standard-2
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              disk_size_gb: 20
              source_image: "projects/{{ item.0.project }}/global/images/family/{{ item.1 }}"
        network_interfaces:
          - network: 
              name: "default"
            access_configs:
              - name: External NAT
                type: ONE_TO_ONE_NAT
        labels:
          job_id: "{{ instances.job_id }}"
          platform: "{{ item.0.name }}"
          username: "{{ item.0.username | default(lookup('env', 'USER')) }}"
      #
      # The loop will create the "item" variable, which can be used throughout the task
      # and the subelements call will create a list that combines the project
      # with all of the image families in that set
      # e.g.
      #   - name: rhel
      #     families:
      #      - rhel-7
      #      - rhel-8
      #
      #  becomes:
      #  [{'rhel', 'families': ['rhel-7', 'rhel-8']}, 'rhel-7']
      #  [{'rhel', 'families': ['rhel-7', 'rhel-8']}, 'rhel-8']
      #
      #  This also allows us to filter based on specific platforms as seen
      #  in the when clause
      #
      loop: "{{ instances.virtual_machines | subelements('families', skip_missing=True) }}"
      when: "'{{ platform }}' == '{{ item.0.name }}' or '{{ platform }}' == 'all'"

    #
    # This is largely duplicated from the above to support VMs generated
    # through a specific image rather than an image family. It cannot 
    # be easily merged into a single task because of VM name construction
    # because we need unique and short VM names, 
    #
    - name: Create VMs From Image
      google.cloud.gcp_compute_instance:
        name: "collector-osci-giles-{{ item.0.name }}-{{ instances.job_id }}"
        project: "{{ instances.gcp_project }}"
        auth_kind: "{{ instances.gcp_auth_kind }}"
        zone: "{{ instances.gcp_zone }}"
        machine_type: e2-standard-2
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              disk_size_gb: 20
              source_image: "projects/{{ item.0.project }}/global/images/{{ item.1 }}"
        network_interfaces:
          - network: "{{ gcp_network }}"

      #
      # The loop will create the "item" variable, which can be used throughout the task
      # and the subelements call will create a list that combines the project
      # with all of the image families in that set
      # e.g.
      #   rhel:
      #      families:
      #       - rhel-7
      #       - rhel-8
      #
      #  becomes:
      #  [{'rhel', 'families': ['rhel-7', 'rhel-8']}, 'rhel-7']
      #  [{'rhel', 'families': ['rhel-7', 'rhel-8']}, 'rhel-8']
      #
      #  This also allows us to filter based on specific platforms as seen
      #  in the when clause
      #
      loop: "{{ instances.virtual_machines | subelements('images', skip_missing=True) }}"
      when: "'{{ platform }}' == '{{ item.0.name }}' or '{{ platform }}' == 'all'"
