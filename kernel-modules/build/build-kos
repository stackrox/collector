#!/usr/bin/env bash
set -euo pipefail

#### LICENSING:
#### This file is derived from sysdig, in scripts/build-probe-binaries.
#### Sysdig is licensed under the GNU General Public License v2.
#### This file is not distributed with StackRox code, and is only
#### used during compilation.
#### This file is heavily modified from the original.

#
# This script builds a precompiled version of sysdig-probe for a bunch of kernels
# The precompiled binary is then obtained at runtime by sysdig-probe-loader
# Ideally, the community should expand this stuff with better support
#

build_modules() {
    kernel_directory="$1"
    kernel_release="$2"
    output_module="$3"

    echo "Building modules for ${kernel_release}"

    cd /sysdig-src
    KERNELDIR="$kernel_directory" \
        make -C driver clean || true

    rm -rf ko-build || true
    mkdir ko-build
    cd ko-build

    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-fno-pie" -DPROBE_NAME=collector -DBUILD_USERSPACE=OFF ..
    KERNELDIR="$kernel_directory" \
        make -j 6 driver

    sysdig_ko=driver/collector.ko
    strip -g "$sysdig_ko"

    ko_version=$(/sbin/modinfo "$sysdig_ko" | grep vermagic | tr -s " " | cut -d " " -f 2)
    if [ "$ko_version" != "$kernel_release" ]; then
        echo "Corrupted probe, KO_VERSION=$ko_version, KERNEL_RELEASE=$kernel_release"
        return 1
    fi

    cp -v "$sysdig_ko" "$output_module"
}

ubuntu_build() {
    if [[ $# -ne 3 ]]; then
        echo "Incorrect arguments to ubuntu_build() ($* given)"
        return 1
    fi

    local release="$1"
    local specific_deb_file="/packages/$2"
    local all_deb_file="/packages/$3"
    local module_file="/output/Ubuntu/collector-${release}.ko"

    echo "Running an Ubuntu build"
    echo "  release           | $release"
    echo "  specific_deb_file | $specific_deb_file"
    echo "  all_deb_file      | $all_deb_file"
    echo "  module_file       | $module_file"

    dpkg -x "$specific_deb_file" ./
    dpkg -x "$all_deb_file" ./

    build_modules "$PWD/usr/src/linux-headers-${release}" "$release" "$module_file"
}

rhel_build() {
    if [[ $# -ne 2 ]]; then
        echo "Incorrect arguments to rhel_build() ($* given)"
        return 1
    fi

    local release="$1"
    local rpm_file="/packages/$2"
    local module_file="/output/RedHat/collector-${release}.ko"

    echo "Running a RedHat build"
    echo "  release     | $release"
    echo "  rpm_file    | $rpm_file"
    echo "  module_file | $module_file"

    rpm2cpio "$rpm_file" | cpio -idm

    build_modules "$PWD/usr/src/kernels/${release}" "$release" "$module_file"
}

extract() {
    echo "Extracting $1"
    dpkg -x "$1" ./
}

debian_build() {
    if [[ $# -lt 3 ]] || [[ $# -gt 4 ]]; then
        echo "Incorrect arguments to debian_build() ($* given)"
        return 1
    fi

    local release="$1"
    local kbuild_deb_file="/packages/$2"
    local header_deb_file="/packages/$3"
    local common_deb_file=""
    if [[ $# -eq 4 ]]; then
	local common_deb_file="/packages/$4"
    fi
    local module_file="/output/Debian/collector-${release}.ko"
    local src_dir="${PWD}/usr/src/linux-headers-${release}"

    echo "Running a Debian build"
    echo "  release         | $release"
    echo "  kbuild_deb_file | $kbuild_deb_file"
    echo "  header_deb_file | $header_deb_file"
    echo "  common_deb_file | $common_deb_file"
    echo "  module_file     | $module_file"

    extract "$header_deb_file"
    extract "$kbuild_deb_file"
    [[ -n "${common_deb_file}" ]] && extract "${common_deb_file}"


    # Fix symbolic links
    unlink "lib/modules/${release}/build"
    ln -sr "${PWD}/usr/src/linux-headers-${release}" "lib/modules/${release}/build"
    if [[ -n "${common_deb_file}" ]]; then
	local commons_dir="${PWD}/usr/src/linux-headers-${release/amd64/common}"
	unlink "lib/modules/${release}/source"
	ln -s "${commons_dir}" "lib/modules/${release}/source"
    fi
    
    # Hack Makefile
    sed -i -e 's/@://' \
	-e 's|$(cmd) %.*$|$(cmd) : all|' \
	"${src_dir}/Makefile"
    if [[ -n "${common_deb_file}" ]]; then
	sed -i -e '0,/MAKEARGS.*$/s__MAKEARGS := -C '"${commons_dir} O=${src_dir}"_ \
	"${src_dir}/Makefile"
    fi
    build_modules "$PWD/usr/src/linux-headers-${release}" "$release" "$module_file"
}

coreos_build() {
    if [[ $# -ne 2 ]]; then
        echo "Incorrect arguments to coreos_build() ($* given)"
        return 1
    fi

    local release="$1"
    local bundle_file="/packages/$2"
    local module_file="/output/CoreOS/collector-${release}.ko"

    echo "Running a CoreOS build"
    echo "  release     | $release"
    echo "  bundle_file | $bundle_file"
    echo "  module_file | $module_file"

    tar --strip-components=2 -xf "$bundle_file" --wildcards 'usr/boot/config*'
    tar --strip-components=1 -xf "$bundle_file" 'lib/modules'

    # https://groups.google.com/forum/#!topic/coreos-dev/Z8Q7sIy6YwE
    sed -i 's/CONFIG_INITRAMFS_SOURCE=""/CONFIG_INITRAMFS_SOURCE="bootengine.cpio"\nCONFIG_INITRAMFS_ROOT_UID=0\nCONFIG_INITRAMFS_ROOT_GID=0/' config
    sed -i 'N;s/\(CONFIG_RD_LZ4=.\)\n\(CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=\)/\1\nCONFIG_INITRAMFS_COMPRESSION=".gz"\n\2/' config

    build_modules "$PWD/modules/${release}/build" "$release" "$module_file"
}

main() {
    if [[ $# -lt 4 ]]; then
        echo "Insufficient arguments"
        return 1
    fi

    distro="$1"
    version="$2"
    flavor="$3"
    shift 3
    files="$@"

    rm -rf /scratch/tmp || true
    mkdir -p /scratch/tmp
    cd /scratch/tmp

    mkdir -p \
        /output/Ubuntu \
        /output/RedHat \
        /output/Debian \
        /output/CoreOS

    case "$distro" in
        Ubuntu)
            echo Building Ubuntu
            ubuntu_build "${version}-${flavor}" $files
        ;;

        RedHat)
            echo Building RHEL
            rhel_build "${version}.${flavor}" $files
        ;;

        Debian)
            echo Building Debian
            debian_build "${version}-${flavor}" $files
        ;;

        CoreOS)
            echo Building CoreOS
            coreos_build "${version}-${flavor}" $files
        ;;

        *)
            echo Unknown distro.
            return 1
        ;;
    esac
}

main "$@"
