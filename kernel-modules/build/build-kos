#!/usr/bin/env bash

set -euo pipefail

build_ko() {
    local kernel_version="$1"
    local module_version="$2"

    echo "Building collector module for kernel version ${kernel_version} and module version ${module_version}."

    mkdir -p /scratch/module-src
    local module_src_dir="/scratch/module-src/${module_version}"
    [[ -d "$module_src_dir" ]] || cp -r "/sources/${module_version}" "$module_src_dir"

    local kernel_src_dir="/scratch/kernel-src/${kernel_version}"
    if [[ ! -d "$kernel_src_dir" ]]; then
        rm -rf /scratch/kernel-src/* 2>/dev/null || true
        mkdir -p "$kernel_src_dir"
        tar -C "$kernel_src_dir" -xzf "/bundles/bundle-${kernel_version}.tgz"
    fi

    [[ -f "${kernel_src_dir}/BUNDLE_BUILD_DIR" ]] || {
        echo "No BUNDLE_BUILD_DIR entry found in kernel source bundle!"
        return 1
    }

    local kernel_build_dir
    kernel_build_dir="${kernel_src_dir}/$(cat "${kernel_src_dir}/BUNDLE_BUILD_DIR")"

    cd "$module_src_dir"
    KERNELDIR="$kernel_build_dir" make clean
    KERNELDIR="$kernel_build_dir" make -j 6 all

    collector_ko=collector.ko
    strip -g "$collector_ko"

    [[ -f "${kernel_src_dir}/BUNDLE_UNAME" ]] || {
        echo "No BUNDLE_UNAME entry found in kernel source bundle!"
        return 1
    }

    local kernel_uname
    kernel_uname="$(cat "${kernel_src_dir}/BUNDLE_UNAME")"

    ko_version="$(/sbin/modinfo "$collector_ko" | grep vermagic | tr -s " " | cut -d " " -f 2)"
    if [[ "$ko_version" != "$kernel_uname" ]]; then
        echo "Corrupted probe, KO_VERSION=$ko_version, KERNEL_VERSION=$kernel_uname" >&2
        return 1
    fi

    mkdir -p "/output/${module_version}"
    gzip -c "$collector_ko" >"/output/${module_version}/collector-${kernel_version}.ko.gz"
    rm "$collector_ko"

    # Build eBPF probe, if possible

    if [[ ! -d "${module_src_dir}/bpf" ]]; then
        echo "Module version does not support eBPF probe building, skipping ..."
        return 0
    fi

    # Check kernel version >= 4.14
    kernel_major="$(cat "${kernel_src_dir}/BUNDLE_VERSION")"
    kernel_minor="$(cat "${kernel_src_dir}/BUNDLE_MAJOR")"
    kernel_distro="$(cat "${kernel_src_dir}/BUNDLE_DISTRO")"

    [[ -n "$kernel_major" && -n "$kernel_minor" ]] || {
        echo >&2 "Bundle does not contain major/minor version information!"
        return 1
    }

    # Check if this kernel is from RHEL 7.6 with backported eBPF support
    local rhel76_kernel=false
    if (( kernel_major == 3 && kernel_minor >= 10 )); then
        # RHEL 7.6 detection: distro=="redhat" and kernel build id at least 957
        # Assumption is that RHEL 7.6 will continue to use kernel 3.10
        if [[ "$kernel_distro" == "redhat" ]]; then
            # Extract build id: 3.10.0-957.10.1.el7.x86_64 -> 957
            local rhel_build_id
            rhel_build_id="$(echo "$kernel_uname" | awk -F'[-.]' '{ print $4 }')"
            if (( rhel_build_id >= 957 )); then
                echo "Kernel ${kernel_uname} has backported eBPF support"
                rhel76_kernel=true
            fi
        fi
    fi

    # Check if this module version supports RHEL 7.6 with backported eBPF support
    if [[ "$rhel76_kernel" == true ]]; then
        if ! grep -qRIs "SUPPORTS_RHEL76_EBPF" "${module_src_dir}/bpf/quirks.h"; then
            echo "Module version ${module_version} does not support eBPF on RHEL 7.6"
            return 0
        fi

    # Check kernel version is at least 4.14 (unless RHEL 7.6 kernel detected)
    else
        if (( kernel_major < 4 || (kernel_major == 4 && kernel_minor < 14) )); then
            echo "Kernel version ${kernel_version} does not support eBPF probe building, skipping ..."
            return 0
        fi
    fi

    echo "Building collector eBPF probe for kernel version ${kernel_version} and module version ${module_version}."
    KERNELDIR="$kernel_build_dir" make -j 6 -C bpf

    collector_probe="bpf/probe.o"
    gzip -c "$collector_probe" >"/output/${module_version}/collector-ebpf-${kernel_version}.o.gz"
    rm "$collector_probe"
}

build_kos() {
    while read -a line || [[ "${#line[@]}" -gt 0 ]]; do
        local kernel_version="${line[0]}"
        local module_version="${line[1]}"

        build_ko "$kernel_version" "$module_version"
    done
}

# The input is in the form <kernel-version> <module-version>. Sort it to make sure that we first build all modules
# for a given kernel version before advancing to the next kernel version.
sort | uniq | build_kos
