#!/usr/bin/env bash
set -euo pipefail

#### LICENSING:
#### This file is derived from sysdig, in scripts/build-probe-binaries.
#### Sysdig is licensed under the GNU General Public License v2.
#### This file is not distributed with StackRox code, and is only
#### used during compilation.
#### This file is heavily modified from the original.

#
# This script builds a precompiled version of sysdig-probe for a bunch of kernels
# The precompiled binary is then obtained at runtime by sysdig-probe-loader
# Ideally, the community should expand this stuff with better support
#

build_modules() {
    kernel_directory="$1"
    output_dir="$2"

    cd /sysdig-src
    KERNELDIR="$kernel_directory" \
        make -C driver clean || true

    rm -rf ko-build || true
    mkdir ko-build
    cd ko-build

    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-fno-pie" -DPROBE_NAME=collector -DBUILD_USERSPACE=OFF ..
    KERNELDIR="$kernel_directory" \
        make -j 6 driver

    sysdig_ko=driver/collector.ko
    strip -g "$sysdig_ko"

    ko_version=$(/sbin/modinfo "$sysdig_ko" | grep vermagic | tr -s " " | cut -d " " -f 2)
    output_file="${output_dir}/collector-${ko_version}.ko"

    cp -v "$sysdig_ko" "$output_file"
}

ubuntu_build() {
    if [[ $# -ne 2 ]]; then
        echo "Incorrect arguments to ubuntu_build() ($* given)"
        return 1
    fi

    local specific_deb_file="/packages/$1"
    local all_deb_file="/packages/$2"
    local module_dir="/output/Ubuntu"

    echo "Running an Ubuntu build"
    echo "  specific_deb_file | $specific_deb_file"
    echo "  all_deb_file      | $all_deb_file"
    echo "  module_dir        | $module_dir"

    dpkg -x "$specific_deb_file" ./
    dpkg -x "$all_deb_file" ./

    local kernel_dir="$(ls -1 "$PWD/usr/src" | grep '^linux-headers-.*-[a-z]\+$' | head -n1)"
    echo "  kernel_dir        | $kernel_dir"

    if [[ -z "$kernel_dir" ]]; then
        echo "Blank kernel dir"
        return 1
    fi

    build_modules "$PWD/usr/src/${kernel_dir}" "$module_dir"
}

rhel_build() {
    if [[ $# -ne 1 ]]; then
        echo "Incorrect arguments to rhel_build() ($* given)"
        return 1
    fi

    local rpm_file="/packages/$1"
    local module_dir="/output/RedHat"

    echo "Running a RedHat build"
    echo "  rpm_file   | $rpm_file"
    echo "  module_dir | $module_dir"

    rpm2cpio "$rpm_file" | cpio -idm

    local kernel_dir="$(ls -1 "$PWD/usr/src/kernels" | head -n1)"
    echo "  kernel_dir | $kernel_dir"

    if [[ -z "$kernel_dir" ]]; then
        echo "Blank kernel dir"
        return 1
    fi

    build_modules "$PWD/usr/src/kernels/${kernel_dir}" "$module_dir"
}

debian_build() {
    if [[ $# -lt 2 ]] || [[ $# -gt 3 ]]; then
        echo "Incorrect arguments to debian_build() ($* given)"
        return 1
    fi

    local kbuild_deb_file="/packages/$1"
    local header_deb_file="/packages/$2"
    local common_deb_file=""
    if [[ $# -eq 3 ]]; then
	    common_deb_file="/packages/$3"
    fi
    local module_dir="/output/Debian"

    echo "Running a Debian build"
    echo "  kbuild_deb_file  | $kbuild_deb_file"
    echo "  header_deb_file  | $header_deb_file"
    echo "  common_deb_file  | $common_deb_file"
    echo "  module_dir       | $module_dir"

    dpkg -x "$header_deb_file" .
    dpkg -x "$kbuild_deb_file" .
    if [[ -n "$common_deb_file" ]]; then
        dpkg -x "$common_deb_file" .
    fi

    local kernel_dir="$(ls -1 "$PWD/usr/src"  | grep '^linux-headers-' | grep -v common | head -n1)"
    local commons_dir="$(ls -1 "$PWD/usr/src" | grep '^linux-headers-' | grep    common | head -n1)"

    echo "  kernel_dir       | $kernel_dir"
    echo "  commons_dir      | $commons_dir"

    if [[ -z "$kernel_dir" ]]; then
        echo "Blank kernel dir"
        return 1
    fi

    if [[ -n "$common_deb_file" && -z "$kernel_dir" ]]; then
        echo "Blank common dir"
        return 1
    fi

    build_dir="$(find  lib/modules -name build  -type l)"
    source_dir="$(find lib/modules -name source -type l)"

    # Fix symbolic links
    unlink "$build_dir"
    ln -sr "${PWD}/usr/src/${kernel_dir}" "$build_dir"

    # Fix symbolic links for common
    if [[ -n "$common_deb_file" ]]; then
        unlink "$source_dir"
        ln -sr "${PWD}/usr/src/${commons_dir}" "$source_dir"
    fi

    # Hack Makefile
    sed -i -e 's/@://' \
	    -e 's|$(cmd) %.*$|$(cmd) : all|' \
	    "${PWD}/usr/src/${kernel_dir}/Makefile"

    # Hack Makefile for common
    if [[ -n "$common_deb_file" ]]; then
        sed -i -e '0,/MAKEARGS.*$/s__MAKEARGS := -C '"${PWD}/usr/src/${commons_dir} O=${PWD}/usr/src/${kernel_dir}"_ \
            "${PWD}/usr/src/${kernel_dir}/Makefile"
    fi

    build_modules "$PWD/usr/src/${kernel_dir}" "$module_dir"
}

coreos_build() {
    if [[ $# -ne 1 ]]; then
        echo "Incorrect arguments to coreos_build() ($* given)"
        return 1
    fi

    local bundle_file="/packages/$1"
    local module_dir="/output/CoreOS"

    echo "Running a CoreOS build"
    echo "  bundle_file | $bundle_file"
    echo "  module_dir  | $module_dir"

    tar --strip-components=2 -xf "$bundle_file" --wildcards 'usr/boot/config*'
    tar --strip-components=1 -xf "$bundle_file" 'lib/modules'

    # https://groups.google.com/forum/#!topic/coreos-dev/Z8Q7sIy6YwE
    sed -i 's/CONFIG_INITRAMFS_SOURCE=""/CONFIG_INITRAMFS_SOURCE="bootengine.cpio"\nCONFIG_INITRAMFS_ROOT_UID=0\nCONFIG_INITRAMFS_ROOT_GID=0/' config
    sed -i 'N;s/\(CONFIG_RD_LZ4=.\)\n\(CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=\)/\1\nCONFIG_INITRAMFS_COMPRESSION=".gz"\n\2/' config

    local kernel_dir="$(ls -1 "$PWD/modules" | head -n1)"
    echo "  kernel_dir  | $kernel_dir"

    if [[ -z "$kernel_dir" ]]; then
        echo "Blank kernel dir"
        return 1
    fi

    build_modules "$PWD/modules/${kernel_dir}/build" "$module_dir"
}

main() {
    if [[ $# -lt 2 ]]; then
        echo "Insufficient arguments"
        return 1
    fi

    distro="$1"
    shift
    files="$@"

    rm -rf /scratch/tmp || true
    mkdir -p /scratch/tmp
    cd /scratch/tmp

    mkdir -p \
        /output/Ubuntu \
        /output/RedHat \
        /output/Debian \
        /output/CoreOS

    case "$distro" in
        Ubuntu)
            echo Building Ubuntu
            ubuntu_build $files
        ;;

        RedHat)
            echo Building RHEL
            rhel_build $files
        ;;

        Debian)
            echo Building Debian
            debian_build $files
        ;;

        CoreOS)
            echo Building CoreOS
            coreos_build $files
        ;;

        *)
            echo Unknown distro.
            return 1
        ;;
    esac
}

main "$@"
