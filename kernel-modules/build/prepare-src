#!/usr/bin/env bash

set -eo pipefail

die() {
    echo >&2 "$@"
    exit 1
}

[[ -n "$SCRATCH_DIR" ]] || die "SCRATCH_DIR is not set"
[[ -n "$DRIVER_DIR" ]] || die "DRIVER_DIR is not set"
[[ -n "$OUTPUT_DIR" ]] || die "OUTPUT_DIR is not set"
[[ -n "$LEGACY_DIR" ]] || die "LEGACY_DIR is not set"

DOCKERIZED=${DOCKERIZED:-0}
DRIVER_SCRATCH="${SCRATCH_DIR}/src"
BUILD_SCRATCH="${SCRATCH_DIR}/cmake-build"

modfiles0() (
    local dir="${1:-${DRIVER_SCRATCH}/driver}"
    cd "$dir"
    find . -type f \( -name 'Makefile' -o -name '*.c' -o -name '*.h' \) -print0 \
        | LC_ALL=C sort -z
)

get_module_version() (
    # MODULE_VERSION would be more readable, but it would clash with a
    # variable exported from our CI. Beware!
    echo "$M_VERSION"
)

archive_dockerized() {
    local source_archive

    source_archive="${OUTPUT_DIR}/${module_version}/"
    if [[ ! -d "$source_archive" ]]; then
        mkdir -p "$source_archive" "$source_archive"/bpf

        cp ./*.c ./*.h Makefile "$source_archive"
        cp bpf/*.c bpf/*.h bpf/Makefile "$source_archive"/bpf
        if [[ -d "./collector-probe" ]]; then
            mkdir "$source_archive"/collector-probe
            cp collector-probe/*.c collector-probe/Makefile "$source_archive"/collector-probe
        fi
        echo "Driver source archive - $source_archive"
        ls -alh "$source_archive"
    else
        echo "Duplicate version '${module_version}' detected, skipping..."
    fi
}

archive_ci() {
    local source_archive

    source_archive="${OUTPUT_DIR}/${module_version}.tgz"
    if [[ -s "$source_archive" ]]; then
        exit 0
    fi

    modfiles0 . | xargs -0 tar cfvz "$source_archive" >&2
}

archive_files() {
    if ((DOCKERIZED)); then
        archive_dockerized
    else
        archive_ci
    fi
}

rm -rf "$DRIVER_SCRATCH" "$BUILD_SCRATCH" 2> /dev/null || true
mkdir -p "$DRIVER_SCRATCH" "$BUILD_SCRATCH"
cp -r "${DRIVER_DIR}/." "${DRIVER_SCRATCH}"

cd "$BUILD_SCRATCH"

# Note: inclusion of PROBE_NAME and DRIVER_NAME in this command is to support both
# new probes that don't use PROBE_NAME and older probes that do.
cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_C_FLAGS="-fno-pie" \
    -DPROBE_NAME=collector \
    -DDRIVER_NAME=collector \
    -DDRIVER_DEVICE_NAME=collector \
    -DBUILD_USERSPACE=OFF \
    -DBUILD_DRIVER=ON \
    -DENABLE_DKMS=OFF \
    -DBUILD_BPF=ON \
    -DCREATE_TEST_TARGETS=OFF \
    -DBUILD_LIBSCAP_MODERN_BPF=ON \
    -DMODERN_BPF_EXCLUDE_PROGS='^(openat2|ppoll|setsockopt|getsockopt|clone3|io_uring_setup|nanosleep)$' \
    "$DRIVER_SCRATCH"
# Copy a few files generated by cmake to the source directory.
cp "${BUILD_SCRATCH}/driver/src/Makefile" "${DRIVER_SCRATCH}/driver/Makefile"
cp "${BUILD_SCRATCH}/driver/src/driver_config.h" "${DRIVER_SCRATCH}/driver/driver_config.h"

if [[ -d "${LEGACY_DIR}/kernel-modules/probe" ]]; then
    mkdir -p "${DRIVER_SCRATCH}/driver/collector-probe"
    cp "${LEGACY_DIR}/kernel-modules/probe/Makefile" "${DRIVER_SCRATCH}/driver/collector-probe/Makefile"
    cp "${LEGACY_DIR}/kernel-modules/probe/collector_probe.c" "${DRIVER_SCRATCH}/driver/collector-probe/collector_probe.c"
fi

cd "${DRIVER_SCRATCH}/driver"
module_version="$(get_module_version .)"
echo "$module_version"

archive_files
