syntax = "proto3";

import "proto/data/common.proto";
import "proto/api/private/director/orchestrator_resource_service.proto";

package director;

option go_package = "director";

// A specification of a service for the launcher, in serialized form (corresponding to the Service struct in
// pkg/types/launcher/api).
message SerializedServiceSpec {
    // The name of the service.
    string service_name = 1;
    // The raw bytes of the service spec object (without the name), in gob encoding (cf. encoding/gob).
    bytes service_gob = 2;
}

// A generic proto wrapper for a binary encoded Golang object.
message SerializedResponse {
    // The raw bytes of the object, in gob encoding (cf. encoding/gob)
    bytes gob = 1;
}

// The body of the launcher command (excluding metadata such as sequence ID).
message LauncherCommandBody {
    message GetNodes {}
    message GetPlatform {}
    message GetServiceContainers {
        string service_name = 1;
    }
    message GetServiceEndpoints {
        string service_name = 1;
    }
    message GetServiceHostname {
        string service_name = 1;
        string network = 2;
    }
    message NewService {
        SerializedServiceSpec service = 1;
    }
    message ScaleService {
        SerializedServiceSpec service = 1;
    }
    message DeleteService {
        SerializedServiceSpec service = 1;
    }
    message DeleteAllServices {}
    message GetAllServiceEndpoints {}
    message GetStatus {}
    message GetAssets {}
    message GetEndpointHealth {
        repeated string endpoints = 1;
    }

    // The actual command.
    oneof cmd {
        GetNodes get_nodes = 1;
        GetPlatform get_platform = 2;
        GetServiceContainers get_service_containers = 3;
        GetServiceEndpoints get_service_endpoints = 4;
        GetServiceHostname get_service_hostname = 5;
        NewService new_service = 6;
        ScaleService scale_service = 7;
        DeleteService delete_service = 8;
        DeleteAllServices delete_all_services = 9;
        GetAllServiceEndpoints get_all_service_endpoints = 10;
        GetStatus get_status = 11;
        GetAssets get_assets = 12;
        GetEndpointHealth get_endpoint_health = 13;
    }
}

// A single command sent from the director to the launcher.
message LauncherCommand {
    // The sequence ID for this message. This is used for correlating commands and responses. Note that it is the
    // responsibility of the party sending the command (i.e., the director) to make sure that this is unique; the
    // launcher treats this number in a completely opaque way.
    int64 sequence_id = 1;

    // The body of the command.
    LauncherCommandBody body = 2;
}

message LauncherPlatform {
    string orchestrator = 1;
    string version = 2;
    string api_version = 3;
}

// An advertisement message sent by the launcher, to identify itself to the director.
message LauncherAdvertisement {
    data.UUID cluster_id = 1;
    LauncherPlatform platform = 2;
    bool streams_resources = 3;
    string instance_id = 4;
}

// The body of a launcher command response, without metadata such as sequence ID (non-error case only).
message LauncherCommandResponseBody {
    message GetNodes {
        repeated string nodes = 1;
    }
    message GetPlatform {
        LauncherPlatform platform = 1;
    }
    message GetServiceContainers {
        SerializedResponse response = 1;
    }
    message GetServiceEndpoints {
        SerializedResponse response = 1;
    }
    message GetServiceHostname {
        string hostname = 1;
    }
    message NewService {}
    message ScaleService {}
    message DeleteService {}
    message DeleteAllServices {}
    message GetAllServiceEndpoints {
        SerializedResponse response = 1;
    }
    message GetStatus {
        string error_message = 1;
    }
    message GetAssets {
        SerializedResponse response = 1;
    }
    message GetEndpointHealth {
        SerializedResponse response = 1;
    }

    // The actual response.
    oneof resp {
        GetNodes get_nodes = 1;
        GetPlatform get_platform = 2;
        GetServiceContainers get_service_containers = 3;
        GetServiceEndpoints get_service_endpoints = 4;
        GetServiceHostname get_service_hostname = 5;
        NewService new_service = 6;
        ScaleService scale_service = 7;
        DeleteService delete_service = 8;
        DeleteAllServices delete_all_services = 9;
        GetAllServiceEndpoints get_all_service_endpoints = 10;
        GetStatus get_status = 11;
        GetAssets get_assets = 12;
        GetEndpointHealth get_endpoint_health = 13;
    }
}

// A response sent by the launcher after it received a command.
message LauncherCommandResponse {
    message Error {
        string message = 1;
    }

    // The ID matching the received command's sequence ID.
    int64 sequence_id = 1;

    oneof resp {
        // A non-error response to the given command.
        LauncherCommandResponseBody body = 2;
        // An error response.
        Error error = 3;
    }
}

// A message sent from the launcher to the director.
message LauncherMessage {
    oneof msg {
        // The initial advertisement of the launcher. This must be the initial message in the stream, and must present
        // a valid (i.e., known to the director) cluster ID. It must only be sent once in every stream.
        LauncherAdvertisement advertisement = 1;
        // A response to a command sent by the director.
        LauncherCommandResponse command_response = 2;
        // An update to the resources in this cluster.
        OrchestratorResourceStreamMessage resource_update = 3;
    }
}

// This is a detail that is sent along with a GRPC error to indicate that the launcher should fatal (and, optionally,
// delete all StackRox services).
message FatalLauncherError {
    bool delete_services = 1;
}

// The service establishing the control plane between launcher and director.
service LauncherControlService {
    rpc Communicate(stream LauncherMessage) returns (stream LauncherCommand);
}
