syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "proto/api/v1/pagination.proto";

package v1;

message ApplicationLabelKeyResponse {
    // The label key by which services are grouped into applications.
    string label = 1;
}

message ApplicationLabelKeyRequest {
// The label key by which services are grouped into applications.
    string label = 1 [(validator.field) = {regex: "^[a-zA-Z0-9.\\-_\\/]+$"}];
}

message ApplicationLabelKeyPreviewRequest {
    string label = 1 [(validator.field) = {regex: "^[a-zA-Z0-9.\\-_\\/]+$"}];
    // Whether to also include inactive services/applications in the response.
    bool inactive = 2;
}

message ApplicationsRequest {
    repeated string namespace = 1;
    repeated string name = 2;
    PaginationRequest pagination = 3;
    repeated bool stackrox = 4;
    repeated bool inactive = 5;
    repeated bool has_custom_app_name = 6;
}

// Next available tag: 6
message Application {
    string name = 1;
    string namespace = 2;
    string cluster_id = 5;
    int32 services_count = 3;
    bool has_custom_app_name = 4;
}

message ApplicationsResponse {
    repeated Application results = 1;
    PaginationResponse pagination = 2;
}

message ApplicationLabelKeyPreviewResponse {
    repeated NamespaceLabelKeyPreview namespaces = 1;
}

message NamespaceLabelKeyPreview {
    string namespace = 1;
    repeated ApplicationLabelKeyPreview applications = 2;
}

message ApplicationLabelKeyPreview {
    string application = 1;
    repeated string services = 2;
}

// APIs for managing User Applications.
service ApplicationService {
    // Get the configured application label key.
    rpc GetApplicationLabelKey(google.protobuf.Empty) returns (ApplicationLabelKeyResponse) {
        option (google.api.http) = {
            get: "/v1/applications/labelkey"
        };
    }

    // Set the application label key.
    rpc SetApplicationLabelKey(ApplicationLabelKeyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/applications/labelkey"
            body: "*"
        };
    }

    // Preview the application grouping if the provided label key were used.
    rpc PreviewApplicationLabelKey(ApplicationLabelKeyPreviewRequest) returns (ApplicationLabelKeyPreviewResponse) {
        option (google.api.http) = {
            get: "/v1/applications/labelkey/{label}"
        };
    }

    // Get the applications matching the specified criteria.
    rpc GetApplications(ApplicationsRequest) returns (ApplicationsResponse) {
        option (google.api.http) = {
            get: "/v1/applications"
        };
    }
}