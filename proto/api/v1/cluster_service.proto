syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "proto/api/v1/pagination.proto";
import "google/protobuf/timestamp.proto";

package v1;


enum ClusterType {
    GENERIC_CLUSTER    = 0;
    KUBERNETES_CLUSTER = 1;
    OPENSHIFT_CLUSTER  = 2;
    SWARM_CLUSTER      = 3;
    DOCKER_EE_CLUSTER  = 4;
}

enum ClusterState {
    NOT_AVAILABLE      = 0;
    ONLINE             = 1;
    OFFLINE            = 2;
}

message Cluster {
    ClusterConfig config          = 1;
    ClusterStatus status          = 2;
}

message ClusterConfig {
    string  id                    = 1;
    string name                   = 2;

    v1.ClusterType type           = 3;
    bool main                     = 4;
}

message ClusterStatus {
    google.protobuf.Timestamp last_contact  = 1;
    v1.ClusterState state                   = 2;
}

message AddClusterRequest {
    string name             = 1;
}

message AddClusterResponse {
    Cluster cluster         = 1;
}

message GetClusterRequest {
    string name     = 1;
}
message GetClusterResponse {
    Cluster cluster       = 1;
}


message GetClustersResponse {
    repeated Cluster clusters       = 1;
    PaginationResponse pagination   = 2;
}

message RemoveClusterRequest {
    string name     = 1;
}

message KillClusterRequest {
    string id = 1;
}

message GetClusterDeploymentInfoRequest {
    string name = 1;
}

message GetClusterDeploymentInfoResponse {
    ClusterDeploymentInfo deployment_info = 1;
}

message ClusterDeploymentInfo {
    message TLSInfo {
        bytes ca_cert_pem = 1;
        bytes cert_pem = 2;
        bytes key_pem = 3;
    }

    message ServiceProxyRequirement {
        string service_name = 1;
        repeated string endpoints = 2;
    }

    string cluster_id = 1;
    TLSInfo launcher_tls_info = 2;
    repeated ServiceProxyRequirement proxy_requirements = 3;
    string launcher_tag = 4;
}

message CreateClusterRequest {
    string  id          = 1;
    string name         = 2;
    v1.ClusterType type = 3;
}

message ModifyClusterRequest {
    string  id          = 1;
    string name         = 2;
    v1.ClusterType type = 3;
}

// APIs for accessing and managing clusters.
service ClusterService {
    // Create a cluster
    rpc AddCluster (AddClusterRequest) returns (AddClusterResponse) {
        option (google.api.http) = {
           post: "/v1/clusters"
           body: "*"
       };
    }

    // Kill a cluster (i.e., remove all stackrox services in the given cluster).
    rpc KillCluster (KillClusterRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/v1/cluster-kill/{id}"
        };
    }

    // Remove a cluster
    rpc RemoveCluster (RemoveClusterRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
          delete: "/v1/clusters/{name}"
      };
    }

    // Get all clusters
    rpc GetClusters (google.protobuf.Empty) returns (GetClustersResponse) {
        option (google.api.http) = {
            get: "/v1/clusters"
        };
    }

    // Get cluster by name
    rpc GetCluster (GetClusterRequest) returns (GetClusterResponse) {
        option (google.api.http) = {
            get: "/v1/clusters/{name}"
       };
    }

    rpc GetClusterDeploymentInfo (GetClusterDeploymentInfoRequest) returns (GetClusterDeploymentInfoResponse) {
        option (google.api.http) = {
           get: "/v1/cluster-deployment/{name}"
       };
    }

    // CreateCluster creates a new cluster with the specified ID.
    rpc CreateCluster (CreateClusterRequest) returns (google.protobuf.Empty) {
    }

    // ModifyCluster modifies an existing cluster by its ID.
    rpc ModifyCluster (ModifyClusterRequest) returns (google.protobuf.Empty) {
    }

}