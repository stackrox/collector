syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "proto/api/v1/pagination.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

package v1;
enum Operator {
    OR = 0;
    AND = 1;
}

enum Severity {
    DEFAULT = 0;
    LOW = 1;
    MEDIUM = 2;
    HIGH = 3;
    CRITICAL = 4;
}

enum Enforcement {
    ALERT = 0;
    reserved 1, 2, 3; // Formerly BLOCK, PAUSE, QUARANTINE
    KILL = 4;
}

enum TargetCategory {
    TARGET_UNSUPPORTED = 0;
    TARGET_SERVICE = 1;
    TARGET_APPLICATION = 2;
    TARGET_NAMESPACE = 3;
    TARGET_CLUSTER = 4;
}

enum Condition {
    EQUALS = 0;
    NOT_EQUALS = 1;
}

enum EnforcementControl {
    DETECTION = 0;
    PREVENTION = 1;
    RESPONSE = 2;
}

message DetectionPoliciesRequest {
    // Unique name of the policy
    repeated string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    // Is the policy an Attack Profile
    repeated bool attack = 2;
    // Is the policy currently enabled
    repeated bool enabled = 3;
    // The user who created the policy. Default values are User and StackRox"
    repeated string created_by = 4;

    PaginationRequest pagination = 15;
}

message DetectionPoliciesResponse {
    repeated DetectionPolicy results = 1;
    PaginationResponse pagination = 2;
}

message DetectionPolicy {
    string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    string summary = 2;
    google.protobuf.BoolValue enabled = 3;
    google.protobuf.BoolValue attack = 4;
    repeated PhaseDefinition phases = 5;
    int64 last_updated = 6;
    string created_by = 7;

    message EnforcementAction {
        Enforcement enforcement = 1;
        EnforcementControl control = 2;
    }
    repeated EnforcementAction enforceability = 15;
}

message PatchDetectionPolicyRequest {
    string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    oneof set_enabled {
        bool enabled = 2;
    }
}

message PhaseDefinition {
    string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    EventFormula event_formula = 2 [(validator.field) = {msg_exists : true}];
}

message EventSpecifier {
    string namespace = 1;
    string category = 2;
    string name = 3;
    string field = 4;
    string transformation = 5;
    // Minimum is the minimum number of matching events that must be present for this EventSpecifier to be satisfied.
    // This field is a string so that 0 can be distinguished from an unset value.
    string minimum = 6;
}

message EventFormula {
    Operator operator = 1;
    repeated EventSpecifier events = 2;
    repeated EventFormula event_formulas = 3;
}

message EnforcementPoliciesRequest {
    // Unique name of the policy
    repeated string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    // Is the policy currently enabled
    repeated bool enabled = 2;
    // Is this policy globally enforced? If true, target profile and target group are not needed
    repeated bool global = 3;
    // Enforcement action when this policy is violated
    repeated Enforcement enforcement = 4;
    reserved 5; // Formerly syscall profile
    // Name of the target profile to apply to this policy
    repeated string target_profile = 6;
    // Custom alert severity for this policy. If not specified, alerts will be raised with the event's default severity
    repeated Severity severity = 7;
    // The user who created the policy. Default values are User and StackRox"
    repeated string created_by = 8;

    PaginationRequest pagination = 15;
}

message EnforcementPoliciesResponse {
    repeated EnforcementPolicy results = 1;
    PaginationResponse pagination = 2;
}

message DetectionAction {
    repeated Enforcement enforcement = 1;
    Severity severity = 2;
    reserved 3; // Formerly syscall profile
}

message EnforcementPolicy {
    string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    string summary = 2;
    google.protobuf.BoolValue enabled = 3;
    google.protobuf.BoolValue global = 4;
    map<string, DetectionAction> detection_profiles = 5;
    string target_profile = 6;
    TargetGroup target_group = 7;
    int64 last_updated = 10;
}

message PatchEnforcementPolicyRequest {
    string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    oneof set_enabled {
        bool enabled = 2;
    }
    map<string, DetectionAction> detection_profiles = 3;
}

message TargetProfilesRequest {
    // Unique name of the target profile
    repeated string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    PaginationRequest pagination = 2;
}

message TargetProfilesResponse {
    repeated TargetProfile results = 1;
    PaginationResponse pagination = 2;
}

message TargetCategoryResponse {
    repeated string categories = 1;
    PaginationResponse pagination = 2;
}

message GetTargetsRequest {
    TargetCategory type = 1;
    string search = 2;
    PaginationRequest pagination = 10;
}

message ScopeTarget {
    // ID is an opaque identifier that the caller should use to include or
    // exclude this scope target to a policy.
    string id = 1;
    string type = 2;
    string name = 3;
    // Scope is the path to a target, which can look like "cluster/namespace/application" if this target was a service.
    string scope = 4;
}

message GetTargetsResponse {
    repeated ScopeTarget results = 1;
    PaginationResponse pagination = 10;
}

message TargetProfile {
    string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    string description = 2;
    TargetGroup target_group = 3;
    int64 last_updated = 4;
}

message PatchTargetProfileRequest {
    string name = 1 [(validator.field) = {regex: "^[a-zA-Z0-9][a-zA-Z0-9 _.-]*$"}];
    string description = 2;
    TargetGroup target_group = 3;
}

message TargetGroup {
    Operator operator = 1;
    repeated Target targets = 2;
    repeated TargetGroup target_groups = 3;
}

message Target {
    TargetCategory category = 1;
    Condition condition = 2;
    string value = 3;
    string name = 4;
    string scope = 5;
}

message UpdateRequest {
    // Detection sequence number
    int64 detection_seq_num = 1;
    // Enforcement sequence number
    int64 enforcement_seq_num = 2;
    // Target sequence number
    int64 target_seq_num = 3;
}

message UpdateResponse {
    int64 detection_seq_num = 1;
    int64 enforcement_seq_num = 2;
    int64 target_seq_num = 3;
    PolicyNameAndTimestampMap detection_policies = 4;
    PolicyNameAndTimestampMap enforcement_policies = 5;
    PolicyNameAndTimestampMap target_profiles = 6;
}

message PolicyNameAndTimestampMap {
    map<string, int64> results = 1;
}

// APIs for managing StackRox security policies
service PolicyService {
    // Get policy updates
    rpc GetUpdates (UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            get: "/v1/policies/updates"
        };
    }

    // Get detection policies
    rpc GetDetectionPolicies (DetectionPoliciesRequest) returns (DetectionPoliciesResponse) {
        option (google.api.http) = {
            get: "/v1/policies/detection"
        };
    }

    // Get enforcement policies
    rpc GetEnforcementPolicies (EnforcementPoliciesRequest) returns (EnforcementPoliciesResponse) {
        option (google.api.http) = {
            get: "/v1/policies/enforcement"
        };
    }

    // Get target profiles
    rpc GetTargetProfiles (TargetProfilesRequest) returns (TargetProfilesResponse) {
        option (google.api.http) = {
            get: "/v1/policies/target"
        };
    }

    // Get target categories
    rpc GetTargetCategories (google.protobuf.Empty) returns (TargetCategoryResponse) {
        option (google.api.http) = {
            get: "/v1/policies/target/categories"
        };
    }

    // GetTargets returns the list of scope targets for the given type
    // optionally filtered by the given search string.
    rpc GetTargets (GetTargetsRequest) returns (GetTargetsResponse) {
        option (google.api.http) = {
            get: "/v1/policies/targets"
        };
    }

    // POST detection policy
    rpc PostDetectionPolicy (DetectionPolicy) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/policies/detection"
            body: "*"
        };
    }

    // POST enforcement policy
    rpc PostEnforcementPolicy (EnforcementPolicy) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/policies/enforcement"
            body: "*"
        };
    }

    // POST target profile
    rpc PostTargetProfile (TargetProfile) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/policies/target"
            body: "*"
        };
    }

    // Patch detection policy
    rpc PatchDetectionPolicy (PatchDetectionPolicyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/policies/detection/{name}"
            body: "*"
        };
    }

    // Patch target profile
    rpc PatchTargetProfile (PatchTargetProfileRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/policies/target/{name}"
            body: "*"
        };
    }

    // Delete detection policy
    rpc DeleteDetectionPolicy (DetectionPolicy) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/policies/detection/{name}"
        };
    }

    // Delete enforcement policy
    rpc DeleteEnforcementPolicy (EnforcementPolicy) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/policies/enforcement/{name}"
        };
    }

    // Delete target profile
    rpc DeleteTargetProfile (TargetProfile) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/policies/target/{name}"
        };
    }

    // Patch enforcement policy
    rpc PatchEnforcementPolicy (PatchEnforcementPolicyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/policies/enforcement/{name}"
            body: "*"
        };
    }

    // Put detection policy
    rpc PutDetectionPolicy (DetectionPolicy) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/policies/detection/{name}"
            body: "*"
        };
    }

    // Put enforcement policy
    rpc PutEnforcementPolicy (EnforcementPolicy) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/policies/enforcement/{name}"
            body: "*"
        };
    }

    // Put target profile
    rpc PutTargetProfile (TargetProfile) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/policies/target/{name}"
            body: "*"
        };
    }
}
