syntax = "proto3";

option go_package = "v1";
option cc_enable_arenas = true;

import "google/protobuf/timestamp.proto";
import "api/v1/empty.proto";

package v1;

// A single message in the event stream between Collector and Sensor.
message SignalStreamMessage {
    oneof msg {
        // The first message in every stream that registers Collector with Sensor.
        CollectorRegisterRequest collector_register_request = 1;

        // A signal event observed by Collector.
        Signal signal                                       = 2;
    }
}

// A request message sent by collector to register with Sensor.
message CollectorRegisterRequest {
    // The hostname on which collector is running.
    string hostname    = 1;

    // A unique identifier for an instance of collector.
    string instance_id = 2;
}

// Signal message tracks process and network activity.
// Specifically, process launches and network connects/accepts.
message Signal {
    oneof signal {
        ProcessSignal process_signal = 1;
    }
}

// ProcessSignal tracks process launches.
message ProcessSignal {
    // A unique UUID for identifying the message
    // We have this here instead of at the top level
    // because we want to have each message to be
    // self contained.
    string id                      = 1;

    // ID of container associated with this process
    string container_id            = 2;

    // Process creation time
    google.protobuf.Timestamp time = 3;

    // Process name
    string name                    = 4;

    // Process arguments
    string args                    = 5;

    // Process executable file path
    string exec_file_path          = 6;

    // Host process ID
    uint32 pid                     = 7;

    // Real user ID
    uint32 uid                     = 8;

    // Real group ID
    uint32 gid                     = 9;
}

// A Sensor service that allows Collector to push Signal messages
service SignalService {
    rpc PushSignals (stream SignalStreamMessage) returns (Empty);
}
