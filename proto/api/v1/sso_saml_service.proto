syntax = "proto3";

option go_package = "v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "proto/api/v1/pagination.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

package v1;

message ProviderConfig {
    // provider is the only mandatory field
    string provider = 1 [(validator.field) = {msg_exists: true, regex: "^\\w+$", length_gt: 1, length_lt: 64, human_error: "provider name must contain up to 64 letters and numbers with no other special characters"}];
    // All other fields can be left nil, which is distinct from empty/false/zero value
    // If a field is not present, it is not inserted/updated.
    // We use value wrappers to enable messages to allow a nil value.
    // Otherwise all of the bools would default to false on every update!
    // Technically we don't need a value wrapper on the strings, as an empty string is always an invalid value.
    // It's nicer as an API client to omit a field rather than respecify every string on every update.
    google.protobuf.StringValue sso_url = 2 [(validator.field) = {length_gt: 8, length_lt: 2048}];
    google.protobuf.StringValue provider_cert = 3 [(validator.field) = {length_gt: 8, length_lt: 4096}];
    google.protobuf.StringValue provider_issuer = 4 [(validator.field) = {length_gt: 1, length_lt: 2048}];
    oneof set_auto_map_attributes {
        AutoMapAttributes auto_map_attributes = 5;
    }
    google.protobuf.BoolValue sign_request = 6;
    reserved 7; // Previously used for require_tls.
    google.protobuf.BoolValue enabled = 8;
    reserved 9; // Previously used for sign_assertion.
    reserved 10; // Previously used for sign_response.
    google.protobuf.StringValue provider_hostname = 11 [(validator.field) = {length_gt: 1, length_lt: 2048}];
    google.protobuf.Int64Value session_timeout = 12;
    google.protobuf.StringValue metadata_url = 13 [(validator.field) = {length_gt: 1, length_lt: 2048}];
    // typically only metadata URL or raw are used; not both. todo @ben split these into separate requests or use OneOf
    // see: https://developers.google.com/protocol-buffers/docs/proto#oneof
    // Using a high number in anticipation of deprecation. See https://developers.google.com/protocol-buffers/docs/proto#assigning-tags
    google.protobuf.StringValue metadata_raw = 64 [(validator.field) = {length_gt: 1, length_lt: 2048}];
}

message ProviderConfigRequest {
    //These are the parameters by which one may search for ProviderConfigs; we do not need to search by every field.
    repeated string provider = 1;
    repeated string sso_url = 2;
    repeated string provider_issuer = 4;
    repeated string enabled = 8;
    // provider_hostname is the service provider host, and optionally, port, expressed as host{:port}
    repeated string provider_hostname = 11;
    repeated string metadata_url = 13;
}

message AutoMapAttributes {
    repeated AutoMapAttribute attributes = 1;
}

message AutoMapAttribute {
    string name = 1 [(validator.field) = {length_gt: 0, length_lt: 2048}];
    bool case_sensitive = 2;
}

message ProviderRequest {
    string provider = 1;
}

message LoginLocation {
    string location = 1;
}

message ProviderNames {
    repeated string providers = 1;
}

message ConfigResponse {
    repeated ProviderConfig results = 1;
    PaginationResponse pagination = 2;
}

// APIs for managing SSO providers and configuration settings
service SAMLService {
    // Request an SSO Login URL per specified provider.
    // Note: does not send a redirect. Instead Portal should redirect the browser to this location.
    rpc Login(ProviderRequest) returns (LoginLocation) {
        option (google.api.http).get = "/v1/sso/saml/login";
    }

    // Get all providers with full configuration details.
    rpc ListProviders(ProviderConfigRequest) returns (ConfigResponse) {
        option (google.api.http).get = "/v1/sso/saml/provider";
    }

    // Remove a provider
    rpc DeleteProvider(ProviderRequest) returns (google.protobuf.Empty) {
        option (google.api.http).delete = "/v1/sso/saml/provider";
    }

    // Add or update a provider's configuration. Provider name is the primary key.
    rpc ModifyProvider(ProviderConfig) returns (google.protobuf.Empty) {
        //todo @b - PUT/PATCH is more appropriate. Using POST to preserve existing functionality during gRPC conversion.
        option (google.api.http) = {
            post: "/v1/sso/saml/provider"
            body: "*"
        };
    }

    // Get all providers by name only.
    rpc ListProviderNames(google.protobuf.Empty) returns (ProviderNames) {
        option (google.api.http).get = "/v1/sso/saml/provider/names";
    }
}