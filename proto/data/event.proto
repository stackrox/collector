syntax = "proto3";

import "proto/data/common.proto";
import "proto/data/container_summary.proto";
import "proto/data/file_summary.proto";
import "proto/data/flow_summary.proto";
import "proto/data/process_summary.proto";

package data;

option java_outer_classname = "EventProtos";

// next field is 16
message Event {
    UUID id = 1;
    int64 timestamp_ns = 2;
    string container_short_id = 3;
    UUID cluster_id = 15;

    enum Namespace {
        UNDEFINED_NAMESPACE = 0;
        FILE                = 1;    // file-detector event
        FLOW                = 2;    // flow-detector event
        FILTER              = 3;    // Event that traces back to a filter
        ML_FLOW             = 4;    // ML event that traces back to a flow-based vectorizer feature (as of 1.3)
        ML_FILE             = 5;    // ML event that traces back to a file-based vectorizer feature (as of 1.3)
        CONTAINER           = 6;    // container-detector event
        PROCESS             = 7;    // process-detector event
        ML_PROCESS          = 8;    // ML event that traces back to a process-based vectorizer feature
        ML_CONTAINER        = 9;    // ML event that traces back to a container-based vectorizer feature
    }
    Namespace namespace = 4;

    message Context {
        oneof context_oneof {
            FileSummary      file_summary      = 1;
            FlowSummary      flow_summary      = 2;
            ContainerSummary container_summary = 3;
            ProcessSummary   process_summary   = 4;
        }
    }
    Context context = 5;

    string name = 6;
    string category = 7;                        // filter category for existing events, rule template for new events
    string classification = 8;                  // event classification {benign, anomalous, malicious}
    string model = 9;                           // the model that was used to surface this event
    string description = 10;                    // report for existing events
    enum Severity {
        UNDEFINED_SEVERITY = 0;
        LOW = 1;
        MEDIUM = 2;
        HIGH = 3;
        CRITICAL = 4;
    }
    Severity severity = 11;
    double confidence = 12;

    message DetectorServiceRule {
         UUID id = 1;
         string name = 2;
         string service = 3;
         UUID template_id = 4;
         Severity severity = 5;
         map<string, string> settings = 6;
    }
    DetectorServiceRule rule = 13;

    message Evidence {
        message Values {
            double baseline = 1;
            double observed = 2;
            string raw_value = 3;
            bool numeric = 4;
        }
        message Details {
            map<string, string> details = 1;           // <key, value> for new events
        }

        oneof evidence_oneof {
            Values values = 1;
            Details details = 2;
        }
    }

    Evidence evidence = 14;
}
