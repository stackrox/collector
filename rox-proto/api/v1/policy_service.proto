syntax = "proto3";

option go_package = "v1";
option java_package = "stackrox.generated";

import weak "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "api/v1/common.proto";
import "api/v1/empty.proto";
import "api/v1/image_service.proto";
import "api/v1/deployment_service.proto";
import "api/v1/search_service.proto";

package v1;

// Top level policy object.
///////////////////////////

message Policy {
    string id                                   = 1;
    string name                                 = 2;
    string description                          = 3;
    string rationale                            = 4;
    string remediation                          = 5;
    bool disabled                               = 6;
    repeated string categories                  = 7;
    PolicyFields fields                         = 8;

    LifecycleStage lifecycle_stage              = 9;
    repeated Whitelist whitelists               = 10;
    repeated Scope scope                        = 11;

    Severity severity                           = 12;
    EnforcementAction enforcement               = 13;
    repeated string notifiers                   = 14;
}

// Policy components.
/////////////////////

enum EnforcementAction {
    UNSET_ENFORCEMENT                           = 0;
    SCALE_TO_ZERO_ENFORCEMENT                   = 1;
    UNSATISFIABLE_NODE_CONSTRAINT_ENFORCEMENT   = 2;
    KILL_POD_ENFORCEMENT                        = 3;
}

message Whitelist {
    string                    name       = 1;
    message Container {
        ImageName image_name = 3;
    }
    Container                 container  = 2;
    message Deployment {
        string                name       = 3;
        Scope                 scope      = 4;
    }
    Deployment                deployment = 5;
    google.protobuf.Timestamp expiration = 6;
}

message DockerfileLineRuleField {
    string instruction  = 1;
    string value        = 2;
}

enum Comparator {
    LESS_THAN              = 0;
    LESS_THAN_OR_EQUALS    = 1;
    EQUALS                 = 2;
    GREATER_THAN_OR_EQUALS = 3;
    GREATER_THAN           = 4;
}

enum MathOP {
    MIN = 0;
    MAX = 1;
    AVG = 2;
}

enum LifecycleStage {
    DEPLOY_TIME = 0;
    BUILD_TIME  = 1;
    RUN_TIME    = 2;
}

message NumericalPolicy {
    Comparator op  = 1;
    MathOP math_op = 2;
    float value    = 3;
}

// Image Name
message ImageNamePolicy {
    string registry        = 1; // e.g. docker.io
    string remote          = 2; // e.g. stackrox/container-summarizer
    string tag             = 3; // e.g. latest
}

message Component {
    string name    = 1;
    string version = 2;
}

message KeyValuePolicy {
    string key   = 1;
    string value = 2;
}

message VolumePolicy {
    string name         = 1;
    string source       = 2;
    string destination  = 3;
    oneof set_read_only {
        bool read_only  = 4;
    }
    string type         = 5;
}

message PortPolicy {
    int32 port          = 1;
    string protocol     = 2;
}

message ResourcePolicy {
    message NumericalPolicy {
        Comparator op  = 1;
        float value    = 2;
    }

    NumericalPolicy cpu_resource_request    = 1;
    NumericalPolicy cpu_resource_limit      = 2;
    NumericalPolicy memory_resource_request = 3;
    NumericalPolicy memory_resource_limit   = 4;
}

message ProcessPolicy {
    string name = 1;
    string args = 2;
}

message PolicyFields {
    ImageNamePolicy image_name          = 1;

    // Registry metadata
    oneof set_image_age_days {
        int64 image_age_days            = 2;
    }
    DockerfileLineRuleField line_rule   = 3;

    // Scan Metadata
    NumericalPolicy cvss                = 4;
    string cve                          = 5;

    Component component                 = 6;
    oneof set_scan_age_days {
        int64 scan_age_days             = 7;
    }

    // Whether to alert if no scan exists for an image.
    oneof set_no_scan_exists {
        bool no_scan_exists              = 8;
    }

    KeyValuePolicy env                   = 9;
    string command                       = 10;
    string args                          = 11;
    string directory                     = 12;
    string user                          = 13;

    VolumePolicy volume_policy           = 14;


    PortPolicy port_policy                = 15;
    KeyValuePolicy required_label         = 16;
    KeyValuePolicy required_annotation    = 17;

    oneof set_privileged {
        bool privileged                   = 18;
    }
    repeated string drop_capabilities     = 19;
    repeated string add_capabilities      = 20;

    ResourcePolicy container_resource_policy = 21;
    ResourcePolicy total_resource_policy     = 22;

    ProcessPolicy process_policy = 23;
}

// API supporting messages.
///////////////////////////

message DryRunResponse {
    message Alert {
        string deployment          = 1;
        repeated string violations = 2;
    }
    repeated Alert alerts = 1;
    message Excluded {
        string deployment   = 1;
        Whitelist whitelist = 2;
    }
    repeated Excluded excluded     = 2;
}

message PolicyCategoriesResponse {
    repeated string categories = 1;
}

message RenamePolicyCategoryRequest {
    string old_category = 1;
    string new_category = 2;
}

message DeletePolicyCategoryRequest {
    string category = 1;
}

message ListPolicy {
    string   id          = 1;
    string   name        = 2;
    string   description = 3;
    Severity severity    = 4;
    bool     disabled    = 5;
}

message ListPoliciesResponse {
    repeated ListPolicy policies = 1;
}

message PatchPolicyRequest {
    string id         = 1;
    oneof set_disabled {
        bool disabled = 2;
    }
}

service PolicyService {

    rpc GetPolicy (ResourceByID) returns (Policy) {
        option (google.api.http) = {
            get: "/v1/policies/{id}"
        };
    }

    rpc ListPolicies (RawQuery) returns (ListPoliciesResponse) {
        option (google.api.http) = {
            get: "/v1/policies"
        };
    }

    rpc PostPolicy (Policy) returns (Policy) {
        option (google.api.http) = {
            post: "/v1/policies"
            body: "*"
        };
    }

    rpc PutPolicy (Policy) returns (Empty) {
        option (google.api.http) = {
            put: "/v1/policies/{id}"
            body: "*"
        };
    }

    rpc PatchPolicy (PatchPolicyRequest) returns (Empty) {
        option (google.api.http) = {
            patch: "/v1/policies/{id}"
            body: "*"
        };
    }

    rpc DeletePolicy (ResourceByID) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/policies/{id}"
        };
    }

    rpc ReassessPolicies (Empty) returns (Empty) {
        option (google.api.http) = {
            post: "/v1/policies/reassess"
        };
    }

    rpc DryRunPolicy (Policy) returns (DryRunResponse) {
        option (google.api.http) = {
            post: "/v1/policies/dryrun"
            body: "*"
        };
    }

    rpc GetPolicyCategories (Empty) returns (PolicyCategoriesResponse) {
        option (google.api.http) = {
            get: "/v1/policyCategories"
        };
    }

    rpc RenamePolicyCategory (RenamePolicyCategoryRequest) returns (Empty) {
        option (google.api.http) = {
            put: "/v1/policyCategories/{old_category}"
            body: "*"
        };
    }

    rpc DeletePolicyCategory (DeletePolicyCategoryRequest) returns (Empty) {
        option (google.api.http) = {
            delete: "/v1/policyCategories/{category}"
        };
    }
}
